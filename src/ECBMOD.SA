

       NAM    ECBMOD

**********************************************************************
*                                                                    *
*    Copyright 1982 by Microsoft Corporation, all rights reserved    *
*                                                                    *
**********************************************************************

       TTL    External Declarations

       XREF   ALPHLK,ASC2,ASCFLG
       XREF   BOOT64,BITIN,BUF
       XREF   CASBUF,CASOFF,CASON,CBIN,CBLINK,CBOUT,CHKCLS,CHKCOM,CHKOPN
       XREF   CHR$DO,CLOADM,COMBYT,CONINT,CRDO,CSAVEM,CSFNAM,CSRDON
       XREF   DBNCNT
       XREF   ENDHKS,ERRAO,ERRBM,ERRDN,ERRIO,ERRNO,ERROR,EVLADR
       XREF   FCERR,FILNAM,FILTYP,FINI,FNAMLN,FRESTR,FRMEVL,FRMNUM
       XREF   FUNDSP,FUNLST
       XREF   GAPFLG,GETBYT,GIVABF,GOPTNW
       XREF   HDRLEN,HKBRKC,HRCHRI,HRCHRO,HKCKDI,HRCKDO,HKCLS,HKCLS1
       XREF   HKCLSA,HKDNCK,HKDPRM,HKEOF,HKFNLD,HKINLN,HKOPEN,HOOKS
       XREF   HRDINI
       XREF   INTCNV,INTIDX,ISCNTC,INTWDG
       XREF   JOYIN
       XREF   LDBUFR,LIST,LOADAD,LPTOUT
       XREF   MAIN
       XREF   NFUNTK,NNRMTK,NRTSH3,NRTSHK,NZLINK
       XREF   OFFTK,ONTK
       XREF   PINIT,POLCAT,POTVAL
       XREF   READY,REASON,REDDY,RESLST,ROLTBL
       XREF   SAMALP,SCROUT,SCRTCH,SFTINI,SNERR,SNGFLT
       XREF   STKINI,STMDSP,STROUT,STRTAD,STUBO,SYNCHR
       XREF   TEMPST
       XREF   USRTAB
       XREF   VIRQ
       XREF   WRTLDR
       XREF   XRRUN,XRSLWC

       IFEQ   REALIO
 ENDC   IFE REALIO

       TTL    Equates

       XDEF   SCRADR
SCRADR EQU    @2000    Address of screen memory (400 hex).

       IFNE   METTOY
       XDEF   PIA0AD
PIA0AD EQU    @177400  PIA0, side A, data reg.  (FF00)
       ENDC   IFN      METTOY
       IFNE   GRPTEK
 ENDC   IFN GRPTEK
       XDEF   PIA0AC
PIA0AC EQU    PIA0AD+&1 PIA0, side A, control reg.
       XDEF   PIA0BD
PIA0BD EQU    PIA0AC+&1 PIA0, side B, data reg.
       XDEF   PIA0BC
PIA0BC EQU    PIA0BD+&1 PIA0, side B, control reg.

       IFNE   METTOY
       XDEF   PIA1AD
PIA1AD EQU    @177440  PIA1, side A, data reg.  (FF20)
       ENDC   IFN      METTOY
       IFNE   GRPTEK
 ENDC   IFN GRPTEK
       XDEF   PIA1AC
PIA1AC EQU    PIA1AD+&1 PIA1, side A, control reg.
       XDEF   PIA1BD
PIA1BD EQU    PIA1AC+&1 PIA1, side B, data reg.
       XDEF   PIA1BC
PIA1BC EQU    PIA1BD+&1 PIA1, side B, conrtrol reg.

CARTRM EQU    @140000  Address of cartridge ROM.  (C000)
EXTROM EQU    @100000  Address of extension ROM.  (8000)

       XDEF   SAM
SAM    EQU    @177700  Address of SAM chip.  (FFC0)

DSKROM EQU    @140000  The address of the disk ROM.  (C000)

       TTL    Power up and Reset code.

*
* Here on RESET and power up after executing HRDINI routine.
*

HRDRT1 LDS    #BUF+BUFLEN Set up a temporary stack.
       IFNE   REALIO
       LDA    #@67     Enable the cartridge interrupt
       STA    PIA1BC   at the PIA.
       ENDC   IFN      REALIO
       LDA    RSTFLG   Is the restart flag set?
       CMPA   #@125
       BNE    INIT     No, must go through initialization.
       LDX    RSTVEC   Yes, does the restart vector point
       LDA    ,X       to a NOP instruction?
       CMPA   #@22
       BNE    INIT     No, must go through initialization.
*    This check is made so that if the
*    user pulls out a cartridge and hits
*    reset we won't jump to the restart
*    address where there is no longer
*    any code.
       JMP    ,X       Restart the current program.

*
* Here on reset and power up.
*

       XDEF   POWRUP
POWRUP LEAY   HRDRT1,PCR Set up return address for HRDINI.
       JMP    HRDINI   (Can't use stack since RAM is no
â€¢    good until the SAM is initialized.)
*
* Here to perform BASIC initialization.
*

       XDEF   INIT
INIT   EQU    *
       IFNE   REALIO
       LDX    #SCRADR+&1 Clear RAM from 0 to the start of the
CLRRAM CLR    ,--X     screen memory.
       LEAX   &1,X     (This roundabout method saves bytes
       BNE    CLRRAM   over the more obvious way.)
       JSR    GRNCHR   Clear the screen and make X point to
*    the first byte following the screen
*    memory.
       ENDC   IFN      REALIO
       IFEQ   REALIO
 ENDC   IFE REALIO
       CLR    ,X+      Put a zero below TXTTAB and set it
       STX    TXTTAB   up.

*
* Here to find the top of RAM.
*

       IFNE   REALIO
MEMLOP LDA    &2,X     Get byte from memory.
       COMA            Invert all  the bits.
       STA    &2,X     Store the complement.
       CMPA   &2,X     Did it store OK?
       BNE    HAVEND   No, this byte is not useable RAM.
       LEAX   &1,X     Yes, bump the address.
       COM    &1,X     Restore the original contents.
       BRA    MEMLOP   Look at the next byte.
       ENDC   IFN      REALIO

       IFEQ   REALIO
 ENDC   IFE REALIO
HAVEND STX    ENDMEM   Set pointer to end of memory.  Don't
*    use last good byte so VAL trick will
*    work OK in the degenerate case.
       STX    MEMSIZ   Mark end of BASIC's memory.
       STX    FRETOP   This is the end of string space also.
       LEAX   -STRSPC,X Set the bottom of string space.
       STX    STKTOP   This is the top of the stack.
       TFR    X,S      Switch from temp stack to BASIC's
*    real stack.
       JSR    SFTINI   Init the I/O driver routines.
       IFNE   REALIO
       LDX    #LORAM   Initialize direct page RAM.
       LDU    #EXECAD
       LDB    #NLORAM
       JSR    COPLOP
       LDU    #VIRQ    Initialize RAM off the direct page.
       LDB    #NHIRAM
       JSR    COPLOP
       LDX    #SNERR   X:=SNERR for intializing the dispatch
*    addresses of stub 1.
       ENDC   IFN      REALIO
       IFEQ   REALIO
 ENDC   IFE REALIO
       STX    &3, U    Init the stub 1 dispatch addresses.
       STX    &8,U
       IFNE   REALIO
       LDX    #HOOKS   Initialize the extension hooks by
*    putting in RTS instructions.
       LDD    #$3900+NRTSH3 A:=RTS opcode,
*    B:=number of bytes
*    to initialize.
*    (Add $Z since NRTSHK is external.)
INIHKS STA    ,X+      (Note that putting RTS instructions
       DECB            into all three bytes of each hook is
       BNE    INIHKS   OK and saves bytes here.)
       STA    NZLINK   Make NZLINK nonzero for CHEAD.
       ENDC   IFN      REALIO
       JSR    SCRTCH   Set up everthing else.
       JSR    XRRUN    Set up the PLAY and DRAW defaults.
       LDX    #USRTAB  Put the address of USRTAB into
       STX    USTBAD   USTBAD so USRTAB can be referenced
*    indirectly through USTBAD.
       LDU    #FCERR   Init all USRTAB entries so they
       LDB    #&10     dispatch to FCERR unless explicitly
FCUSLP STU    ,X++     defined by the user.
       DECB
       BNE    FCUSLP
       IFNE   REALIO
       JSR    PINIT    Init for graphics code.
       LDA    PIA0BC   Enable the 60 Hertz interrupt.
       ORA    #&1
       STA    PIA0BC
       LDX    #'D*&256+'K Is there a disk ROM in the machine?
       CMPX   DSKROM
       LBEQ   DSKROM+&2 Yes, go to its initialization code.
       ENDC   IFN      REALIO
       ANDCC  #$FF!X(F!+I) Allow the cartridge to interrupt now
*    before displaying the sign on message.
       LDX    #SIGNON-&1 Print the sign on message.
       JSR    STROUT
       LDX    #BASRST  Set the restart vector.
       STX    RSTVEC
       XDEF   FINIT
FINIT  LDA    #@125    Set the restart flag.
       STA    RSTFLG
       BRA    GORDY    Go to command level and say "OK".

*
* Here to restart BASIC.
*

       XDEF   BASRST
BASRST NOP             The NOP required of all restart entry
*    points.
       CLR    DURCNT   Clear the PLAY note duration count
       CLR    DURCNT+&1 so interrupts don't think we are
*    still playing the note.
       LDA    PIA0BC   Enable the 60 hertz interrupt.
       ORA    #&1
       STA    PIA0BC
       CLR    DEVNUM   Make sure output goes to screen and
*    input comes from keyboard.
       JSR    STKINI   Reset the stack and things.
       ANDCC  #$FF!X(F!+I) Enable interrupts.
       JSR    GRNCHR   Clear the screen.
GORDY  JMP    READY    Go say "OK".


*
* Here on a FIRQ to handle the cartridge interrupt.
*

CARTRG TST    PIA1BC   Did the cartridge cause the interrupt?
       BMI    GOCART   Yes.
       RTI             No, return from the interrupt.

GOCART JSR    DELHAF   Delay for about a second to let the
       JSR    DELHAF   user finish installing the cartridge.
       LEAY   <HRDRT2,PCR Init the hardware.  HRDINI leaves the
       JMP    HRDINI   cartridge interrupt disabled.
HRDRT2 CLR    RSTFLG   Don't allow BASIC to be restarted.
       JMP    CARTRM   Go execute the cartrige program.

*
* Delay for about one half second.
*

       XDEF   DELHAF
DELHAF LDX    DBLZER
DELAY  LEAX   -&1,X
       BNE    DELAY
       RTS
