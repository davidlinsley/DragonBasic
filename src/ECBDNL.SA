
       NAM    Downloader for TXR / MLC

**********************************************************************
*                                                                    *
â€¢    Copyright 1982 by Microsoft Corporation, all rights reserved    *
*                                                                    *
**********************************************************************

       TTL    External Declarations

       XREF   BLKIN,BLKOUT
       XREF   CASBUF,CHKCOM,CHRINP,CHROUT,CLOAD,CLOSIT,CLSCAS,COMBYT,CSRDON
       XREF   ERRNE,ERROR,EVLADR
       XREF   FCERR,FILNAM,FILTYP,FINLDB,FMERR
       XREF   GAPFLG,GETBYT,GETFLN
       XREF   INHST,IOERR
       XREF   JOYIN
       XREF   LODBUF
       XREF   MAIN,MLDUNG
       XREF   OPNCSI,OUTHST
       XREF   PIA1AD,PIA1BD,POLCAT
       XREF   SCRTCH,STBAUD
       XREF   TRMCHK
       XREF   WRTLDR

       TTL    Equates

DNLTRY EQU    &5       Number of times to try before giving
*    up when communicating with the host.

P.ABRT EQU    @274     Abort control code.  (BC)
P.ACK  EQU    @310     Acknowledge control code.  (C8)
P.BLKR EQU    @227     Block request.  (97)
P.FILR EQU    @212     File request.  (8A)
P.NAK  EQU    @336     Bad transmission.  (DE)

       TTL    DLOAD - Load program from host computer.

*
* DLOAD[<filename>[,<baud rate select>]]
* DLOADM[<filename>[,[<baud rate select>][,<load offset>]]]
*

       XDEF   DLOAD
DLOAD  JSR    CLSCAS   Close the cassette since DLOAD uses
*    the cassette buffer and other temps.
       CLR    ,-S      Say it isn't DLOADM.
       JSR    CHRGOT   Refetch since CLSCAS destroyed A.
       CMPA   #'M      Is it DLOADM?
       BNE    NTDLDM   No.
       STA    ,S       Yes, remeber that it is.
       JSR    CHRGET   Skip over the "M".
NTDLDM JSR    GETFLN   Scan the filename into FILNAM.
       JSR    CHRGOT   End of the statement?
       BEQ    OLDBR    Yes, use the old baud rate.
       JSR    CHKCOM   No, skip a comma.
       CMPA   #COMMA   Use the old baud rate?
       BEQ    OLDBR    Yes.
       JSR    GETBYT   No, evaluate the baud rate arg.
       JSR    STBAUD   Call the baud rate select routine.
       LBCS   FCERR    Bad argument, give FC error.
OLDBR  JSR    OPNHST   Open the file on the host and load
*    the cassette buffer.
       PSHS   A        Save the file type byte.
       LDA    #-&3     Set DEVNUM so chars come from the
       STA    DEVNUM   host file.
       PULS   A        Retrieve the file type.
       TST    ,S+      Test and get rid of the DLOADM flag.
       BNE    DLOADM   Go handle DLOADM.
       JSR    TRMCHK   For DLOAD, the statement must end now.
       TSTB            Is it an ASCII file?
       BEQ    BADMOD   No, can't load it.
       JSR    SCRTCH   Yes, get rid of the old program.
       JMP    MAIN     Main does the rest.

BADMOD JMP    FMERR    Give a file mode error.
*    Eventually the host will figure out
*    that we have given up.

*
* The CLOAD code comes here so we can grab CLOADM to handle
* assembler object code files which have the same format as
* DLOADM files.
*

       XDEF   CLOADM
CLOADM CLR    CASOPN   Yes, force the cassette closed.
*    (Don't force out buffer to be
*    consistent with 8K ROM.  See comments
*    regarding this in 8K CLOAD code.)
       JSR    CHRGET   Skip over the "M".
       JSR    GETFLN   Scan the filename.
       JSR    OPNCSI   Open the cassette for input.
       TST    GAPFLG   Is it a gapped file?
       LBEQ   MLDUNG   No, let 8K ROM handle.
       LDU    FILTYP   Yes, save the FILTYP and ASCFLG in
*    in U since LODBUF will overwrite
*    them.  (LODBUF doesn't affect U.)
       DEC    DEVNUM   Set DEVNUM to -1 for cassette.  (It
*    is OK to assume that DEVNUM is zero
*    since it is guaranteed to be zero
*    at the start of each statement.)
       JSR    LODBUF   Load the cassette buffer.
       TFR    U,D      A:=FILTYP, B:=ASCFLG.
DLOADM SUBD   #&2*&256 Must be a binary machine language
*    file.
       BNE    BADMOD   Give file mode error if not.
       LDX    DBLZER   Assume no load offset given.
       JSR    CHRGOT   Is there one?
       BEQ    OFFNO    No.
       JSR    CHKCOM   Yes, skip the comma and evaluate
       JSR    EVLADR   the load offset into X.
OFFNO  STX    LODOFF   Save the load offset.
       JSR    TRMCHK   The statement must end now.
LODMRC BSR    NXTCHR   Get and save the record type byte.
       PSHS   A
       BSR    LOD2M    Read the record length into D.
       TFR    D,Y      Move byte count to Y.
       BSR    LOD2M    D:=load or execution address,
       ADDD   LODOFF   Add in the offset.
       STD    EXECAD   Store it for the EXEC statement.
       TFR    D,X      Put load address into X.
       LDA    ,S+      Is this a data record?
       LBNE   CLOSIT   No, close the file and return.
LODMLP BSR    NXTCHR   Get a byte of the program.
       STA    ,X       Store it.
       CMPA   ,X+      Did it store OK?
       BNE    GOIOER   No, give I/O error.
       LEAY   -&1,Y    Yes, more to read?
       BNE    LODMLP   Yes, read the next byte.
       BRA    LODMRC   No, go handle the next record.

LOD2M BSR     LOD1M    D:=next two bytes from tape.
LOD1M BSR     NXTCHR
       EXG    A,B
LODRTS RTS

*
* Read char from file and give I/O error if end of file.
*

NXTCHR JSR    CHRINP   Try to read a char.
       TST    EOFFLG   End of file?
       BEQ    LODRTS   No, return with the char.
GOIOER JMP    IOERR    yes, give an I/O error.

*
* Open the file on the host and load the first block into the
* cassette buffer.
* On exit, A=file type, B:=ASCII flag.
*

OPNHST BSR    OPNDNL   Open the file.
       PSHS   D        Save file type and ASCII flag.
       INCA            Was the file found?
       BEQ    NEERR    No, give NonExistent file error.
       LDU    DBLZER   Yes, zero the block number.
       BSR    LDBUFU   (Enter with U set up.)
       PULS   D,PC     Retrieve file type and ASCII flag
*    and return.

NEERR  LDB    #ERRNE  NonExistent file error.
       JMP    ERROR


*
* Load next block of host file into cassette buffer.
*

       XDEF   LDBUFR
LDBUFR LDU    BLKNUM   U:=block number for DNLBLK.
LDBUFU LEAX   &1,U     Increment it for next time.
       STX    BLKNUM
       LDX    #CASBUF  Set up buffer pointer for DNLBLK.
       JSR    DNLBLK   Load the block from the host.
       JMP    FINLDB   Finish up in the cassette load
*    buffer code to set the character count
*    and buffer pointer.


       TTL    OPNDNL - Open file for downloading.

*
* In - FILNAM through FILNAM+7 contains the filename, left
* justified, blank filled.
*
* Out - A=file type byte, FF means file not found.
* B=ASCII flag, FF if ASCII file, 0 if binary file.
*

OPNDNL CLRA            Clear the error count and reserve
       PSHS   X,D      storage r error count, LRC, file
*    type, and ASCII flag.
       LEAY   ,S       Mark the stack.
       BRA    FILREQ   Go send out the first file request.

FILERR BSR    INCERR   Increment the error count.
FILREQ LDA    #P.FILR  Send fiie request control code and
       BSR    OUTREQ   look at the host's response.
       BNE    FILERR   Timed out or wrong response.
       LDX    #FILNAM  Send out the filename while
SNDNLP LDA    ,X+      calculating the LRC.  (LRC was
       JSR    BOLRC    cleared by OUTREQ.)
       CMPX   #FILNAM+&8
       BNE    SNDNLP
       BSR    OUTLRC   Send out the LRC and look for ACK.
       BNE    FILERR   No ACK, try it all over.
       BSR    BILRC    Read the file type.  (OUTLRC cleared
*    the LRC.)
       BNE    FILERR   Time out
       STA    &2,Y     Save the file type.
       BSR    BILRC    Read the ASCII flag.
       BNE    FILERR   Time out
       STA    &3,Y     Save the ASCII flag.
       BSR    INLRC    Read and check the LRC.
       BNE    FILERR   Error, start over.
       LEAS   &2,S     All OK, get rid of garbage.
       PULS   D,PC     A:=file type, B:=ASCII flag,
*    and return.
