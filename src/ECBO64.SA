       NAM    IODRVR
       OPT    REL,LLE=120
       TTL    I/O DRIVER EQUATES
*
* I/O DEVICE ADDRESS EQUATES
*
* CONVENTIONS USED:
*
* DDR = DATA DIRECTION REGISTER
* PDR = PERIPHERAL DATA REGISTER
* CR  = CONTROL REGISTER
* A   = A-SIDE OF PIA
* B   = B-SIDE OF PIA
* E.G. P0CRA = CONTROL REGISTER FOR A-SIDE OF PIA SELECCTED BY P0
* PIA ADDRESS EQUATES FOLLOW
       XREF   VFIRQ,VIRQ,VNMI,VSWI,VSWI2,VSWI3,XRSLWC
*
* P0 PIA
*
P0DDRA EQU    $FF00
P0PDRA EQU    P0DDRA
P0CRA  EQU    P0DDRA+1
P0DDRB EQU    P0DDRA+2
P0PDRB EQU    P0DDRB
P0CRB  EQU    P0DDRB+1
*
* RS232 6551 CHIP
*
RSTXD  EQU    $FF04
RSRXD  EQU    RSTXD
RSSTAT EQU    RSTXD+1
RSCMD  EQU    RSTXD+2
RSCNT  EQU    RSTXD+3
*
* P1 PIA
*
P1DDRA EQU    $FF20
P1PDRA EQU    P1DDRA
P1CRA  EQU    P1DDRA+1
P1DDRB EQU    PIDDRA+2
P1PDRB EQU    P1DDRB
P1CRB  EQU    P1DDRB+1
*
* SAM CHIP EQUATES
*
SAMCR  EQU    $FFC0    BASE ADDRESS OF SAM CONTROL REGISTER
SAMF1S EQU    $FFC9    F1 SET ADDRESS
SAMM0S EQU    $FFDB    M0 SET ADDRESS
SAMM1S EQU    $FFDD    M1 SET ADDRESS
SAMTYC EQU    $FFDE    MAP TYPE CLEAR ADDRESS
SAMTYS EQU    $FFDF    "   "    SET     "
*
* ADDRESSES OF I/O DRIVER RAMS FOLLOW
*
PWIDTH EQU    $82      PULSE WIDTH COUNTER
BITCNT EQU    $83      BIT COUNTER (SYNC BITS NORMALLY)
BPFLAG EQU    $84      BIT PHASE FLAG
LSTSIN EQU    $85      LAST SINE TABLE ENTRY TO BE OUTPUT
CURADR EQU    $88      CURRENT CURSOR ADDRESS IN 88,89
CBLCNT EQU    $8F      CURRENTNCURSOREBLINKYCOUNT
LDRCNT EQU    $90      COUNT OF NUMBER OF LEADER BYTES
MIN0WD EQU    $92      MINIMUM CYCLE WIDTH OF 1200 HZ (IN PWIDTHS)
MIN0PW EQU    $93      "    PULSE   "   "    "  "   "     "
MAX0PW EQU    $94      MAXIMUM   "     "   "    "  "   "     "
MODLAY EQU    $95      CASSETTE MOTOR DELAY VALUE
KBDLAY EQU    $97      KEYBOARD DEBOUNCE DELAY VALUE
LPTCFW EQU    $99      LINE PRINTER COMMA FIELD WIDTH
LPTLCF EQU    $9A      "     "    LAST COMMA FIELD
LPTWID EQU    $9B      "     "    WIDTH
LPTPOS EQU    $9C      "     "    CURRENT CHARACTER POSITION
LSTKEY EQU    $011D    LAST ASCII KEY VALUE RETURNED
CNTDWN EQU    $011E    COUNTDOWN TO AUTO-REPEAT
RPTDLY EQU    $011F    INTER-REPEAT DELAY VALUE
AUTOLF EQU    $0148    BUFFER FULL AUTO LINE FEED FLAG
ALLOCK EQU    $0149    ALPHA LOCK FLAG
FOLSEC EQU    $014A    LINE PRINTER EOL TERMINATOR SEQUENCE
KBROLL EQU    $0151    KEYBOARD ROLLOVER PATTERN TABLE
POTVAL EQU    $015A    START ADDRESS OH JOYSTICK READINGS
LDELAY EQU    $03FD    END OF LINE PRINT DELAY
PRNFLG EQU    $03FF    SERIAL/PARALLEL PRINTER FLAG
*
* CONSTANT VALUES FOLLOW
*
ON     EQU    $FF      ON VALUE
TRUE   EQU    ON       TRUE VALUE
OFF    EQU    $00      OFF VALUE
FALSE  EQU    OFF      FALSE VALUE
* CHARACTER CONSTANTS
SP     EQU    $20      SPACE
CR     EQU    $0D      CARRIAGE RETURN
LF     EQU    $0A      LINE FEED
BS     EQU    $08      BACK SPACE
INVSP  EQU    $60      INVERTED SPACE
SHIFT0 EQU    $12      SHIFTED 0 SPECIAL CASE
*
* MISC CONSTANTS
*
SYNCNT EQU    $60      NUMBER OF BITS TO MAKE UP VALID SYNC DETECT
HOMPOS EQU    $0400    HOME POSITION OF SCREEN VIDEO RAM
EOSPOS EQU    $05FF    END      "    "     "     "    "
BLPOS  EQU    $05E0    START OF LAST LINE ON SCREEN
LWIDTH EQU    $84      LINE WIDTH OF PRINTER
LCFW   EQU    $10      COMMA FIELD WIDTH
LLCF   EQU    LWIDTH-LCFW LAST COMMA FIELD
COLS   EQU    $08      NUMBER OF COLUMNS IN KB MATRIX
MSEC10 EQU    $045E    10 MILLISECOND DELAY VALUE
CBLVAL EQU    $32      CURSOR BLINK RATE CONSTANT
*
* END OF EQUATES
*
* START ADDRESS OF ROUTINES FOLLOWS
*
       TTL    I/O DRIVER SUBROUTINES
* I/O DRIVER SUBROUTINES FOLLOW:
*
       XDEF   OEMMEM
OEMMEM EQU    *
*
* CBLINK - CURSOR BLINK ROUTINE
*
       XDEF   ZCBLIN
ZCBLIN EQU    *
CBLINK DEC    CBLCNT   UPDATE BLINK RATE COUNTER
       BNE    BLDLAY   IF .NE. 0 THEN DELAY 10 MSECS
       LDA    #CBLVAL  OTHERWISE RESET TO INITIAL VALUE
       STA    CBLCNT   FOR BLINK RATE
       LDX    CURADR   GET READY TO FLASH CURSOR
       LDA    0,X      BY READIN6 CHAR AT CURSOR POS
       CMPA   #$AF     IS THE CURSOR GRAPHIC BLUE ?
       BEQ    INVERT   CHANGE TO GRAPHIC GREEN IF SO
       LDA    #$8F     OTHERWISE LOAD GRAPHIC GREEN AND THEN CHANGE TO BLUE
INVERT EORA   #$20     BLUE TO GREEN OR GREEN TO BLUE
       STA    0,X      BEFORE WRITNG BACK
BLDLAY LDX    #MSEC10  SET UP 10 MSEC DELAY CONSTANT
*
* IXDLAY - DELAY ROUTINE
*
IXDLAY LEAX   -1,X     DECREMENT IX
       BNE    IXDLAY   REPEAT UNTIL (IX) = 0
       RTS
*
* ROUTINES USED BY THE KEYBOARD POLLER FOLLOW
*
* CHKROW - CHECKS ROWS OF K/8 MATRIX FOR CLOSURE
*
CHKROW LDB    P0PDRA   READ ROW DATA
       ORB    #$80     SET UNUSED BIT
       TST    P0PDRB   SHIFT KEY IS
       BMI    NOSHFT   IS MASKED OUT
       ORB    #$40     BY THIS
NOSHFT RTS
*
* CSHIFT - CHECKS THE STATE OF THE SHIFT KEY, Z = 1 IF PRESSED
*
CSHIFT LDB    #$7F     CLEAR TOP BIT
       STB    P0PDRB   OF THE COLUMNS
       LDB    P0PDRA   THEN READ ROWS
       ANDB   #$40     MASK OFF ALL BUT SHIFT KEY
       RTS
*
* POLCAT - POLL THE K/B AND RETURN CHARACTER IN (A)
*
       XDEF   ZPOLCA
ZPOLCA EQU    *
POLCAT PSHS   B,X      SAVE REGS
       BSR    POLLKB   POLL AND ENCODE KEYS
       JMP    KEYINT   SET UP COUNTDOWN
*
* POLLKB - POLLS THE K/B, DETECTS KEY CLOSURES, DEBOUNCES KEYS, PERFORMS
* ROLLOVER AND ENCODES CHARACTERS
*
POLLKB LEAS   -2,S     RESERVE 2 BYTES OE WORRKSPACE ON STACK
       LDX    #KBROLL  SET UP ADDRESS OF KB ROLLOVER TABLE
* THE FIRST THING TO DO IS TO CHECK FOR ANY KEY CLOSURES WHATSOEVER
