PAGE  001  ECBCOM  .SA:0  EXTEND Extension ROM Direct Page RAM

00700                             OPT    L,LLE=120
00701                             NAM    EXTEND   - Extended Features for TCC / MLC
00702
00703                      **********************************************************************
00704                      *                                                                    *
00705                      *    Copyright 1982 by Microsoft Corporation, all rights reserved    *
00706                      *                                                                    *
00707                      **********************************************************************
00708
00709                             TTL    External Declarations
00710
00711                             XREF   ASC2
00712                             XREF   BASRST,BLKOUT,BLTU,BUF
00713                             XREF   CASOFF,CHEAD,CHEADA,CHKCLS,CHKCOM,CHKNUM,CHKOPN,CHKSTR,CHROUT
00714                             XREF   CIRCLE,CLEARC,CLOATK,COLORS,COMBYT,CONDCR,CONINT,COPLOP
00715                             XREF   CRDO,CSAVE,CSAVTK
00716                             XREF   DATA,DCRNCH,DEVPRM,DLOAD,DOFDSP,DOSDSP,DRAW
00717                             XREF   EDTENT,ELSETK,ENDCON,EOFFIN,EOFWRT,EQULTK
00718                             XREF   ERPRNT,ERRID,ERROR,ERRUF,EVLADR
00719                             XREF   FADD,FCERR,FDIV,FHALF,FINIT
00720                             XREF   FINLOG,FINSAV,FMULT,FNDLIN,FNTK,FONE
00721                             XREF   FOUT,FOUTCP,FPWRT,FREFAC,FRESTR,FRETMP,FRMEVL
00722                             XREF   FRMNUM,FSUB,FUNDS1
00723                             XREF   GET,GETADR,GETBYT,GETDNM,GETFLN,GETSPA
00724                             XREF   GIVABF,GOGONE,GONE3,GOPTNW,GOTK
00725                             XREF   HKASGN,HKCHRI,HKCHRO,HKCLS1,HKCRNC,HKERR,HKEVAL
00726                             XREF   HKNWST,HKRENM,HKRUN
00727                             XREF   INCHR,INIT,INLNDO,INPCOM,INPRT,INT,ISCNTC,ISDIGC,ISLETC
00728                             XREF   LET,LINE,LINGET,LINPRT,LOADAD,LOFBUF
00729                             XREF   MID$TK,MINUTK,ML1632,MLDVEX,MOVAF,MOV1F,MOVFA1,MOVFM
00730                             XREF   MOVINS,MOVMF,MULDIV
00731                             XREF   NEGOP,NORMAL
00732                             XREF   OPNICK,OPNCSO,OPNOCK,OUTQST,OUTSPC,OVERR
007,Z                             XREF   PAINT,PARCHK,PCLEAR,PCLS,PCOPY,PIA0BC,PIA0BD,PIA1BD
00734                             XREF   PINIT,PLAY,PLYCLK,PMODE
00735                             XREF   POLY,POLYX,PPOINT,PRESET,PSET,PTRGET,PTRGT2,PUT
00736                             XREF   READY,RUNC
00737                             XREF   SAM,SAMALP,SCREEN,SCRTCH,SETDNM,SIGN,SIN,SIN1,SNDOFF,SNERR
00738                             XREF   SNGFLT,STRLTI,STRSPA,STRTAD,STKINI,STMDS1
00739                             XREF   STRLT3,STROUT,STRPRT,STRTXT,STUB1,SUBTK,SYNCHR
00740                             XREF   THENTK,TICKER,TOTK,TRMCHK
00741                             XREF   ULERR,USRTAB,USRTK
00742                             XREF   VIRQ
00743                             XREF   WRTLDR
00744                             XREF   ZEROF1
00745
00746                             TTL    Miscellanous Routines
00747
00748                      *
00749                      * The RUN code comes here to set up the defaults for the PLAY
00750                      * and DRAW code.  The initialization code also comes here for
00751                      * the same reason.
00752                      *
00753
00754                             XDEF   XRRUN
00755P 0000 CC   B844    A XRRUN  LDD    #$B844   Init the PLAY arguments.
00756P 0003 DD   DF      A        STD    HIGHA    Set volume to 15 decimal.
00757P 0005 86   02      A        LDA    #&2      Set tempo to 2.

PAGE  002  ECBEXT  .SA:1  EXTEND Miscellanous Routines

00758P 0007 97   E2      A        STA    TEMPO
00759P 0009 97   DE      A        STA    OCTAVE   Select middle C octave.
00760P 000B 48                    ASLA            Set to undotted quarter notes.
00761P 000C 97   E1      A        STA    LNOTE
00762P 000E 0F   E5      A        CLR    DOTFLG
00763P 0010 DC   8A      A        LDD    DBLZER   Init the DRAW arguments.
00764P 0012 DD   E8      A        STD    DRWANG   Set angle and scale to zero.
00765P 0014 C6   80      A        LDB    #&128    Position to the middle.  (128,96) 
00766P 0016 DD   C7      A        STD    LSAVEX
00767P 0018 C6   60      A        LDB    #&96
00768P 001A DD   C9      A        STD    LSAVEY
00769P 001C 39             RUNRTS RTS             Return to RUN or initialization code.
00770
00771                             TTL    CSAVEM Code
00772
00773                      *
00774                      * CSAVEM <filename>,<first address>,<last address>,<execution address>
00775                      *
00776
00777                             XDEF   CSAVEM
00778P 001D 9D   9F      A CSAVEM JSR    CHRGET   Eat the "M" of CSAVEM.
00779P 001F BD   0000    A        JSR    GETFLN   Scan the filename.
00780P 0022 8D   43   0067        BSR    STKXAD   Evaluate the first address.
00781P 0024 BF   0000    A        STX    LOADAD   Put it in the file header too.
00782P 0027 8D   3E   0067        BSR    STKXAD   Evaluate the last address.
00783P 0029 AC   62      A        CMPX   &2,S     Is last .GE. first?
00784P 002B 1025 FFD1    A        LBLO   FCERR    No, give FC error.
00785P 002F 8D   36   0067        BSR    STKXAD   Yes, evaluate the execution address
00786P 0031 BF   0000    A        STX    STRTAD   and put it in the file header block.
00787P 0034 9D   A5      A        JSR    CHRGOT   The statement must end now or we
00788P 0036 26   E4   001C        BNE    RUNRTS   to a RTS so NEWSTT will give a
00789                      *    syntax error.
00790P 0038 86   02      A CSMDOR LDA    #&2      File type is machine language.
00791P 003A 9E   8A      A        LDX    DBLZER   GAPFLG:=ASCFLG:=.FALSE.
00792P 003C BD   0000    A        JSR    OPNCSO   Open cassette output file.
00793P 003F 0F   78      A        CLR    CASOPN   Mark cassette as closed since
00794                      *    OPNCSO marked it as open.
00795P 0041 0C   7C      A        INC    BLKTYP   Set block type to data.
00796P 0043 BD   0000    A        JSR    WRTLDR   Turn on the cassette and write a
00797                      *    leader.
00798
00799P 0046 AE   64      A        LDX    &4,S     X:=first address.
00800P 0048 9F   7E      A CSAVML STX    CBUFAD   Set the buffer address to write the
00801                      *    next block out 
00802P 004A 86   FF      A        LDA    #&255    Assume it's a full block.
00803P 004C 97   7D      A        STA    BLKLEN
00804P 004E EC   62      A        LDD    &2,S     See how many more bytes to write.
00805P 0050 93   7E      A        SUBD   CBUFAD
00606P 0052 24   05   0059        BHS    MORSAV   There's more to save.
00807P 0054 32   66      A        LEAS   &6,S     Nothing more, clean up the stack
00808P 0056 7E   0000    A        JMP    FINSAV   and go close the file.
00809
00810P 0059 1083 00FF    A MORSAV CMPD   #&255    Is there a full block?
00811P 005D 24   03   0062        BHS    BIGBLK   Yes.
00812P 005F 5C                    INCB            No be sure to get the last byte.
00813P 0060 D7   7D      A        STB    BLKLEN   Set actual block length.
00814P 0062 BD   0000    A BIGBLK JSR    BLKOUT   Write out the block.
00815P 0065 20   E1   0048        BRA    CSAVML   Go back for more.

PAGE  003  ECBEXT  .SA:1  EXTEND CSAVEM Code

00816
00817                             XDEF   STKXAD
00818P 0067 BD   0000    A STKXAD JSR    CHKCOM   Eat the comma.
00819P 006A BD   0000    A        JSR    EVLADR   Evaluate address into X.
00820P 006D EE   E4      A        LDU    ,S       U:=return address.
00821P 006F AF   E4      A        STX    ,S       Stack the evaluated address.
00822P 0071 1F   35      A        TFR    U,PC     Return with evaluated address on
00823                      *    the stack and in X.
00824
00825                              TTL   The FIX function.
00826
00827                      *
00828                      * FIX(X) returns the truncated integer part of X.
00829                      * FIX(X) is equivalent to SGN(X)*INT(ABS(X)).
00830                      * FIX differs from INT in that FIX does not return the next lower
00831                      * integer for negative arguments.
00832                      *
00833
00834
00835                             XDEF   FIX
00336P 0073 BD   0000    A FIX    JSR    SIGN     Is the number positive?
00837P 0076 2B   03   007B        BMI    FIXNEG   No.
00838P 0078 7E   0000    A GOINT  JMP    INT      Yes, just do normal INT function.
00839
00840P 007B 03   54      A FIXNEG COM    FACSGN   Negate the argument.
00841P 007D 8D   F9   0078        BSR    GOINT    Take the INT.
00842P 007F 7E   0000    A        JMP    NEGOP    Restore the original sign and return.
00843                      *    (Can't COM FACSGN, RTS since 0
00844                      *    would become -0. For example,
00845                      *    ?FIX(-.1) would print -0.)
00846
00847                             TTL    The EDIT Command
00848
00849                             XDEF   EDIT
00850P 0082 BD   04BC    P EDIT   JSR    LINTRM   LINNUM:=number of line to EDIT.
00851                      *    (Line number must be terminated.)
00852P 0085 32   62      A        LEAS   &2,S     Get rid of the NEWSTT return address
00853                      *    since EDIT exits into the MAIN code.
00854P 0087 86   01      A EDITA  LDA    #&1      Set flag so line will be listed
00855P 0089 97   D8      A        STA    EDTLST   prior to starting the edit.
00856P 008B BD   0000    A        JSR    FNDLIN   X:=pointer to link field of line.
00857P 008E 1025 FF6E    A        LBCS   ULERR    If carry set then line doesn't exist.
00858P 0092 BD   0000    A        JSR    DCRNCH   Decrunch the line into BUF.
00859P 0095 1F   20      A        TFR    Y,D      Calculate and store the line length.
00860P 0097 83   0001    A        SUBD   #BUF+&1  (The zero byte terminator isn't
00861P 009A D7   D7      A        STB    EDTLEN   included in the length.)
00862
00863P 009C DC   2B      A EDTPLN LDD    LINNUM   Print the line number followed
00864P 009E BD   0000    A        JSR    LINPRT   by a space.
00865P 00A1 BD   0000    A        JSR    OUTSPC
00866P 00A4 8E   0000    A        LDX    #BUF     Point to the start of the line.
00667P 00A7 D6   D8      A        LDB    EDTLST   Should the line be listed?
00868P 00A9 26   25   00D0        BNE    ELSTIT   Yes, go do it
00869
00870P 00AB 5F             EDTSUB CLRB            Repetition count:=0.
00871P 00AC BD   01D6    P EDTREP JSR    EDITIN   Get char - screen out bad ones.
00872P 00AF BD   0000    A        JSR    ISDIGC   Is it a digit?
00877P 00B2 25   0B   00BF        BCS    EDNTDG   No.

PAGE  004  ECBEXT  .SA:1  EXTEND The EDIT Command

00874P 00B4 80   30      A        SUBA   #'0      Its a digit, get  rid of ASCII offset.
00875P 00B6 34   02      A        PSHS   A        Save the digit.
00876P 00B8 86   0A      A        LDA    #&10     Rep count:=rep count*10.
00877P 00BA 3D                    MUL
00878P 00BB EB   E0      A        ADDB   ,S+      Add in the new digit.
00879P 00BD 20   ED   00AC        BRA    EDTREP   Look for more digits.
00880
00881P 00BF C0   01      A EDNTDG SUBB   #&1      If REP COUNT=0 then REP COUNT:=1.
00882P 00C1 C9   01      A        ADCB   #&1
00883P 00C3 81   41      A        CMPA   #'A      EDIT again?
00884P 00C5 26   05   00CC        BNE    EDITL    No.
00885P 00C7 BD   0000    A        JSR    CRDO     Yes,  start new line
00886P 00CA 20   BB   0087        BRA    EDITA    and  restart edit.
00887
00888P 00CC 81   4C      A EDITL  CMPA   #'L      LIST AND CONTINUE EDIT?
00889P 00CE 26   0B   00DB        BNE    EDITCR   NO
00890P 00D0 8D   31   0103 ELSTIT BSR    EDTPRT   YES, PRINT REST OF LINE
00891P 00D2 0F   D8      A        CLR    EDTLST   CLEAR LIST FLAG
00892P 00D4 BD   0000    A        JSR    CRDO     START A NEW LINE
00893P 00D7 20   C3   009C        BRA    EDTPLN   CONTINUE EDIT AT START OF LINE
00894
00895P 00D9 32   62      A CRINS  LEAS   &2,S     GET RID OF EDTSUB RETURN ADDRESS
00896P 00DB 81   0D      A EDITCR CMPA   #CR      CARRIAGE RETURN, LIST AND FINISH EDIT?
00897P 00DD 26   0D   00EC        BNE    EDITE    NO
00898P 00DF 8D   22   0103        BSR    EDTPRT   YES, PRINT REST OF LINE
00899P 00E1 BD   0000    A EDTEND JSR    CRDO     START A NEW LINE
00900P 00E4 8E   0000    A AUTENT LDX    #BUF     SET TXTPTR FOR CRUNCH CODE
00901P 00E7 9F   A6      A        STX    TXTPTR
0090P  00E9 7E   0000    A        JMP    EDTENT   JUMP INTO "MAIN" CODE
00903
00904P 00EC 81   45      A EDITE  CMPA   #'E      END EDIT?
00905P 00EE 27   F1   00E1        BEQ    EDTEND   YES
00906P 00F0 81   51      A        CMPA   #'Q      ABORT EDIT?
00907P 00F2 26   06   00FA        BNE    NOTQ     NO
00908P 00F4 BD   0000    A        JSR    CRDO     YES, START NEW LINE
00909P 00F7 7E   0000    A        JMP    READY    AND ABORT EDIT
00910P 00FA 8D   02   00FE NOTQ   BSR    DOSUBC   ALL OTHER SUBCOMMANDS RETURN TO EDTSUB
00911P 00FC 20   AD   00AB        BRA    EDTSUB   TO GET NEXT SUBCOMMAND
00912
00913P 00FE 81   20      A DOSUBC CMPA   #'       MOVE CURSOR RIGHT?
00914P 0100 26   10   0112        BNE    EDITD    NO
00915P 0102                       SKIP2  JUST     PRINT [B] CHARS
00916                             XDEF   EDTPRT
00917P 0103 C6   F9      A EDTPRT LDB    #MAXLEN  PRINT REST OF CHARS ON LINE
00918P 0105 A6   84      A EPLOOP LDA    ,X       GET CURRENT CHAR
00919P 0107 27   08   0111        BEQ    EPRTFN   IF END OF LINE THEN RETURN
00920P 0109 BD   0000    A        JSR    CHROUT   PRINT THE CHAR
00921P 010C 30   01               INX             BUMP EDIT POSITION
00922P 010E 5A                    DECB            DECREMENT REP COUNT
00923P 010F 26   F4   0105        BNE    EPLOOP   REPEAT AS NECESSARY
00924P 0111 39             EPRTFN RTS
00925
00926P 0112 81   44      A EDITD  CMPA   #'D      DELETE CHARS?
00927P 0114 26   48   015E        BNE    EDITC    NO
00928P 0116 6D   84      A DELLP  TST    ,X       AT END OF LINE?
00929P 0118 27   F7   0111        BEQ    EPRTFN   YES, NOTHING MORE TO DELETE
00930P 011A 8D   04   0120        BSR    DELCHR   NO, DELETE CURRENT CHAR
00931P 011C 5A                    DECB            REPEAT AS INDICATED

PAGE  005  ECBEXT  .SA:1  EXTEND The EDIT Command

00932P 011D 26   F7   0116        BNE    DELLP
00933P 011F 39                    RTS
00934
00935P 0120 0A   D7      A DELCHR DEC    EDTLEN   DECREMENT LINE LENGTH
00936P 0122 31   1F      A        LEAY   -&1,Y    ADJUST POINTER FOR preincrement.
00937P 0124 31   21      A CMPRSS LEAY   &1,Y     POINT TO NEXT CHAR
00938P 0126 A6   21      A        LDA    &1,Y     MOVE CHARS DOWN A BYTE
00939P 0128 A7   A4      A        STA    ,Y
00940P 012A 26   F8   0124        BNE    CMPRSS   UNTIL END OF LINE IS REACHED
00941P 012C 39                    RTS
00942
00943P 012D 81   49      A CHKI   CMPA   #'I      INSERT CHARS?
00944P 012F 27   13   0144        BEQ    EDITI    YES, GO DO IT
00945P 0131 81   58      A        CMPA   #'X      ADD CHARS TO END OF LINE?
00946P 0133 27   0D   0142        BEQ    EDITX    YES
00947P 0135 81   48      A        CMPA   #'H      HACK OFF REST OF LINE AND ADD CHARS?
00948P 0137 26   5C   0195        BNE    EDITCD   NO
00949P 0139 6F   84      A        CLR    ,X       YES, LINE ENDS HERE
00950P 013B 1F   10      A        TFR    X,D      Calculate and store the new line
00951P 013D 83   0001    A        SUBD   #BUF+&1  length.
00952P 0140 D7   D7      A        STB    EDTLEN
00953
00954P 0142 8D   BF   0103 EDITX  BSR    EDTPRT   PRINT REST OF LINE
00955P 0144 BD   01D6    P EDITI  JSR    EDITIN   GET CHAR TO INSERT
00956P 0147 81   0D      A        CMPA   #CR      CARRIAGE RETURN?
00957P 0149 27   8E   00D9        BEQ    CRINS    YES, END INSERTION AND EDIT
00958P 014B 81   1B      A        CMPA   #ESCAPE  ESCAPE?
00959P 014D 27   25   0174        BEQ    CHGRTS   YES, ALL DONE INSERTING
00960P 014F 81   08      A        CMPA   #CHRDEL  CHARACTER DELETE?
00961P 0151 26   22   0175        BNE    EDTINS   NO, GO INSERT THE CHAR
00962P 0153 8C   0000    A        CMPX   #BUF     IF AT START OF LINE IGNORE DELETE
00963P 0156 27   EC   0144        BEQ    EDITI    AND GET NEXT CHAR TO INSERT
00964P 0158 8D   45   019F        BSR    GOBACK   BACK UP THE CURSOR
00965P 015A 8D   C4   0120        BSR    DELCHR   DELETE THE CHAR AND COMPRESS THE LINE
00566P 015C 20   E6   0144        BRA    EDITI    GO GET NEXT CHAR TO INSERT
00967
00968P 015E 81   43      A EDITC  CMPA   #'C      CHANGE CHARACTERS?
00969P 0160 26   CB   012D        BNE    CHKI     NO
00970P 0162 6D   84      A EDTCHG TST    ,X       AT END OF LINE?
00971P 0164 27   0E   0174        BEQ    CHGRTS   YES, NOTHING LEFT TO CHANGE
00972P 0166 BD   01D6    P        JSR    EDITIN   GET CHAR TO REPLACE CURRENT CHAR
00973P 0169 25   02   016D        BCS    OKCCHR   IF IT'S A CR, ESCAPE, OR CHRDEL
00974P 016B 20   F5   0162        BRA    EDTCHG   ignore  it.
00975P 016D A7   80      A OKCCHR STA    ,X+      OVERWRITE THE OLD CHAR
00976P 016F 8D   37   01A8        BSR    GCHROT   ECHO THE NEW CHAR
00977P 0171 5A                    DECB            REPEAT
00976P 0172 26   EE   0162        BNE    EDTCHG
00979P 0174 39             CHGRTS RTS
00960
00981
00982P 0175 D6   D7      A EDTINS LDB    EDTLEN   WILL LINE BE TOO LONG?
00983P 0177 C1   F9      A        CMPB   #MAXLEN
00984P 0179 26   02   017D        BNE    OKINS    NO
00985P 017B 20   C7   0144        BRA    EDITI    Yes, wait for escape or CR.
00566
00987P 017D 34   10      A OKINS  PSHS   X        SAVE EDIT POINTER
00988P 017F 6D   80      A FNDEND TST    ,X+      FIND THE END OF THE LINE
00989P 0181 26   FC   017F        BNE    FNDEND

PAGE  006  ECBEXT  .SA:1  EXTEND The EDIT Command

00990P 0183 E6   82      A INSMOV LDB    ,-X      MAKE ROOM FOR THE NEW CHAR BY MOVING
00991P 0185 E7   01      A        STB    &1,X     THE REST OF THE CHARS UP A BYTE
00992P 0187 AC   E4      A        CMPX   ,S       MOVE ALL INCLUDING CURRENT CHAR
00993P 0189 26   F8   0183        BNE    INSMOV
00994P 018B 32   62      A        LEAS   &2,S     Clean up the stack.
00995P 018D A7   80      A        STA    ,X+      PUT THE NEW CHAR INTO THE LINE
00996P 018F 8D   17   01A8        BSR    GCHROT   ECHO THE NEW CHAR
00997P 0191 0C   D7      A        INC    EDTLEN   INCREMENT THE LENGTH
00998P 0193 20   AF   0144        BRA    EDITI    GET NEXT CHAR TO INSERT
00999
01000P 0195 81   08      A EDITCD CMPA   #CHRDEL  CHARACTER DELETE?
01001P 0197 26   12   01AB        BNE    CHKK     NO
01002P 0199 8D   04   019F BACKB  BSR    GOBACK   Yes, output B backspaces.
01003P 019B 5A                    DECB
01004P 019C 26   FB   0199        BNE    BACKB
01005P 019E 39                    RTS
01006
01007P 019F 8C   0000    A GOBACK CMPX   #BUF     IF AT START OF LINE DO NOTHING
01008P 01A2 27   D0   0174        BEQ    CHGRTS
01009P 01A4 30   1F               DEX             OTHERWISE BACK UP THE EDIT POINTER
01010                      *    AND BACK UP THE CURSOR
01011            0001    A        IFEQ   REALIO
01014                       ENDC  IFN    REALIO
01015P 01A6 86   08      A BCKSPC LDA    #CHRDEL  Back up the cursor.
01016P 01A8 7E   0000    A GCHROT JMP    CHROUT
01017
01018P 01AB 81   4B      A CHKK   CMPA   #'K      KILL UNTIL MATCH FOUND?
01019P 01AD 27   05   01B4        BEQ    EDITK    YES
01020P 01AF 80   53      A        SUBA   #'S      SEARCH FOR CHAR?
01021P 01B1 27   01   01B4        BEQ    EDITK    YES, USE SAME CODE AS K EXCEPT
01022                      *    ACCA IS CLEAR AS A FLAG NOT TO KILL
01023P 01B3 39                    RTS             Unrecognizable command, ignore it and
01024                      *    go get another one.
01026P 01B4 34   02      A EDITK  PSHS   A        SAVE KILL FLAG
01027P 01B6 8D   1E   01D6        BSR    EDITIN   GET SEARCH CHAR
01028P 01B8 34   02      A        PSHS   A        PUT IT AWAY
01029P 01BA A6   84      A EDTSRC LDA    ,X       END OF LINE?
01030P 01BC 27   16   01D4        BEQ    SRCFIN   YES, GIVE UP SEARCH
010312 01BE 6D   61      A        TST    &1,S     IF NOT KILLING THEN PRINT CHARS
01032P 01C0 26   06   01C8        BNE    ISKILL   INSTEAD OF DELETING THEM
01033P 01C2 8D   E4   01A8        BSR    GCHROT
01034P 01C4 30   01               INX             POINT TO NEXT CHAR
01035P 01C6 20   03   01CB        BRA    NOKILL
01036P 01C8 BD   0120    P ISKILL JSR    DELCHR   DELETE THE CHAR
01037P 01CB A6   84      A NOKILL LDA    ,X       DO THE CHARS MATCH?
01038P 01CD A1   E4      A        CMPA   ,S
01039P 01CF 26   E9   01BA        BNE    EDTSRC   NO, CONTINUE SEARCH
01040P 01D1 5A                    DECB            YES, BUT MUST SEARCH REP COUNT TIMES
01041P 01D2 26   E6   01BA        BNE    EDTSRC
01042P 01D4 35   A0      A SRCFIN PULS   Y,PC     Clean up the stack and return.
01043
01044P 01D6 BD   0000    A EDITIN JSR    INCHR    GET A CHAR
01045P 01D9 81   7F      A        CMPA   #&127    THROW AWAY ALL BIGGER THAN TILDA.
01046P 01DB 24   F9   01D6        BCC    EDITIN
01047P 01DD 81   5F      A        CMPA   #@137    Translate shift uparrow key which
01048P 01DF 26   02   01E3        BNE    NOTESC   generates a backarrow to an escape
01049P 01E1 86   1B      A        LDA    #ESCAPE  for compatibility with the TRS-80.

PAGE  007  ECBEXT  .SA:1  EXTEND The EDIT Command

01050P 01E3 81   0D      A NOTESC CMPA   #CR      ADMIT LOW EXCEPTIONS
01051P 01E5 27   0E   01F5        BEQ    EDTINR
01052P 01E7 81   1B      A        CMPA   #ESCAPE
01053P 01E9 27   0A   01F5        BEQ    EDTINR
01054P 01EB 81   08      A        CMPA   #CHRDEL
01055P 01ED 27   06   01F5        BEQ    EDTINR
01056P 01EF 81   20      A        CMPA   #'       ALL OTHERS BELOW SPACE ARE BAD
01057P 01F1 25   E3   01D6        BCS    EDITIN
01058P 01F3 lA   01        EDTSEC SEC             SAY IT ISN'T A LOW EXCEPTION.
01059P 01F5 39             EDTINR RTS
010E0
01061                             TTL    TRON and TROFF
01062
01063                      *
01064                      * TRON turns on program tracing by setting TRCFLG to a nonzero
01065                      * value.  TRCFLG is checked at NEWSTT and if it is nonzero the
01066                      * line number of the line about to be executed is printed enclosed
01067                      * in square brackets.  TROFF turns off the program tracing by clearing
01068                      * TRCFLG.
01069
01070                             XDEF   TRON
01071P 01F6      86      A TRON   FCB    @206     LDAIM CLRA opcode to make A nonzero
01072                      *    skip over the CLRA.
01073                             XDEF   TROFF
01074P 01F7 4F             TROFF  CLRA            Prepare to clear TRCFLG.
01075P 01F8 97   AF      A        STA    TRCFLG   Set or clear the trace flag.
01076P 01FA 39             TRORTS RTS
01077
01078                             TTL    The POS function.
01079
01080                      *
01081                      * POS(<device number>) returns the print postion of the specified
01082                      * device.
01083                      *
01084                      * POS(0) returns the cursor column position.
01085                      * POS(-1), if the cassette is open for output, returns a meaningless
01086                      * result.  If the cassette is not  open a File Not Open error results.
01087                      * If the cassette is open for input, a Bad File Mode error results.
01088                      * POS(-2) returns the print position of the lineprinter.
01089                      *
01090
01091                             XDEF   POS
01092P 01FB 96   6F      A POS    LDA    DEVNUM   Preserve DEVNUM since this could be
01093P 01FD 34   02      A        PSHS   A        a case such as PRINT #-1,POS(0).
01094P 01FF BD   0000    A        JSR    SETDNM   Convert and check the argument.
01095P 0202 BD   0000    A        JSR    OPNOCK   Make sure the device is open for
01096                      *    output.
01097P 0205 BD   0000    A        JSR    DEVPRM   Get the device parameters.
01098P 0208 D6   6C      A        LDB    DEVPOS   Get the position into B.
01099P 020A 35   02      A        PULS   A        Restore DEVNUM.
01100P 020C 97   6F      A        STA    DEVNUM
01101P 020E 7E   0000    A        JMP    SNGFLT   Float the result and return.
01102
01103                             TTL    The VARPTR function.
01104
01105                      *
01106                      * VARPTR(<variable name>) returns the address of the specified
01107                      *

