PAGE  001  ECBCOM  .SA:0  TXRGRP Extension ROM Direct Page RAM

00700                             OPT    L,LLE=120
00701                             NAM    TXRGRP   - TANDY EXTENSION ROM GRAPHICS CODE
00702
00703                      **********************************************************************
00704                      *                                                                    *
00705                      *    Copyright 1982 by Microsoft Corporation, all rights reserved    *
00706                      *                                                                    *
00707                      **********************************************************************
00708
00709                             TTL    Equates
00710            0100    A CXMAX  EQU    &256
00711            00C0    A CYMAX  EQU    &192
00712
00713            FFC0    A SAM    EQU    @177700
00714
00715                             TTL    External Declarations
00716
00717                             XREF   ANDTK
00718                             XREF   CHEADA,CHROUT,CLEARC,CONINT,CRDO
00719                             XREF   EQULTK,EVLADR
00720                             XREF   FCERR,FRESTR,FRMEVL
00721                             XREF   GETADR,GETSTK
00722                             XREF   HEXCNX,HKPTGT
00723                             XREF   ILINE,INLIN,ISDIGC,ISLETC,ISVAR
00724                             XREF   NEWSTT,NOTTK
00725                             XREF   ORTK,OUTSPC
00726                             XREF   PIA1AD,PIA1BD,PTRGET
00727                             XREF   READY
00728                             XREF   SCRTCH,SETSEL,SNDCLK,SNDOFF,SNDON,SNERR,SNGFLT
00729                             XREF   STKINI,SYNCHR
00730                             XREF   TOTK
00731
00732            00D7    A GTMPB1 EQU    PDIRCT
00733
00734                             TTL    GRAPHICS CODE PSET,PRESET,LINE,PUT,GET,PPOINT
00735                             XREF   MINUTK,FRMNUM,INPUTK,CHKCOM
00736                             XREF   PSETTK,PRESTK,CHKOPN,CHKCLS,COMBYT
00737            00BE    A XLOW   EQU    XSTORE+&1
00738            00C0    A YLOW   EQU    YSTORE+&1
00739
00740                             XREF   GETBYT,GETNUM
00741                      *
00742                      * THE KEY SYSTEM DEPENDENT ROUTINES ARE THE FOLLOWING:
00743                      *  GTADRS - FETCH THE MEMORY ADDRESS OF THE POINT SPECIFIED IN
00744                      *  XSTORE AND YSTORE INTO [X] WITH A BIT MASK IN [A]
00745                      *  GINCY,GINCX -- INCREMENT X OR Y IN CHAR OR GRAPHIC MODE
00746                      *
00747                      *
00748                      * MEMORY HAS THE FOLLOWING KEY LOCATIONS:
00749                      * SCBASE LOW ADDRESS OF SCREEN
00750                      * SCTOP HIGH ADDRESS OF SCREEN
00751                      * SCMODE VALUE SHOWING CURRENT MODE
00752                      * RADIO SHACK HAS 5 GRAPHICS MODES
00753                      *  0 128X 96  BW  SCWID=16 ASPECT=1 MEM=1.5K
00754                      *  1 128X 96  C   SCWID=32 ASPECT=1 MEM=3K
00755                      *  2 128X192  BW  SCWID=16 ASPECT=2 MEM=3K
00756                      *  3 128X192  C   SCWID=32 ASPECT=2 MEM=6K
00757                      *  4 256X192  BW  SCWID=32 ASPECT=1 MEM=6K

PAGE  002  ECBGRP  .SA:1  TXRGRP GRAPHICS CODE PSET,PRESET,LINE,PUT,GET,PPOINT

00758                      * SCWID GIVING SCREEN WIDTH (16 OR 32)
00759                      * XSTORE IS THE 2 BYTE X VALUE
00760                      * YSTORE IS THE 2 BYTE Y VALUE
00761                      *
00762P 0000 CE   000D    P PTADRS LDU    #PTADRG  POINT AT ADDRESS TABLE
00763P 0003 96   B6      A        LDA    SCMODE   GET THE SCREEN MODE
00764P 0005 48                    ASLA            CONSTRUCT A TABLE INDEX
00765P 0006 EE   C6      A        LDU    A,U
00766P 0008 39             FTRTS  RTS
00767P 0009 8D   F5   0000 GENADR BSR    PTADRS   GET ADDRESS IN [U]
00768P 000B 6E   C4      A        JMP    ,U
00769
00770P 000D      0017    P PTADRG FDB    GPUTMB
00771P 000F      0033    P        FDB    GPUTMC
00772P 0011      0017    P        FDB    GPUTMB
00773P 0013      0033    P        FDB    GPUTMC
00774P 0015      0017    P        FDB    GPUTMB
00775
00776                      *
00777                      * IN BLACK AND WHITE MODE WE SELECT THE ADDRESS AS FOLLOWS:
00778                      *  [X] = SCBASE + Y*SCWID + INT (X/8)
00779                      *  [A] = 2 ^ ( 7 - ( X MOD 8 ) )
00780                      *
00781P 0017 34   44      A GPUTMB PSHS   B,U
00782P 0019 D6   B9      A        LDB    SCWID    GET BYTE SIZE OF EACH ROW
00783P 001B 96   C0      A        LDA    YLOW     GET ROW COUNTER
00784P 001D 3D                    MUL             MULTIPLY
00785P 001E D3   BA      A        ADDD   SCBASE   TURN INTO MEMORY SCREEN POINTER
00786P 0020 1F   01      A        TFR    D,X      SAVE CURRENT SUM IN [X]
00787P 0022 D6   BE      A        LDB    XLOW     LOOK AT X
00788P 0024 54                    LSRB            DIVIDED BY 8
00789P 0025 54                    LSRB
00790P 0026 54                    LSRB
00791P 0027 3A                    ABX             ADD ONTO SUM
00792P 0028 96   BE      A        LDA    XLOW     LOOK AT X AGAIN TO GET BIT MASK
00793P 002A 84   07      A        ANDA   #&7      LOW THREE BITS ARE AN INDEX
00794P 002C CE   004E    P        LDU    #BITTB1  INTO A POWER OF 2 TABLE
00795P 002F A6   C6      A        LDA    A,U      FETCH BIT MASK FROM TABLE
00796P 0031 35   C4      A        PULS   U,B,PC
00797                      *
00798                      * GRAPHICS ADDRESS SELECT IN COLOR MODE WORKS AS FOLLOWS:
00799                      *  [X] = SCBASE + Y*SCWID + INT (X/4)
00800                      *  [A] = 3 * ( 4 ^ ( 3 - ( X MOD 4 ) ) )
00801                      * SO BIT MASK HAS 2 BITS IN [A] AND ADDRESS IS IN [X]
00802                      *
00803P 0033 34   44      A GPUTMC PSHS   B,U
00804P 0035 D6   B9      A        LDB    SCWID    GET BYTE SIZE OF EACH ROW
00805P 0037 96   C0      A        LDA    YLOW     GET ROW COUNTER
00806P 0039 3D                    MUL             MULTIPLY
00807P 003A D3   BA      A        ADDD   SCBASE   TURN INTO MEMORY SCREEN POINTER
00808P 003C 1F   01      A        TFR    D,X      SAVE CURRENT SUM IN [X]
00809P 003E D6   BE      A        LDB    XLOW     LOOK AT X
00810P 0040 54                    LSRB            DIVIDED BY 4
00811P 0041 54                    LSRB
00812P 0042 3A                    ABX             ADD ON BYTE OFFSET FROM ROW
00813P 0043 96   BE      A        LDA    XLOW     GET BACK X COUNT TO CONSTRUCT
00814P 0045 84   03      A        ANDA   #&3      BIT MASK
00815P 0047 CE   0056    A        LDU    #BITTB2  USE AS INDEX INTO BIT TABLE

PAGE  003  ECBGRP  .SA:1  TXRGRP GRAPHICS CODE PSET,PRESET,LINE,PUT,GET,PPOINT

00816P 004A A6   C6      A        LDA    A,U      GET BIT MASK WITH 2 BITS FROM TABLE
00817P 004C 35   C4      A        PULS   U,B,PC
00818
00819
00820P 004E      80      A BITTB1 FCB    &128     BACKWARDS BECAUSE OF THE WAY
00821P 004F      40      A        FCB    &64      GRAPHICS BITS ARE HANDLED
00822P 0050      20      A        FCB    &32
00823P 0051      10      A        FCB    &16
00824P 0052      08      A        FCB    &8
00875P 0053      04      A        FCB    &4
00826P 0054      02      A        FCB    &2
00827P 0055      01      A        FCB    &1
00828
00829P 0056      C0      A BITTB2 FCB    &192     MASK FOR COLOR GRAPHICS CASE
00830P 0057      30      A        FCB    &48      TWO  BITS PER PIXEL
00831P 0058      0C      A        FCB    &12
00832P 0059      03      A        FCB    &3
00833
00834                      *
00835                      * THESE ARE THE RELATIVE POSITION ROUTINES THAT MOVE
00836                      * UP ONE IN X OR Y
00837                      *
00838P 005A D6   B9      A GINCY  LDB    SCWID
00839P 005C 3A                    ABX
00840P 005D 39                    RTS
00841P 005E 44             GINXB  LSRA            SHIFT BIT MASK TO THE RIGHT
00842P 005F 24   03   0064        BCC    GIXRTS   IF NO CARRY THATS ALL
00843P 0061 46                    RORA            SET HIGH BIT IN [A]
00844P 0062 30   01      A        LEAX   &1,X     UPDATE DISPLAY ADDRESS
00845P 0064 39             GIXRTS RTS
00846P 0065 44             GINXC  LSRA            MOVE OVER 1 BIT
00847P 0066 24   F6   005E        BCC    GINXB    JUST SHIFT ONE MORE IF NO CARRY
00848P 0068 86   C0      A        LDA    #&192    SET UP FOR 2 LEFTMOST BITS
00849P 006A 30   01      A        LEAX   &1,X     UPDATE DISPLAY ADDRESS
00850P 006C 39                    RTS
00851
00852
00853                      *
00854                      * THIS ROUTINE SCANS A POINT AT THE CURRENT TEXT POSITION INTO
00855                      * XSTORE AND YSTORE. THE RANGE IS COMPRESSED TO Y=0 TO CYMAX-1
00856                      * AND X=0 TO CXMAX-1
00857                      *
00858                             XDEF   SCNPNT
00859P 006D BD   0000    A SCNPNT JSR    GETNUM   SET X INTO POKER AND Y INTO [B]
00860P 0070 108E 00BD    A        LDY    #XSTORE
00861P 0074 C1   C0      A SCNPN2 CMPB   #CYMAX   IS IT TOO BIG?
00862P 0076 25   02   007A        BCS    SCNYNT
00863P 0078 C6   BF      A        LDB    #CYMAX—&1 SET MAXIMUM VALUE
00864P 007A 4F             SCNYNT CLRA            MAKE DOUBLE BYTE
00865P 007B ED   22      A        STD    &2,Y
00866P 007D DC   2B      A        LDD    POKER    GET X VALUE
00867P 007F 1083 0100    A        CMPD   #CXMAX   SEE IF TOO BIG
00868P 0083 25   03   0088        BCS    SVXRTS
00869P 0085 CC   00FF    A        LDD    #CXMAX—&1
00870P 0088 ED   A4      A SVXRTS STD    ,Y
00871P 008A 39                    RTS
00872
00873                      *

PAGE  004  ECBGRP  .SA:1  TXRGRP GRAPHICS CODE PSET,PRESET,LINE,PUT,GET,PPOINT

00874                      * THIS SUBROUTINE TAKES THE VALUES IN XSTORE AND YSTORE AND
00875                      * ASSUMING THEY ARE GRAPHICS COORDINATES SCALES THEM BASED ON THE
00876                      * CURRENT GRAPHICS MODE.
00877                      * THIS ALLOWS ALL GRAPHICS COORDINATES TO BE DECLARED IN THE SPACE
00878                      * Y=0 TO CYMAX-1 AND X=0 TO CXMAX-1 SO MODE CHANGES DON'T REQUIRE PROGRAM
00879                      * CHANGES
00880                      * IN MODE0+1 X=X/2 Y=Y/2
00881                      * IN MODE2+3 X=X/2
00882                      * IN MODE4 NO CHANGE
00883                      *
00884P 0088 BD   006D    P GSCALR JSR    SCNPNT   SCAN VALUES OUT OF TEXT
00885P 008E CE   00BD    A GSCALE LDU    #XSTORE  POINT AT ARGUMENTS
00886P 0091 96   B6      A GSCALC LDA    SCMODE   GET THE SCREEN MODE
00887P 0093 81   02      A        CMPA   #&2      SEE IF Y NEEDS TO BE ADJUSTED
00888P 0095 24   06   009D        BCC    GSCNTY   NO GO HANDLE X
00889P 0097 EC   42      A        LDD    &2,U     DIVIDE Y BY 2
00890P 0099 44                    LSRA
00891P 009A 56                    RORB
00892P 009B ED   42      A        STD    &2,U
00893P 009D 96   B6      A GSCNTY LDA    SCMODE   NOW SEE IF X HAS TO BE SHIFTED
00894
00895P 009F 81   04      A        CMPA   #&4      SEE IF ITS MODE 4
00896P 00A1 24   06   00A9        BCC    SVURTS   ONLY MODE4 HAS X NON—SCALED
00897P 00A3 EC   C4      A        LDD    ,U
00898P 00A5 44                    LSRA
00899P 00A6 56                    RORB            DO THE DIVIDE
00900P 00A7 ED   C4      A        STD    ,U
00901P 00A9 39             SVURTS RTS
00902
00903
00904                      *
00905                      * PPOINT IS A FUNCTION TAKING (X,Y) AND RETURNING THE COLOR OF THE GRAPHICS
00906                      * BIT SET AT THAT LOCATION
00907                      *
00908                             XDEF   PPOINT
00909P 00AA BD   0123    P PPOINT JSR    ONECRD   SCAN COORDINATE
00910P 00AD BD   008E    P        JSR    GSCALE   SCALE TO GRAPHICS RANGE
00911P 00B0 BD   0009    P        JSR    GENADR   GET THE ADDRESS IN [X] AND BITS IN [A]
00912P 00B3 A4   84      A        ANDA   ,X       GET BIT RESULT INTO [A]
00913P 00B5 D6   B6      A        LDB    SCMODE   SEE IF COLOR OR BLACK AND WHITE
00914P 00B7 56                    RORB
00915P 00B8 24   12   00CC        BCC    PNTBW    POINT IN COLOR MODE IS SPECIAL
00916P 00BA 81   04      A PNTCLP CMPA   #&4      ARE BITS IN RANGE?
00917P 00BC 25   04   00C2        BCS    PNTCDN
00918P 00BE 46                    RORA
00919P 00BF 46                    RORA
00920P 00C0 20   F8   00BA        BRA    PNTCLP
00921P 00C2 4C             PNTCDN INCA            MAP NON BLACK COLORS TO 1 TO 8
00922P 00C3 48                    ASLA
00923P 00C4 9B   C1      A        ADDA   SCCSS    ADD IN COLOR SELECT TO GIVE ACTUAL COLOR
00924P 00C6 44                    LSRA
00925P 00C7 1F   89      A PNTRT1 TFR    A,B      RETURN RESULT IN [B]
00926P 00C9 7E   0000    A PNTRT0 JMP    SNGFLT
00927P 00CC 4D             PNTBW  TSTA            SEE IF POINT IS SET OR NOT
00928P 00CD 27   F8   00C7        BEQ    PNTRT1   RETURN ZERO FOR BLACK
00929P 00CF 4F                    CLRA            OTHERWISE ITS GREEN OR CYAN
00930P 00D0 20   F0               BRA    PNTCDN
00931

PAGE  005  ECBGRP  .SA:1  TXRGRP GRAPHICS CODE PSET,PRESET,LINE,PUT,GET,PPOINT

00932                      *
00933                      * PSET AND PRESET ARE STATEMENTS WHICH TAKE (X,Y,[,Z])
00934                      * AND AFFECT THE SELECTED POINT. Z IS THE ATTRIBUTE TO SET
00935                      * IF IT IS PRESENT.
00936                      *
00937                             XDEF   PSET
00938P 00D2 86   01      A PSET   LDA    #&1      INDICATE THIS IS A SET
00939P 00D4 20   01   00D7        BRA    PSETCN
00940                             XDEF   PRESET
00941P 00D6 4F             PRESET CLRA
00942P 00D7 97   C2      A PSETCN STA    SETFLG   SET UP A FLAG FOR LATER USE
00943P 00D9 BD   0000    A        JSR    CHKOPN
00944P 00DC BD   008B    P        JSR    GSCALR   GET THE ARGUMENT IN GRAPHICS MODE
00945P 00DF BD   02F2    P        JSR    CMCOLR
00946P 00E2 BD   0000    A        JSR    CHKCLS   MAKE SURE STATEMENT ENDED
00947P 00E5 BD   0009    P        JSR    GENADR   GET [X] POINTING AT VALUE AND [A] AS MASK
00948P 00E8 E6   84      A GRPACT LDB    ,X       Remember the current contents of
00949P 00EA 34   04      A        PSHS   B        the video memory.
00950P 00EC 1F   89      A        TFR    A,B      DUPLICATE BIT MASK
00951P 00EE 43                    COMA            FORM COMPLEMENT
00952P 00EF A4   84      A        ANDA   ,X       AND BRING IN CURRENT DATA BITS
00953P 00F1 D4   B5      A        ANDB   ACTCLE   AND BITS WITH CURRENT COLOR BITS
00954P 00F3 34   04      A        PSHS   B        PUT [B] ON STACK TO OR TOGETHER
00955P 00F5 AA   E0      A        ORA    ,S+      NEW COLOR BITS AND OLD DATA
00956P 00F7 A7   84      A        STA    ,X
00957P 00F9 A0   E0      A        SUBA   ,S+      Set the change flag for PAINT if
00958P 00FB 9A   DB      A        ORA    PNTCHF   the video memory was changed.
00959P 00FD 97   DB      A        STA    PNTCHF
00960P 00FF 39                    RTS
00961
00962                      *
00963                      * SCAN A PAIR OF POINTS INTO XSTORE,YSTORE AND X2STOR,Y2STOR
00964                      *
00965                             XDEF   CRDGET
00966P 0100 9E   C7      A CRDGET LDX    LSAVEX
00967P 0102 9F   BD      A        STX    XSTORE
00968P 0104 9E   C9      A        LDX    LSAVEY
00969P 0106 9F   BF      A        STX    YSTORE
00970P 0108 81   00      A        CMPA   #MINUTK  SEE IF DEFAULTING
00971P 010A 27   03   010F        BEQ    CRDGT2
00972P 010C BD   0123    P        JSR    ONECRD   READ ONE PAIR INTO XSTORE AND YSTORE
00973P 010F                CRDGT2 SYNCHK MINUTK   SEPERATED BY A MINUS SIGN
00974P 0114 BD   0000    A        JSR    CHKOPN
00975P 0117 BD   0000    A        JSR    GETNUM   EVALUATE NUMBER
00976P 011A 108E 00C3    A        LDY    #X2STOR  STORE VALUE INTO SECOND SET OF POINTS
00977P 011E BD   0074    P        JSR    SCNPN2
00976P 0121 20   06   0129        BRA    CHKCGO
00979                      *
00980                      * READ A COORDINATE SET WITH PARENS INTO XSTORE AND YSTORE
00981                      *
00982P 0123 BD   0000    A ONECRD JSR    CHKOPN
00983P 0126 BD   006D    P        JSR    SCNPNT
00984P 0129 7E   0000    A CHKCGO JMP    CHKCLS
00985
00986                      *
00987                      * THIS IS THE GENERAL PURPOSE LINE ROUTINE
00988                      * FORMAT IS LINE(X1,Y1)-(X2,Y2), (PSET OR PRESET)
00989                      * OPTIONAL ,B (FOR BOX) OR ,BF (BOX FILL)

