PAGE  001  ECBCOM  .SA:0  TXRGRP Extension ROM Direct Page RAM

00700                             OPT    L,LLE=120
00701                             NAM    TXRGRP   - TANDY EXTENSION ROM GRAPHICS CODE
00702
00703                      **********************************************************************
00704                      *                                                                    *
00705                      *    Copyright 1982 by Microsoft Corporation, all rights reserved    *
00706                      *                                                                    *
00707                      **********************************************************************
00708
00709                             TTL    Equates
00710            0100    A CXMAX  EQU    &256
00711            00C0    A CYMAX  EQU    &192
00712
00713            FFC0    A SAM    EQU    @177700
00714
00715                             TTL    External Declarations
00716
00717                             XREF   ANDTK
00718                             XREF   CHEADA,CHROUT,CLEARC,CONINT,CRDO
00719                             XREF   EQULTK,EVLADR
00720                             XREF   FCERR,FRESTR,FRMEVL
00721                             XREF   GETADR,GETSTK
00722                             XREF   HEXCNX,HKPTGT
00723                             XREF   ILINE,INLIN,ISDIGC,ISLETC,ISVAR
00724                             XREF   NEWSTT,NOTTK
00725                             XREF   ORTK,OUTSPC
00726                             XREF   PIA1AD,PIA1BD,PTRGET
00727                             XREF   READY
00728                             XREF   SCRTCH,SETSEL,SNDCLK,SNDOFF,SNDON,SNERR,SNGFLT
00729                             XREF   STKINI,SYNCHR
00730                             XREF   TOTK
00731
00732            00D7    A GTMPB1 EQU    PDIRCT
00733
00734                             TTL    GRAPHICS CODE PSET,PRESET,LINE,PUT,GET,PPOINT
00735                             XREF   MINUTK,FRMNUM,INPUTK,CHKCOM
00736                             XREF   PSETTK,PRESTK,CHKOPN,CHKCLS,COMBYT
00737            00BE    A XLOW   EQU    XSTORE+&1
00738            00C0    A YLOW   EQU    YSTORE+&1
00739
00740                             XREF   GETBYT,GETNUM
00741                      *
00742                      * THE KEY SYSTEM DEPENDENT ROUTINES ARE THE FOLLOWING:
00743                      *  GTADRS - FETCH THE MEMORY ADDRESS OF THE POINT SPECIFIED IN
00744                      *  XSTORE AND YSTORE INTO [X] WITH A BIT MASK IN [A]
00745                      *  GINCY,GINCX -- INCREMENT X OR Y IN CHAR OR GRAPHIC MODE
00746                      *
00747                      *
00748                      * MEMORY HAS THE FOLLOWING KEY LOCATIONS:
00749                      * SCBASE LOW ADDRESS OF SCREEN
00750                      * SCTOP HIGH ADDRESS OF SCREEN
00751                      * SCMODE VALUE SHOWING CURRENT MODE
00752                      * RADIO SHACK HAS 5 GRAPHICS MODES
00753                      *  0 128X 96  BW  SCWID=16 ASPECT=1 MEM=1.5K
00754                      *  1 128X 96  C   SCWID=32 ASPECT=1 MEM=3K
00755                      *  2 128X192  BW  SCWID=16 ASPECT=2 MEM=3K
00756                      *  3 128X192  C   SCWID=32 ASPECT=2 MEM=6K
00757                      *  4 256X192  BW  SCWID=32 ASPECT=1 MEM=6K

PAGE  002  ECBGRP  .SA:1  TXRGRP GRAPHICS CODE PSET,PRESET,LINE,PUT,GET,PPOINT

00758                      * SCWID GIVING SCREEN WIDTH (16 OR 32)
00759                      * XSTORE IS THE 2 BYTE X VALUE
00760                      * YSTORE IS THE 2 BYTE Y VALUE
00761                      *
00762P 0000 CE   000D    P PTADRS LDU    #PTADRG  POINT AT ADDRESS TABLE
00763P 0003 96   B6      A        LDA    SCMODE   GET THE SCREEN MODE
00764P 0005 48                    ASLA            CONSTRUCT A TABLE INDEX
00765P 0006 EE   C6      A        LDU    A,U
00766P 0008 39             FTRTS  RTS
00767P 0009 8D   F5   0000 GENADR BSR    PTADRS   GET ADDRESS IN [U]
00768P 000B 6E   C4      A        JMP    ,U
00769
00770P 000D      0017    P PTADRG FDB    GPUTMB
00771P 000F      0033    P        FDB    GPUTMC
00772P 0011      0017    P        FDB    GPUTMB
00773P 0013      0033    P        FDB    GPUTMC
00774P 0015      0017    P        FDB    GPUTMB
00775
00776                      *
00777                      * IN BLACK AND WHITE MODE WE SELECT THE ADDRESS AS FOLLOWS:
00778                      *  [X] = SCBASE + Y*SCWID + INT (X/8)
00779                      *  [A] = 2 ^ ( 7 - ( X MOD 8 ) )
00780                      *
00781P 0017 34   44      A GPUTMB PSHS   B,U
00782P 0019 D6   B9      A        LDB    SCWID    GET BYTE SIZE OF EACH ROW
00783P 001B 96   C0      A        LDA    YLOW     GET ROW COUNTER
00784P 001D 3D                    MUL             MULTIPLY
00785P 001E D3   BA      A        ADDD   SCBASE   TURN INTO MEMORY SCREEN POINTER
00786P 0020 1F   01      A        TFR    D,X      SAVE CURRENT SUM IN [X]
00787P 0022 D6   BE      A        LDB    XLOW     LOOK AT X
00788P 0024 54                    LSRB            DIVIDED BY 8
00789P 0025 54                    LSRB
00790P 0026 54                    LSRB
00791P 0027 3A                    ABX             ADD ONTO SUM
00792P 0028 96   BE      A        LDA    XLOW     LOOK AT X AGAIN TO GET BIT MASK
00793P 002A 84   07      A        ANDA   #&7      LOW THREE BITS ARE AN INDEX
00794P 002C CE   004E    P        LDU    #BITTB1  INTO A POWER OF 2 TABLE
00795P 002F A6   C6      A        LDA    A,U      FETCH BIT MASK FROM TABLE
00796P 0031 35   C4      A        PULS   U,B,PC
00797                      *
00798                      * GRAPHICS ADDRESS SELECT IN COLOR MODE WORKS AS FOLLOWS:
00799                      *  [X] = SCBASE + Y*SCWID + INT (X/4)
00800                      *  [A] = 3 * ( 4 ^ ( 3 - ( X MOD 4 ) ) )
00801                      * SO BIT MASK HAS 2 BITS IN [A] AND ADDRESS IS IN [X]
00802                      *
00803P 0033 34   44      A GPUTMC PSHS   B,U
00804P 0035 D6   B9      A        LDB    SCWID    GET BYTE SIZE OF EACH ROW
00805P 0037 96   C0      A        LDA    YLOW     GET ROW COUNTER
00806P 0039 3D                    MUL             MULTIPLY
00807P 003A D3   BA      A        ADDD   SCBASE   TURN INTO MEMORY SCREEN POINTER
00808P 003C 1F   01      A        TFR    D,X      SAVE CURRENT SUM IN [X]
00809P 003E D6   BE      A        LDB    XLOW     LOOK AT X
00810P 0040 54                    LSRB            DIVIDED BY 4
00811P 0041 54                    LSRB
00812P 0042 3A                    ABX             ADD ON BYTE OFFSET FROM ROW
00813P 0043 96   BE      A        LDA    XLOW     GET BACK X COUNT TO CONSTRUCT
00814P 0045 84   03      A        ANDA   #&3      BIT MASK
00815P 0047 CE   0056    A        LDU    #BITTB2  USE AS INDEX INTO BIT TABLE

PAGE  003  ECBGRP  .SA:1  TXRGRP GRAPHICS CODE PSET,PRESET,LINE,PUT,GET,PPOINT

00816P 004A A6   C6      A        LDA    A,U      GET BIT MASK WITH 2 BITS FROM TABLE
00817P 004C 35   C4      A        PULS   U,B,PC
00818
00819
00820P 004E      80      A BITTB1 FCB    &128     BACKWARDS BECAUSE OF THE WAY
00821P 004F      40      A        FCB    &64      GRAPHICS BITS ARE HANDLED
00822P 0050      20      A        FCB    &32
00823P 0051      10      A        FCB    &16
00824P 0052      08      A        FCB    &8
00875P 0053      04      A        FCB    &4
00826P 0054      02      A        FCB    &2
00827P 0055      01      A        FCB    &1
00828
00829P 0056      C0      A BITTB2 FCB    &192     MASK FOR COLOR GRAPHICS CASE
00830P 0057      30      A        FCB    &48      TWO  BITS PER PIXEL
00831P 0058      0C      A        FCB    &12
00832P 0059      03      A        FCB    &3
00833
00834                      *
00835                      * THESE ARE THE RELATIVE POSITION ROUTINES THAT MOVE
00836                      * UP ONE IN X OR Y
00837                      *
00838P 005A D6   B9      A GINCY  LDB    SCWID
00839P 005C 3A                    ABX
00840P 005D 39                    RTS
00841P 005E 44             GINXB  LSRA            SHIFT BIT MASK TO THE RIGHT
00842P 005F 24   03   0064        BCC    GIXRTS   IF NO CARRY THATS ALL
00843P 0061 46                    RORA            SET HIGH BIT IN [A]
00844P 0062 30   01      A        LEAX   &1,X     UPDATE DISPLAY ADDRESS
00845P 0064 39             GIXRTS RTS
00846P 0065 44             GINXC  LSRA            MOVE OVER 1 BIT
00847P 0066 24   F6   005E        BCC    GINXB    JUST SHIFT ONE MORE IF NO CARRY
00848P 0068 86   C0      A        LDA    #&192    SET UP FOR 2 LEFTMOST BITS
00849P 006A 30   01      A        LEAX   &1,X     UPDATE DISPLAY ADDRESS
00850P 006C 39                    RTS
00851
00852
00853                      *
00854                      * THIS ROUTINE SCANS A POINT AT THE CURRENT TEXT POSITION INTO
00855                      * XSTORE AND YSTORE. THE RANGE IS COMPRESSED TO Y=0 TO CYMAX-1
00856                      * AND X=0 TO CXMAX-1
00857                      *
00858                             XDEF   SCNPNT
00859P 006D BD   0000    A SCNPNT JSR    GETNUM   SET X INTO POKER AND Y INTO [B]
00860P 0070 108E 00BD    A        LDY    #XSTORE
00861P 0074 C1   C0      A SCNPN2 CMPB   #CYMAX   IS IT TOO BIG?
00862P 0076 25   02   007A        BCS    SCNYNT
00863P 0078 C6   BF      A        LDB    #CYMAX-&1 SET MAXIMUM VALUE
00864P 007A 4F             SCNYNT CLRA            MAKE DOUBLE BYTE
00865P 007B ED   22      A        STD    &2,Y
00866P 007D DC   2B      A        LDD    POKER    GET X VALUE
00867P 007F 1083 0100    A        CMPD   #CXMAX   SEE IF TOO BIG
00868P 0083 25   03   0088        BCS    SVXRTS
00869P 0085 CC   00FF    A        LDD    #CXMAX-&1
00870P 0088 ED   A4      A SVXRTS STD    ,Y
00871P 008A 39                    RTS
00872
00873                      *

PAGE  004  ECBGRP  .SA:1  TXRGRP GRAPHICS CODE PSET,PRESET,LINE,PUT,GET,PPOINT

00874                      * THIS SUBROUTINE TAKES THE VALUES IN XSTORE AND YSTORE AND
00875                      * ASSUMING THEY ARE GRAPHICS COORDINATES SCALES THEM BASED ON THE
00876                      * CURRENT GRAPHICS MODE.
00877                      * THIS ALLOWS ALL GRAPHICS COORDINATES TO BE DECLARED IN THE SPACE
00878                      * Y=0 TO CYMAX-1 AND X=0 TO CXMAX-1 SO MODE CHANGES DON'T REQUIRE PROGRAM
00879                      * CHANGES
00880                      * IN MODE0+1 X=X/2 Y=Y/2
00881                      * IN MODE2+3 X=X/2
00882                      * IN MODE4 NO CHANGE
00883                      *
00884P 0088 BD   006D    P GSCALR JSR    SCNPNT   SCAN VALUES OUT OF TEXT
00885P 008E CE   00BD    A GSCALE LDU    #XSTORE  POINT AT ARGUMENTS
00886P 0091 96   B6      A GSCALC LDA    SCMODE   GET THE SCREEN MODE
00887P 0093 81   02      A        CMPA   #&2      SEE IF Y NEEDS TO BE ADJUSTED
00888P 0095 24   06   009D        BCC    GSCNTY   NO GO HANDLE X
00889P 0097 EC   42      A        LDD    &2,U     DIVIDE Y BY 2
00890P 0099 44                    LSRA
00891P 009A 56                    RORB
00892P 009B ED   42      A        STD    &2,U
00893P 009D 96   B6      A GSCNTY LDA    SCMODE   NOW SEE IF X HAS TO BE SHIFTED
00894
00895P 009F 81   04      A        CMPA   #&4      SEE IF ITS MODE 4
00896P 00A1 24   06   00A9        BCC    SVURTS   ONLY MODE4 HAS X NON-SCALED
00897P 00A3 EC   C4      A        LDD    ,U
00898P 00A5 44                    LSRA
00899P 00A6 56                    RORB            DO THE DIVIDE
00900P 00A7 ED   C4      A        STD    ,U
00901P 00A9 39             SVURTS RTS
00902
00903
00904                      *
00905                      * PPOINT IS A FUNCTION TAKING (X,Y) AND RETURNING THE COLOR OF THE GRAPHICS
00906                      * BIT SET AT THAT LOCATION
00907                      *
00908                             XDEF   PPOINT
00909P 00AA BD   0123    P PPOINT JSR    ONECRD   SCAN COORDINATE
00910P 00AD BD   008E    P        JSR    GSCALE   SCALE TO GRAPHICS RANGE
00911P 00B0 BD   0009    P        JSR    GENADR   GET THE ADDRESS IN [X] AND BITS IN [A]
00912P 00B3 A4   84      A        ANDA   ,X       GET BIT RESULT INTO [A]
00913P 00B5 D6   B6      A        LDB    SCMODE   SEE IF COLOR OR BLACK AND WHITE
00914P 00B7 56                    RORB
00915P 00B8 24   12   00CC        BCC    PNTBW    POINT IN COLOR MODE IS SPECIAL
00916P 00BA 81   04      A PNTCLP CMPA   #&4      ARE BITS IN RANGE?
00917P 00BC 25   04   00C2        BCS    PNTCDN
00918P 00BE 46                    RORA
00919P 00BF 46                    RORA
00920P 00C0 20   F8   00BA        BRA    PNTCLP
00921P 00C2 4C             PNTCDN INCA            MAP NON BLACK COLORS TO 1 TO 8
00922P 00C3 48                    ASLA
00923P 00C4 9B   C1      A        ADDA   SCCSS    ADD IN COLOR SELECT TO GIVE ACTUAL COLOR
00924P 00C6 44                    LSRA
00925P 00C7 1F   89      A PNTRT1 TFR    A,B      RETURN RESULT IN [B]
00926P 00C9 7E   0000    A PNTRT0 JMP    SNGFLT
00927P 00CC 4D             PNTBW  TSTA            SEE IF POINT IS SET OR NOT
00928P 00CD 27   F8   00C7        BEQ    PNTRT1   RETURN ZERO FOR BLACK
00929P 00CF 4F                    CLRA            OTHERWISE ITS GREEN OR CYAN
00930P 00D0 20   F0               BRA    PNTCDN
00931

PAGE  005  ECBGRP  .SA:1  TXRGRP GRAPHICS CODE PSET,PRESET,LINE,PUT,GET,PPOINT

00932                      *
00933                      * PSET AND PRESET ARE STATEMENTS WHICH TAKE (X,Y,[,Z])
00934                      * AND AFFECT THE SELECTED POINT. Z IS THE ATTRIBUTE TO SET
00935                      * IF IT IS PRESENT.
00936                      *
00937                             XDEF   PSET
00938P 00D2 86   01      A PSET   LDA    #&1      INDICATE THIS IS A SET
00939P 00D4 20   01   00D7        BRA    PSETCN
00940                             XDEF   PRESET
00941P 00D6 4F             PRESET CLRA
00942P 00D7 97   C2      A PSETCN STA    SETFLG   SET UP A FLAG FOR LATER USE
00943P 00D9 BD   0000    A        JSR    CHKOPN
00944P 00DC BD   008B    P        JSR    GSCALR   GET THE ARGUMENT IN GRAPHICS MODE
00945P 00DF BD   02F2    P        JSR    CMCOLR
00946P 00E2 BD   0000    A        JSR    CHKCLS   MAKE SURE STATEMENT ENDED
00947P 00E5 BD   0009    P        JSR    GENADR   GET [X] POINTING AT VALUE AND [A] AS MASK
00948P 00E8 E6   84      A GRPACT LDB    ,X       Remember the current contents of
00949P 00EA 34   04      A        PSHS   B        the video memory.
00950P 00EC 1F   89      A        TFR    A,B      DUPLICATE BIT MASK
00951P 00EE 43                    COMA            FORM COMPLEMENT
00952P 00EF A4   84      A        ANDA   ,X       AND BRING IN CURRENT DATA BITS
00953P 00F1 D4   B5      A        ANDB   ACTCLE   AND BITS WITH CURRENT COLOR BITS
00954P 00F3 34   04      A        PSHS   B        PUT [B] ON STACK TO OR TOGETHER
00955P 00F5 AA   E0      A        ORA    ,S+      NEW COLOR BITS AND OLD DATA
00956P 00F7 A7   84      A        STA    ,X
00957P 00F9 A0   E0      A        SUBA   ,S+      Set the change flag for PAINT if
00958P 00FB 9A   DB      A        ORA    PNTCHF   the video memory was changed.
00959P 00FD 97   DB      A        STA    PNTCHF
00960P 00FF 39                    RTS
00961
00962                      *
00963                      * SCAN A PAIR OF POINTS INTO XSTORE,YSTORE AND X2STOR,Y2STOR
00964                      *
00965                             XDEF   CRDGET
00966P 0100 9E   C7      A CRDGET LDX    LSAVEX
00967P 0102 9F   BD      A        STX    XSTORE
00968P 0104 9E   C9      A        LDX    LSAVEY
00969P 0106 9F   BF      A        STX    YSTORE
00970P 0108 81   00      A        CMPA   #MINUTK  SEE IF DEFAULTING
00971P 010A 27   03   010F        BEQ    CRDGT2
00972P 010C BD   0123    P        JSR    ONECRD   READ ONE PAIR INTO XSTORE AND YSTORE
00973P 010F                CRDGT2 SYNCHK MINUTK   SEPERATED BY A MINUS SIGN
00974P 0114 BD   0000    A        JSR    CHKOPN
00975P 0117 BD   0000    A        JSR    GETNUM   EVALUATE NUMBER
00976P 011A 108E 00C3    A        LDY    #X2STOR  STORE VALUE INTO SECOND SET OF POINTS
00977P 011E BD   0074    P        JSR    SCNPN2
00976P 0121 20   06   0129        BRA    CHKCGO
00979                      *
00980                      * READ A COORDINATE SET WITH PARENS INTO XSTORE AND YSTORE
00981                      *
00982P 0123 BD   0000    A ONECRD JSR    CHKOPN
00983P 0126 BD   006D    P        JSR    SCNPNT
00984P 0129 7E   0000    A CHKCGO JMP    CHKCLS
00985
00986                      *
00987                      * THIS IS THE GENERAL PURPOSE LINE ROUTINE
00988                      * FORMAT IS LINE(X1,Y1)-(X2,Y2), (PSET OR PRESET)
00989                      * OPTIONAL ,B (FOR BOX) OR ,BF (BOX FILL)

PAGE  006  ECBGRP  .SA:1  TXRGRP GRAPHICS CODE PSET,PRESET,LINE,PUT,GET,PPOINT

00990                      *
00991                      * IDEA IS TO SCAN COORDINATES INTO (XSTORE,YSTORE) AND (X2STOR,Y2STOR)
00992                      * AND USE SETFLG TO DISTINGUISH THE GRAPHICS OR CHAR AND PSET OR PRESET
00993                      *
00994                             XDEF   LINE
00995P 012C 81   00      A LINE   CMPA   #INPUTK  FUNCTION NAME LIKE "INPUT"
00996P 012E 1027 FECE    A        LBEQ   ILINE
00997P 0132 81   28      A        CMPA   #OPNPAR
00998P 0134 27   09   013F        BEQ    GLINEC   DON'T REQUIRE @ LIKE NEC VERSION
00999P 0136 81   00      A        CMPA   #MINUTK
01000P 0138 27   05   013F        BEQ    GLINEC   ALLOW DEFAULT OF FIRST COORDINATE
01001P 013A                       SYNCHK '@       SKIP @ THAT MUST BE THERE
01002P 013F BD   0100    P GLINEC JSR    CRDGET   SCAN THE COORDINATES
01003P 0142 9E   C3      A        LDX    X2STOR   SAVE SECOND COORDINATE FOR REUSE WITH -
01004P 0144 9F   C7      A        STX    LSAVEX
01005P 0146 9E   C5      A        LDX    Y2STOR
01006P 0148 9F   C9      A        STX    LSAVEY
01007P 014A BD   0000    A        JSR    CHKCOM
01008P 014D 81   00      A        CMPA   #PRESTK  IS IT PRESET?
01009P 014F 27   09   015A        BEQ    GRLINR
01010P 0151 81   00      A        CMPA   #PSETTK
01011P 0153 1026 FEA9    A        LBNE   SNERR
01012P 0157 C6   01      A GRLINS LDB    #&1      FLAG FOR PSET
01013P 0159                       SKIP1
01014P 015A 5F             GRLINR CLRB            FLAG FOR PRESET
01015P 015B 34   04      A        PSHS   B        SAVE THE FLAG
01016P 015D 9D   9F      A        JSR    CHRGET   SKIP OVER PSET OR PRESET
01017P 015F BD   0191    P        JSR    GSCAL2   GRAPHICS SCALE BOTH POINTS
01018P 0162 35   04      A        PULS   B        GET BACK THE FLAG
01019P 0164 D7   C2      A LINCN2 STB    SETFLG   FLAG IS 1PSET,0PRESET
01020P 0166 BD   030B    P        JSR    DEFCOL   SET UP DEFAULT COLOR
01021P 0169 9D   A5      A        JSR    CHRGOT   REGET THE LAST CHAR
01022P 016B 1027 00A3 0212        LBEQ   LINGEN   JUST LINE
01023P 016F BD   0000    A        JSR    CHKCOM   MUST HAVE ATTRIBUTE
01024P 0172                       SYNCHK 'B       MUST HAVE B FOR BOX
01025P 0177 26   21   019A        BNE    LINBXF   IF CONTINUES MUST BE BOX FILL
01026P 0179 8D   3A   01B5        BSR    XLINE    DRAW THE BOX
01027P 017B 8D   62   01DF        BSR    YLINE
01028P 017D 9E   BD      A        LDX    XSTORE
01029P 017F 34   10      A        PSHS   X        SAVE XSTORE FOR LAST LINE
01030P 0181 9E   C3      A        LDX    X2STOR   OVERWRITE FOR BOTTOM LINE
01031P 0183 9F   BD      A        STX    XSTORE
01032P 0185 8D   58   01DF        BSR    YLINE
01033P 0187 35   10      A        PULS   X        GET BACK XSTORE
01034P 0189 9F   BD      A        STX    XSTORE
01035P 018B 9E   C5      A        LDX    Y2STOR   DRAW BOTTOM LINE
01036P 018D 9F   BF      A        STX    YSTORE
01037P 018F 20   24   01B5        BRA    XLINE
01038
01039                      *
01040                      * SET UP GRAPHICS LINE BY SCALING COORDINATES AND SETTING FLAG
01041                      *
01042P 0191 BD   008E    P GSCAL2 JSR    GSCALE   SCALE FIRST COORDINATE
01043P 0194 CE   00C3    A        LDU    #X2STOR  POINT AT SECOND COORDINATES
01044P 0197 7E   0091    P        JMP    GSCALC   AND SCALE THEM
01045
01046P 019A                LINBXF SYNCHK 'F       THIS IS LINE BOX FILL
01047P 019F 20   04   01A5        BRA    LINBXS   JUMP INTO THE LOOP

PAGE  007  ECBGRP  .SA:1  TXRGRP GRAPHICS CODE PSET,PRESET,LINE,PUT,GET,PPOINT

01048P 01A1 30   1F      A LINBXD LEAX   -&1,X    DECREMENT Y COORDINATE
01049P 01A3 9F   BF      A LINBXL STX    YSTORE   UPDATE Y COORDINATE
01050P 01A5 BD   01B5    P LINBXS JSR    XLINE    DRAW THE XLINE
01051P 01A8 9E   BF      A        LDX    YSTORE   SEE HOW WE COMPARE WITH Y2STOR
01022P 01AA 9C   C5      A        CMPX   Y2STOR
01053P 01AC 27   06   01B4        BEQ    LINRTS   ALL DONE WHEN MATCH
01054P 01AE 24   F1   01A1        BCC    LINBXD   YSTORE IS BIGGER SO DECREMENT IT
01055P 01B0 30   01      A        LEAX   &1,X     YSTORE IS SMALLER SO INCREMENT IT
01056P 01B2 20   EF   01A3        BRA    LINBXL
01057
01058P 01B4 39             LINRTS RTS
01059
01060
01061                      *
01062                      * DRAW A LINE FROM XSTORE,YSTORE TO X2STOR,YSTORE
01063                      *
01064P 01B5 9E   BD      A XLINE  LDX    XSTORE   GET X1 COORDINATE
01065P 01B7 34   10      A        PSHS   X        SAVE IT FOR CALLER
01066P 01B9 BD   049B    P        JSR    XDELTS
01067P 01BC 24   04   01C2        BCC    XLNXFR   [D] HAS COUNT IF NO CARRY SO GO
01068P 01BE 9E   C3      A        LDX    X2STOR   ALWAYS INCREMENT SO MAKE XSTORE SMALLER
01069P 01C0 9F   BD      A        STX    XSTORE
01070P 01C2 1F   02      A XLNXFR TFR    D,Y      PUT COUNT IN [Y]
01071P 01C4 31   21      A        LEAY   &1,Y     OFFSET BY ONE
01072P 01C6 BD   0009    P        JSR    GENADR   GET ADDRESS AND BIT MASK FOR START
01073P 01C9 35   40      A        PULS   U        GET BACK XSTORE
01074P 01CB DF   BD      A        STU    XSTORE
01075P 01CD 8D   36   0205        BSR    XADRI    MAKE U ADDRESS OF INCREMENT ROUTINE
01076P 01CF 97   D7      A XLNLOP STA    GTMPB1   SAVE THE BIT MASK
01077P 01D1 BD   00E8    P        JSR    GRPACT   ACTUALLY PERFORM ACTION (SET RESET OR PUT CHR)
01078P 01D4 96   D7      A        LDA    GTMPB1   GET BACK THE BIT MASK
01079P 01D6 AD   C4      A        JSR    ,U       GO OFF TO INCREMENT ROUTINE
01080P 01D8 31   3F      A        LEAY   -&1,Y    DECREMENT THE COUNT
01081P 01DA 26   F3   01CF        BNE    XLNLOP   ITERATE WITH ACTION
01082P 01DC 39                    RTS
01083
01084                      *
01085                      * YLINE DRAWS FROM XSTORE,YSTORE TO XSTORE,Y2STOR
01086                      *
01087P 01DD 35   06      A DYLINE PULS   D        ENTRY FROM GENERAL LINE DRAW ROUTINE
01086                      *    CLEAN OFF THE STACK
01089
01090                             XDEF   YLINE
01091P 01DF DC   BF      A YLINE  LDD    YSTORE   GET Y COORDINATE
01092P 01E1 34   06      A        PSHS   D        SAVE TO RESTORE
01093P 01E3 BD   048E    P        JSR    YDELTS
01094P 01E6 24   04   01EC        BCC    YLNXFR
01095P 01E8 9E   C5      A        LDX    Y2STOR
01096P 01EA 9F   BF      A        STX    YSTORE
01097P 01EC 1F   02      A YLNXFR TFR    D,Y
01098P 01EE 31   21      A        LEAY   &1,Y
01099P 01F0 BD   0009    P        JSR    GENADR
01100P 01F3 35   40      A        PULS   U
01101P 01F5 DF   BF      A        STU    YSTORE
01102P 01F7 8D   15   020E        BSR    YADRI    MAKE U A ROUTINE TO INCREMENT Y
01103P 01F9 20   D4   01CF        BRA    XLNLOP
01104
01105                      *

PAGE  008  ECBGRP  .SA:1  TXRGRP GRAPHICS CODE PSET,PRESET,LINE,PUT,GET,PPOINT

01106                      * TABLE OF ROUTINES TO INCREMENT X AND Y FOR EACH MODE
01107                      *
01108P 01FB      005E    P XINCS  FDB    GINXB
01109P 01FD      0065    P        FDB    GINXC
01110P 01FF      005E    P        FDB    GINXB
01111P 0201      0065    P        FDB    GINXC
01112P 0203      005E    P        FDB    GINXB
01113P 0205 CE   01FB    P XADRI  LDU    #XINCS
01114P 0208 D6   B6      A        LDB    SCMODE
01115P 020A 58                    ASLB
01116P 020B EE   C5      A IMDFET LDU    B,U
01117P 020D 39                    RTS
01116P 020E CE   005A    P YADRI  LDU    #GINCY   Y INCREMENT ROUTINE
011I9P 0211 39                    RTS
01120                      *
01121                      * THIS IS THE GENERAL PURPOSE LINE DRAWING ROUTINE
01122                      * IT DRAWS FROM XSTORE,YSTORE TO X2STOR,Y2STOR
01123                      *
01124P 0212 108E 027E    P LINGEN LDY    #YINC    ASSSUME INCREMENTING Y
01125P 0216 BD   048E    P        JSR    YDELTS
01126                      *** BNE LINNTX
01127                      *** TST CFLFLG  ;CANT USE XLINE FOR FILLING
****WARNING   001--00000
01128P 0219 1027 FF98 01B5        LBEQ   XLINE    SPECIAL CASE IS FASTER
01129P 021D 24   04   0223 LINNTX BCC    LY1BIG
01130P 021F 108E 028C    P        LDY    #YDEC
01131P 0223 34   06      A LY1BIG PSHS   D        SAVE DELTA Y ON THE STACK
01132P 0225 CE   0277    P        LDU    #XINC    ASSUME INCREMENT
01133P 0228 BD   049B    P        JSR    XDELTS
01134                      *** BNE LINNTY
01135                      *** TST CFLFLG  ;CANT USE YLIN FOR CIRCLE FILL CASE
01136P 022B 27   B0   01DD        BEQ    DYLINE
01137P 022D 24   03   0232 LINNTY BCC    LX1BIG
01136P 022F CE   0285    P        LDU    #XDEC
01139P 0232 10A3 E4      A LX1BIG CMPD   ,S       SEE WHICH DELTA IS BIGGER
01140P 0235 35   10      A        PULS   X        GET DELTA Y INTO X
01141P 0237 24   04   023D        BCC    XMLDLT   IF CC THEN XDELTA IS BIGGER
01142P 0239 1E   32      A        EXG    U,Y      MAKE U MAJOR AXIS AND Y MINOR AXIS
01143                      *    INCREMENT OR DECREMENT ROUTINE
01144P 023B 1E   01      A        EXG    D,X      MAKE D MAJOR DELTA AND X MINOR DELTA
01145P 023D 34   46      A XMLDLT PSHS   U,D      SAVE COUNT OF POINTS IN LINE
01146P 023F 34   06      A        PSHS   D        SAVE MAJOR DELTA TO KNOW WHEN TO
01147                      *    INCREMENT ON MINOR AXIS
01148P 0241 44                    LSRA            START THE COUNT AT MAJOR DELTA/2
01149P 0242 56                    RORB            SO MIDPOINT IS ALWAYS CORRECT
01150P 0243 25   09   024E        BCS    HLFNTO   IF NOT ODD NO PROBLEM
01151                      *    WE ROUND IF WE ARE DECREMENTING
01i52                      *    SO WE END UP WITH THE SAME POINTS
01153                      *    IN BOTH DIRECTIONS
01154P 0245 1183 027F    P        CMPU   #YINC+&1
01155P 0249 25   03   024E        BCS    HLFNTO   SINCE XINC AND YINC ARE BELOW YINC+1 SKIP INCREMENT
01156P 024B 83   0001    A        SUBD   #&1
01157P 024E 34   16      A HLFNTO PSHS   X,D      THE COUNTER IN [D] IS INCREMENTED BY
01158                      *    THE MINOR DELTA EVERYTIME AND THE MINOR
01159                      *    AXIS IS UPDATED WHEN IT REACHES THE MAJOR
01160                      *    DELTA
01161                      *    SAVE MINOR DELTA IN [X] FOR ADDING TO
01162                      *    COUNTER

PAGE  009  ECBGRP  .SA:1  TXRGRP GRAPHICS CODE PSET,PRESET,LINE,PUT,GET,PPOINT

01163P 0250 BD   0000    P        JSR    PTADRS   GET INTO [U] ADDRESS OF INDEX ROUTINE
01164            0000    A        IFNE   &0
01177                       ENDC   IFN 0
01178P 0253 AD   C4      A LNGLOP JSR    ,U       GET LOCATION IN [X] AND BIT IN [A]
01179P 0255 BD   00E8    P        JSR    GRPACT   ACTUALLY PERFORM THE ACTION
01180P 0258 AE   66      A LNGLP2 LDX    &6,S     CHECK COUNT OF POINTS
01181P 025A 27   17   0273        BEQ    LNGFIN
01182P 025C 30   1F      A        LEAX   -&1,X    DECREMENT
01183P 025E AF   66      A        STX    &6,S
01184P 0260 AD   F8 08   A        JSR    [&8,S]   UPDATE MAJOR AXIS
01165P 0263 EC   E4      A        LDD    ,S       GET COUNT TO ADD MINOR DELTA
01186P 0265 E3   62      A        ADDD   &2,S
01187P 0267 ED   E4      A        STD    ,S       UPDATE COUNT
01188P 0269 A3   64      A        SUBD   &4,S     SEE IF REACHED MAJOR DELTA
01189P 026B 25   E6   0253        BCS    LNGLOP   IF NOT JUST CONTINUE DRAWING
01190P 026D ED   E4      A        STD    ,S       UPDATE TEMP COUNT
01191P 026F AD   AA      A        JSR    ,Y       UPDATE MINOR AXIS
01192P 0271 20   E0   0253        BRA    LNGLOP
01193P 0273 35   10      A LNGFIN PULS   X        GET RID OF FIFTH TEMP ON STACK
01194P 0275 35   F6      A        PULS   X,D,Y,U,PC GET RlD OF 4 TEMPS AND RETURN
01195                      *** JSR SPCROT  ;SPECIAL JSR FOR CIRCLE FILL
01196                      ***    ;THIS IS CALLED WHEN MINOR AXIS UPDATE
01197                      ***    ;IS DECREMENTED BY 3 FOR FILLED CIRCLE
01198P 0277 9E   BD      A XINC   LDX    XSTORE
01199P 0279 30   01      A        LEAX   &1,X
01200P 027B 9F   BD      A        STX    XSTORE
01201P 027D 39                    RTS
01202                      *** JSR SPCROT
01203                      * NOTE THIS ORDER IS IMPORTANT SINCE WE COMPARE ADDRESS OF MAJOR
01204                      * AXIS UPDATE ROUTINE TO YINC+1 TO SEE IF WE ARE +ING OR -ING
01205P 027E 9E   BF      A YINC   LDX    YSTORE
01206P 0280 30   01      A        LEAX   &1,X
01207P 0282 9F   BF      A        STX    YSTORE
01208P 0284 39                    RTS
01209                      *** JSR SPCROT
01210P 0285 9E   BD      A XDEC   LDX    XSTORE
01211P 0287 30   1F      A        LEAX   -&1,X
01212P 0289 9F   BD      A        STX    XSTORE
01213P 028B 39                    RTS
01214                      *** JSR SPCROT
01215P 028C 9E   BF      A YDEC   LDX    YSTORE
01216P 028E 30   1F      A        LEAX   -&1,X
01217P 0290 9F   BF      A        STX    YSTORE
01218P 0292 39                    RTS
01219P 0293 CE   00D3    A STMAXS LDU    #XMAX    POINT AT MAX STORAGE AREA
01220P 0296 8E   00FF    A        LDX    #CXMAX-&1 MAX LOGICAL VALUE TO SCALE
01221P 0299 AF   C4      A        STX    ,U
01222P 029B 8E   00BF    A        LDX    #CYMAX-&1 MAX Y LOGICAL VALUE
01223P 029E AF   42      A        STX    &2,U
01224P 02A0 7E   0091    P        JMP    GSCALC
01225
01226                             TTL    NEW GRAPHICS CODE FOR 6847 COLOR COMPUTER
01227
01228                      *
01229                      * PCLS CLEAR A GRAPHICS SCREEN
01230                      *
01231                             XDEF   PCLS
01232P 02A3 27   0E   02B3 PCLS   BEQ    DEFCLS   IF NO ARGUMENT, DEFAULT CLEAR

PAGE  010  ECBGRP  .SA:1  TXRGRP NEW GRAPHICS CODE FOR 6847 COLOR COMPUTER

01233P 02A5 8D   24   02CB        BSR    GETCLR   READ COLOR TO CLEAR TO
01234P 02A7 86   55      A GCLSB  LDA    #@125    REPLICATE THROUGHOUT BYTE
01235P 02A9 3D                    MUL
01236P 02AA 9E   BA      A        LDX    SCBASE   STORE INTO SCREEN MEMORY
01237P 02AC E7   80      A GCLSLP STB    ,X+
01238P 02AE 9C   B7      A        CMPX   SCTOP
01239P 02B0 26   FA   02AC        BNE    GCLSLP
01240P 02B2 39                    RTS
01241P 02B3 D6   B3      A DEFCLS LDB    BAKCLR
01242P 02B5 20   F0   02A7        BRA    GCLSB
01243
01244                      *
01245                      * COLOR SETS UP FOREGROUND AND BACKROUND COLOR
01246                      *
01247                             XDEF   COLORS
01248P 02B7 81   2C      A COLORS CMPA   #COMMA   FOREGROUND COLOR PRESENT?
01249P 02B9 27   08   02C3        BEQ    COLORB   IF ONLY BACKGROUND
01250P 02BB 8D   0E   02CB        BSR    GETCLR   READ COLOR IN
01251P 02BD D7   B2      A        STB    FORCLR   SET UP FORCLR (FOREGROUND COLOR)
01252P 02BF 9D   A5      A        JSR    CHRGOT   FOREGROUND ONLY?
01253P 02C1 27   07   02CA        BEQ    COLRTS
01254P 02C3 BD   0000    A COLORB JSR    CHKCOM   HAVE TO HAVE COMMA BEFORE BACKROUND
01255P 02C6 8D   03   02CB        BSR    GETCLR   FETCH BACKROUND COLOR
01256P 02C8 D7   B3      A        STB    BAKCLR   SET UP BAKCLR
01257P 02CA 39             COLRTS RTS
01258
01259                      *
01260                      * GETCLR RETURNS
01261                      * [B] = COLOR FROM 0 TO 3
01262                      * [A] = 8 IF CSS SHOULD BE SET 0 OTHERWISE
01263                      * TABLE OF RETURNS
01264                      * ARG C BW CSS
01265                      *   0 3  0  0
01266                      *   1 0  3  0
01267                      *   2 1  0  0
01268                      *   3 2  3  0
01269                      *   4 3  0  0
01270                      *   5 0  3  8
01271                      *   6 1  0  8
01272                      *   7 2  3  8
01273                      *   8 3  0  8
01274                      *
01275P 02CB BD   0000    A GETCLR JSR    GETBYT   READ THE COLOR
01276P 02CE C1   09      A GETCLX CMPB   #&9
01277P 02D0 1024 FD2C    A        LBCC   FCERR    ILLEGAL OVER 9
01278P 02D4 4F                    CLRA            ASSUME CSS 0
01279P 02D5 C1   05      A        CMPB   #&5
01280P 02D7 25   04   02DD        BCS    CNOCSS   0 -4 HAVE NO CSS
01281P 02D9 86   08      A        LDA    #&8
01282P 02DB C0   04      A        SUBB   #&4      MAP 5-8 TO 1-4
01283P 02DD 34   02      A CNOCSS PSHS   A        SAVE CSS
01284P 02DF 96   B6      A        LDA    SCMODE   SEE IF COLOR OR BLACK AND WHITE
01285P 02E1 46                    RORA
01286P 02E2 24   08   02EC        BCC    CLBWST   CLEAR FOR BLACK AND WHITE
01287P 02E4 5D                    TSTB            IF NON-ZERO ALL WE NEED IS A DECREMENT
01288P 02E5 26   02   02E9        BNE    CLCLST
01289P 02E7 C6   04      A CLBW3  LDB    #&4      FOR ZERO END UP MAPPING TO 3
01290P 02E9 5A             CLCLST DECB

PAGE  011  ECBGRP  .SA:1  TXRGRP NEW GRAPHICS CODE FOR 6847 COLOR COMPUTER

01291P 02EA 35   82      A GETCFN PULS   A,PC     GET CSS BACK AND RETURN
01292P 02EC 56             CLBWST RORB            LOOK AT LOW BIT OF COLOR
01293P 02ED 25   F8   02E7        BCS    CLBW3
01294P 02EF 5F                    CLRB            OTHERWISE RETURN ZERO
01295P 02F0 20   F8   02EA        BRA    GETCFN
01296                      *
01297                      * COLOR FETCH ROUTINE
01298                      *
01299P 02F2 BD   030B    P CMCOLR JSR    DEFCOL   SETUP DEFAULT
01300P 02F5 9D   A5      A        JSR    CHRGOT   SEE IF DEFAULT IS CORRECT
01301P 02F7 27   10   0309        BEQ    CO2RTS   IF END, IT MUST BE
01302P 02F9 81   29      A        CMPA   #CLSPAR
01303P 02FB 27   0C   0309        BEQ    CO2RTS
01304P 02FD BD   0000    A        JSR    CHKCOM
01305P 0300 81   2C      A        CMPA   #COMMA   IF COMMA IF MUST BE
01306P 0302 27   05   0309        BEQ    CO2RTS
01307P 0304 BD   02CB    P        JSR    GETCLR   GET COLOR IN
01308P 0307 8D   0A   0313        BSR    DEFFOR
01309P 0309 0E   A5      A CO2RTS JMP    CHRGOT
01310P 030B D6   B2      A DEFCOL LDB    FORCLR   ASSUME FOREGROUND IS CORRECT
01311P 030D 0D   C2      A        TST    SETFLG   SEE IF PSET OR PRESET
01312P 030F 26   02   0313        BNE    DEFFOR
01313P 0311 D6   B3      A        LDB    BAKCLR
01314P 0313 D7   B4      A DEFFOR STB    ACTCLR
01315P 0315 86   55      A        LDA    #@125
01316P 0317 3D                    MUL
01317P 0318 D7   B5      A        STB    ACTCLE
01318P 031A 39                    RTS
01319                      *
01320                      * SAMALP IS CALLED TO SWITCH BACK TO ALPHA MODE FROM GRAPHICS
01321                      *
01322P 031B 26   23   0340 SAMMOD BNE    SAMGRP   CALLED BY SCREEN TO SELECT MODE
01323                             XDEF   SAMALP
01324P 031D 34   16      A SAMALP PSHS   D,X
01325P 031F 8E   FFC8    A        LDX    #SAM+&8
01326P 0322 A7   0A      A        STA    &10,X    SPEED LESSENS FLICKER IN MODE SWITCH
01327P 0324 A7   08      A        STA    &8,X     CHANGE LEAST IMPORTANT FIRST
01328P 0326 A7   06      A        STA    &6,X
01329P 0328 A7   04      A        STA    &4,X
01330P 032A A7   02      A        STA    &2,X
01331P 032C A7   01      A        STA    &1,X
01332P 032E A7   1E      A        STA    -&2,X
01333P 0330 A7   1C      A        STA    -&4,X
01334P 0332 A7   1A      A        STA    -&6,X
01335P 0334 A7   18      A        STA    -&8,X
01336P 0336 B6   0000    A        LDA    PIA1BD   GET PIA VALUE FOR VIDEO CONTROL
01337P 0339 84   07      A        ANDA   #&7      PRESERVE NON-VIDEO BITS
01338P 033B B7   0000    A        STA    PIA1BD   SETTING ALL VIDEO BIT TO 0
01339P 033E 35   96      A        PULS   D,X,PC   RETURN PRESERVING ALL REGISTERS
01340P 0340 34   16      A SAMGRP PSHS   D,X
01341P 0342 96   B6      A        LDA    SCMODE   GET GRAPHICS MODE TO SET
01342P 0344 8B   03      A        ADDA   #&3
01343P 0346 C6   10      A        LDB    #&16     MOVE OVER 4 BITS
01344P 0348 3D                    MUL             AND PUT RESULT IN [B]
01345P 0349 CA   80      A        ORB    #&128    ALWAYS TURN HIGH BIT ON
01346P 034B DA   C1      A        ORB    SCCSS
01347P 034D B6   0000    A        LDA    PIA1BD   GET OLD STATE OF PIA
01348P 0350 84   07      A        ANDA   #&7      PRESERVE LOW 3 BITS

PAGE  012  ECBGRP  .SA:1  TXRGRP NEW GRAPHICS CODE FOR 6847 COLOR COMPUTER

01349P 0352 34   02      A        PSHS   A
01350P 0354 EA   E0      A        ORB    ,S+      OR IN OLD WITH NEW
01351P 0356 F7   0000    A        STB    PIA1BD   SET UP FOR GRAPHICS NOW
01352P 0359 96   BA      A        LDA    SCBASE   GET SCREEN BASE
01353P 035B 44                    LSRA            AS A .5K COUNT
01354P 035C BD   0380    P        JSR    SETVAD   AND SET UP AS A VIDEO ADDRESS
01355P 035F 96   B6      A        LDA    SCMODE   GET SCREEN MODE AGAIN
01356P 0361 8B   03      A        ADDA   #&3      TO PROGRAM SAM CHIP
01357P 0363 81   07      A        CMPA   #&7      ONLY CHANGE IS MAP 7 TO 6
01358P 0365 26   01   0368        BNE    GSTVMD
01359P 0367 4A                    DECA
01360P 0368 8D   02   036C GSTVMD BSR    SETVMD   SET VIDEO MODE
01361P 036A 35   96      A        PULS   D,X,PC
01362P 036C C6   03      A SETVMD LDB    #&3      THREE BITS TO SET
01363P 036E 8E   FFC0    A        LDX    #SAM     START AT SAM BASE ADDRESS
01364P 0371 46             SETVLP RORA            SET IF NEXT BIT IS HIGH OR LOW
01365P 0372 24   04   0378        BCC    SETVZR   IF LOW STORE INTO LOW ADDRESS
01366P 0374 A7   01      A        STA    &1,X
01367P 0376 20   02   037A        BRA    SETVON
01368P 0378 A7   84      A SETVZR STA    ,X
01369P 037A 30   02      A SETVON LEAX   &2,X     MOVE UP TO SET NEXT BIT
01370P 037C 5A                    DECB            MORE BITS TO SET?
01371P 037D 26   F2   0371        BNE    SETVLP
01372P 037F 39                    RTS
01373P 0380 C6   07      A SETVAD LDB    #&7      SEVEN BITS TO SET IN VIDEO BASE
01374P 0382 8E   FFC6    A        LDX    #SAM+&6  STARTING PLACE IS 6 BYTES INTO SAM
01375P 0385 20   EA   0371        BRA    SETVLP
01376P 0387 B6   0000    A SETCSS LDA    PIA1BD   GET VIDEO STATUS
01377P 038A 84   F7      A        ANDA   #@377-@10 TURN OFF BIT 3
01378P 038C 9A   C1      A        ORA    SCCSS    OR IN CURRENT CSS VALUE
01379P 038E B7   0000    A        STA    PIA1BD   SET NEW VALUE TO PIA
01380P 0391 39             SETRTS RTS
01381
01382                      *
01383                      * PMODE SCREEN MODE (0-4),PAGE NUMBER (WHICH 1.5K BLOCK)
01384                      *
01385                             XDEF   PMODE
01386P 0392 81   2C      A PMODE  CMPA   #COMMA
01387P 0394 27   2B   03C1        BEQ    PMDPGS   IF NO MODE, READ NEW PAGE NUMBER
01388P 0396 BD   0000    A        JSR    GETBYT   GET THE MODE
01389P 0399 C1   05      A        CMPB   #&5      MAX MODE IS 4
01390P 039B 24   41   03DE        BCC    FCGRP1
01391P 039D 96   BC      A        LDA    SCRBAS   REINIT SCBASE TO PAGE 1
01392                             XDEF   XRPMOD
01393P 039F 97   BA      A XRPMOD STA    SCBASE
01394P 03A1 58                    ASLB            CONSTRUCT INDEX INTO SCREEN DATA TABLE
01395P 03A2 CE   0485    P        LDU    #SCRTAB+&1 EACH ENTRY HAS 2 BYTES
01396P 03A5 AB   C5      A        ADDA   B,U      NUMBER OF MEMORY PAGES IS #2
01397P 03A7 91   19      A        CMPA   TXTTAB   COMPARE WITH MAXIMUM
01398P 03A9 22   33   03DE        BHI    FCGRP1   NO MEMORY FOR THAT MODE
01399P 03AB 97   B7      A        STA    SCTOP    SET TOP ADDRESS OF SCREEN
01400P 03AD 33   5F      A        LEAU   -&1,U    GET FIRST BYTE IN TABLE
01401P 03AF A6   C5      A        LDA    B,U      WHICH IS THE SCWID FOR THE MODE
01402P 03B1 97   B9      A        STA    SCWID
01403P 03B3 54                    LSRB            GET BACK MODE
01404P 03B4 D7   B6      A        STB    SCMODE
01405P 03B6 4F                    CLRA            DEFAULT BACKROUND AND FOREGROUND
01406P 03B7 97   B3      A        STA    BAKCLR   COLORS

PAGE  013  ECBGRP  .SA:1  TXRGRP NEW GRAPHICS CODE FOR 6847 COLOR COMPUTER

01407P 03B9 86   03      A        LDA    #&3
01408P 03BB 97   B2      A        STA    FORCLR
01409P 03BD 9D   A5      A        JSR    CHRGOT   SEE IF ANY MORE ARGUMENT
01410P 03BF 27   1C   03DD        BEQ    SCRRTS
01411                             XDEF   PMDPGS
01412P 03C1 BD   0000    A PMDPGS JSR    COMBYT   FORCE COMMA AND READ PAGE
01413P 03C4 5D                    TSTB            ZERO NOT ALLOWED
01414P 03C5 27   17   03DE        BEQ    FCGRP1
01415P 03C7 5A                    DECB
01416P 03C8 86   06      A        LDA    #&6      CONVERT TO NUMBER OF MEMORY PAGES
01417P 03CA 3D                    MUL             IN [B]
01418P 03CB DB   BC      A        ADDB   SCRBAS   ADD ON BASE OF GRAPHICS MEMORY
01419P 03CD 34   04      A        PSHS   B        SAVE CANDIDATE FOR SCBASE
01420P 03CF DB   B7      A        ADDB   SCTOP    ADD ON SIZE OF CURRENT MODE
01421P 03D1 D0   BA      A        SUBB   SCBASE   WHICH IS SCTOP-SCBASE
01422P 03D3 D1   19      A        CMPB   TXTTAB   AND SEE IF HITTING PROGRAM
01423P 03D5 22   07   03DE        BHI    FCGRP1
01424P 03D7 D7   B7      A        STB    SCTOP    SETUP NEW TOP
01425P 03D9 35   04      A        PULS   B
01426P 03DB D7   BA      A        STB    SCBASE   AND NEW BOTTOM
01427P 03DD 39             SCRRTS RTS
01428
01429P 03DE 7E   0000    A FCGRP1 JMP    FCERR
01430
01431                      *
01432                      * SCREEN [ALPHA/GRAPHIC FLAG][,CSS FLAG]
01433                      *
01434                             XDEF   SCREEN
01435P 03E1 81   2C      A SCREEN CMPA   #COMMA   JUST CHANGE CSS
01436P 03E3 27   0B   03F0        BEQ    SCRCSS   SCAN CSS ARGUMENT
01437P 03E5 BD   0000    A        JSR    GETBYT   READ FLAG ALPHA/GRAPHIC
01438P 03E8 5D                    TSTB            SEE CONDITION CODES
01439P 03E9 BD   031B    P        JSR    SAMMOD   SELECT ALPHA IF ZERO ELSE GRAPHICS
01440P 03EC 9D   A5      A        JSR    CHRGOT
01441P 03EE 27   ED   03DD        BEQ    SCRRTS
01442P 03F0 BD   0000    A SCRCSS JSR    COMBYT   READ CSS FLAG
01443P 03F3 5D                    TSTB            ZERO OR NON-ZERO?
01444P 03F4 27   02   03F8        BEQ    SCRS2R
01445P 03F6 C6   08      A        LDB    #&8      B3 SHOULD DE SELECTED
01446P 03F8 D7   C1      A SCRS2R STB    SCCSS    SAVE FLAG
01447P 03FA 20   8B   0387        BRA    SETCSS   ACTUALLY CHANGE THE VALUE
01448                             XDEF   PCLEAR
01449P 03FC BD   0000    A PCLEAR JSR    GETBYT   READ IN NUMBER OF 1.5K BLOCKS ALLOWED
01450P 03FF 5D                    TSTB            MUST ALLOW AT LEAST ONE
01451P 0400 27   DC   03DE        BEQ    FCGRP1
01452P 0402 C1   09      A        CMPB   #&9      LIMIT IS 8 FOR 12K MAXIMUM
01453P 0404 24   D8   03DE CCFCER BCC    FCGRP1
01454P 0406 86   06      A        LDA    #&6      CONVERT 1.5K TO 256 BYTE
01455P 0408 3D                    MUL             TURN INTO 256 BYTE COUNT
01456P 0409 DB   BC      A        ADDB   SCRBAS   ADD BASE ADDRESS FOR GRAPHICS MEMORY
01457P 040B 1F   98      A        TFR    B,A      MAKE [D] CONTAIN ADDRESS OF NEW
01458P 040D C6   01      A        LDB    #&1      TXTTAB CANDIDATE
01459P 040F 1F   02      A        TFR    D,Y      SAVE TO SET IF LEGAL
01460P 0411 1093 B7      A        CMPD   SCTOP    SEE IF PROGRAM WOULD BE IN VIDEO
01461P 0414 1025 FBE8    A        LBCS   FCERR
01462P 0418 93   19      A        SUBD   TXTTAB   CALCULATE NEW VARTAB
01463P 041A D3   1B      A        ADDD   VARTAB   BY ADDING OLD VARTAB-OLD TXTTAB
01464P 041C 1F   01      A        TFR    D,X      ALSO SAVE VARTAB CANDIDATE

PAGE  014  ECBGRP  .SA:1  TXRGRP NEW GRAPHICS CODE FOR 6847 COLOR COMPUTER

01465P 041E C3   00C8    A        ADDD   #&200    ALLOW 200 BYTES EXTRA
01466P 0421 93   21      A        SUBD   STKTOP   ROOM AFTER END OF PROGRAM?
01467P 0423 24   B9   03DE        BCC    FCGRP1   SHOULD BE WELL BELOW STKTOP
01468P 0425 96   68      A        LDA    CURLIN   Executing a direct statement?
01469P 0427 4C                    INCA
01470P 0428 27   08   0432        BEQ    DIRSTA   Yes, leave TXTPTR as is.
01471P 042A 1F   20      A        TFR    Y,D      No, TXTPTR:=TXTPTR+(new TXTTAB-
01472P 042C 93   19      A        SUBD   TXTTAB   old TXTTAB) so it points to the
01473P 042E D3   A6      A        ADDD   TXTPTR   same place in the program after
01474P 0430 DD   A6      A        STD    TXTPTR   the program is moved.
01475P 0432 DE   1B      A DIRSTA LDU    VARTAB   FETCH OLD VARTAB FOR BLOCK TRANSFER
01476P 0434 9F   1B      A        STX    VARTAB   SAVE NEW VARTAB
01477P 0436 1193 1B      A        CMPU   VARTAB   MOVING UP OR DOWN?
01478P 0439 24   17   0452        BCC    PRGMVD   BLOCK TRANSFER DOWN
01479P 043B A6   C2      A PRGMVU LDA    ,-U      FETCH FROM OLD VARTAB GOING LOWER
01480P 043D A7   82      A        STA    ,-X      STORE INTO NEW VARTAB
01481P 043F 1193 19      A        CMPU   TXTTAB   REACHED OLD TXTTAB?
01462P 0442 26   F7   043B        BNE    PRGMVU   IF NOT, KEEP TRANSFERING
01483P 0444 109F 19      A        STY    TXTTAB   SET UP NEW TXTTAB
01484P 0447 6F   3F      A        CLR    -&1,Y    AND ZERO BYTE BEFORE IT
01485                             XDEF   PRGSET
01486P 0449 BD   0000    A PRGSET JSR    CHEADA   FIX UP THE LINKS
01487P 044C BD   0000    A        JSR    CLEARC   PERFORM A CLEAR TO SET NEW ARYTAB...
01488P 044F 7E   0000    A        JMP    NEWSTT   AND CONTINUE WITH PROGRAM
01489P 0452 DE   19      A PRGMVD LDU    TXTTAB   GET OLD TXTTAB TO MOVE DOWN FROM
01490P 0454 109F 19      A        STY    TXTTAB   SET UP NEW TXTTAB
01491P 0457 6F   3F      A        CLR    -&1,Y    AND FORCE ZERO BEFORE IT
01492P 0459 A6   C0      A PRGMVL LDA    ,U+      FETCH FROM TXTTAB UP
01493P 045B A7   A0      A        STA    ,Y+      AND STORE INTO NEW TXTTAB GOING UP
01494P 045D 109C 1B      A        CMPY   VARTAB   COMPARE AGAINST NEW VARTAB
01495P 0460 26   F7   0459        BNE    PRGMVL   ITERATE MOVING TO LOWER ADDRESSES
01496P 0462 20   E5   0449        BRA    PRGSET   FINISH UP PCLEAR
01497                             XDEF   PINIT
01498P 0464 C6   1E      A PINIT  LDB    #&30     ALLOW FOR MAXIMUM GRAPHICS
01499            0001    A        IFNE   REALIO
01500P 0466 D7   19      A        STB    TXTTAB   SAME AS PCLEAR 4
01501                             ENDC   IFN      REALIO
01502P 0468 86   06      A        LDA    #&6
01503                             XDEF   REPINT
01504P 046A 97   BC      A REPINT STA    SCRBAS   SAVE FOR FUTURE USE
01505P 046C 97   BA      A        STA    SCBASE
01506P 046E 4F                    CLRA
01507P 046F 97   B6      A        STA    SCMODE
01508P 0471 86   10      A        LDA    #&16
01509P 0473 97   B9      A        STA    SCWID
01510P 0475 86   03      A        LDA    #&3
01511P 0477 97   B2      A        STA    FORCLR
01512P 0479 86   0C      A        LDA    #&12
01513P 047B 97   B7      A        STA    SCTOP
01514P 047D 9E   19      A        LDX    TXTTAB
01515P 047F 6F   1F      A        CLR    -&1,X
01516P 0481 7E   0000    A        JMP    SCRTCH
01517P 0484      10      A SCRTAB FCB    &16      MODE 0 HAS SCWID 16
01518P 0485      06      A        FCB    &6       AND REQUIRE 6 256 BYTE PAGES OF MEMORY
01519P 0486      20      A        FCB    &32      MOVE TO 32 BYTE SCWID FOR COLOR
01520P 0487      0C      A        FCB    &12      AND DOUBLE THE MEMORY
01521P 0488      10      A        FCB    &16
01522P 0489      0C      A        FCB    &12

PAGE  015  ECBGRP  .SA:1  TXRGRP NEW GRAPHICS CODE FOR 6847 COLOR COMPUTER

01523P 048A      20      A        FCB    &32
01524P 048B      18      A        FCB    &24
01525P 048C      20      A        FCB    &32
01526P 048D      18      A        FCB    &24
01527P 048E DC   C5      A YDELTS LDD    Y2STOR   CALCULATE DELTA Y IN [D]
01528P 0490 93   BF      A        SUBD   YSTORE
01529P 0492 24   3B   04CF YDLCON BCC    YDLRTS
01530P 0494 34   01      A        PSHS   CC       Save carry and zero flags.
01531P 0496 BD   0B41    P        JSR    NEGD     Get a positive delta.
01532P 0499 35   81      A        PULS   CC,PC    Restore carry and zero and return.
01533
01534P 049B DC   C3      A XDELTS LDD    X2STOR   CALCULATE DELTA X
01535P 049D 93   BD      A        SUBD   XSTORE
01536P 049F 20   F1   0492        BRA    YDLCON
01537P                            XDEF   PCOPY
01538P 04A1 8D   1A   04BD PCOPY  BSR    PCOPR    READ A PAGE NUMBER ARGUMENT AND
01539P 04A3 34   06      A        PSHS   D        GET PAGE ADDRESS IN [D]
01540P 04A5                       SYNCHK TOTK     Format is PCOPY <source> TO <dest>.
01541P 04AA 8D   11   04BD        BSR    PCOPR    GET dest PAGE ARGUMENT
01542P 04AC 35   10      A        PULS   X        GET source PAGE IN [X]
01543P 04AE 1F   03      A        TFR    D,U      PUT dest PAGE IN [U]
01544P 04B0 108E 0300    A        LDY    #&0768   NUMBER OF BYTES ON A PAGE IS 2*768
01545P 04B4 EC   81      A PCOPLP LDD    ,X++     READ FROM SOURCE PAGE
01546P 04B6 ED   C1      A        STD    ,U++     AND STORE WITHOUT MODIFYING
01547P 04B8 31   3F      A        LEAY   -&1,Y
01548P 04BA 26   F8   04B4        BNE    PCOPLP
01549P 04BC 39                    RTS
01550P 04BD BD   0000    A PCOPR  JSR    GETBYT   PAGE NUMBERS ARE 1-8
01551P 04C0 5D                    TSTB            ZERO IS ILLEGAL
01552P 04C1 27   0D   04D0        BEQ    GFCER
01553P 04C3 5A                    DECB            MAP PAGE NUMBER TO 0 TO 7
01554P 04C4 86   06      A        LDA    #&6      TRANSLATE TO MEMORY ADDRESS
01555P 04C6 3D                    MUL             MAKE [B] NUMBER OF 256 BYTE PAGES
01556P 04C7 DB   BC      A        ADDB   SCRBAS   ADD GRAPHICS MEMORY BASE ADDRESS
01557P 04C9 D1   19      A        CMPB   TXTTAB   SHOULDN'T POINT INTO PROGRAM
01558P 04CB 24   03   04D0        BHS    GFCER
01559P 04CD lE   89      A        EXG    A,B      Turn it into a 16 bit address.
01560P 04CF 39             YDLRTS RTS             (A was zero from MUL.)
01561
01562                             TTL    Graphics PUT and GET
01563
01564
01565                      *
01566                      * GET[@](X1,Y1)-(X2,Y2),ARRAY NAME[,G]
01567                      * PUT[@](X1,Y1)-(X2,Y2),ARRAY NAME[ACTION=AND,OR,PSET,PRESET,NOT]
01568                      *
01569
01570P 04D0 7E   0000    A GFCER  JMP    FCERR    FUNCTION CALL FROM SEVERAL SOURCES
01571
01572                             XDEF   GET
01573P 04D3 5F             GET    CLRB            FLAG AS GET -- SHARE CODE WITH PUT
01574P 04D4 20   02   04D8        BRA    GGETCN
01575
01576                             XDEF   PUT
01577P 04D6 C6   01      A PUT    LDB    #&1      FLAG AS PUT NOT GET
01578P 04D8 D7   D8      A GGETCN STB    GTPTFL   SAVE INDICATION OF WHICH IT IS
01579P 04DA BD   0000    A        JSR    HKPTGT   ALLOW EXIT IN CASE GET/PUT USED OTHERPLACES
01580                             XDEF   GGPRET

PAGE  016  ECBGRP  .SA:1  TXRGRP Graphics PUT and GET

01581            04DD    P GGPRET EQU    *        This address is used by the code
01582                      *    the disk ROM hooks into HKPTGT to
01583                      *    determine if the caller was the
01584                      *    graphics PUT/GET code.
01585P 04DD 81   40      A        CMPA   #'@      ALLOW OPTIONAL @ FOR COMPATIBILITY
01586P 04DF 26   02   04E3        BNE    GGETC2
01587P 04E1 9D   9F      A        JSR    CHRGET   SKIP OVER THE @ SIGN
01588P 04E3 BD   0100    P GGETC2 JSR    CRDGET   SCAN THE COORDINATES
01589P 04E6 BD   0000    A        JSR    CHKCOM   SKIP COMMA AFTER COORDINATES
01590P 04E9 BD   064A    P        JSR    PGTARY   SCAN THE ARRAY NAME AND LOOK IT UP
01591                      *    [X] RECEIVES POINTER AT THE LENGTH
01592                      *    BYTES. AN FCERR IS GENERATED IF
01593                      *    THE ARRAY DOES NOT EXIST
01594P 04EC 1F   10      A        TFR    X,D      SAVE POINTER LENGTH BYTES IN [D]
01595P 04EE EE   84      A        LDU    ,X       [U]=LENGTH
01596P 04F0 33   5E      A        LEAU   -&2,U    DON'T INCLUDE NAME SIZE WHICH IS IN COUNT
01597P 04F2 33   CB      A        LEAU   D,U      SET [U]=ADDRESS JUST PAST END OF ARRAY
01598P 04F4 DF   D1      A        STU    ARYFIN   SAVE THIS SO WE MAKE SURE WE NEVER
01599                      *    READ OR WRITE THIS HIGH
01600P 04F6 30   02      A        LEAX   &2,X     MOVE TO POINT AT NUMBER OF DIMENSIONS
01601P 04F8 E6   84      A        LDB    ,X       [B]=NUMBER OF DIMENSIONS
01602P 04FA 58                    LSLB            [B]=BYTES USED BY DIMENSION SIZES
01603P 04FB 3A                    ABX             POINT AT THE BYTE JUST BEFORE THE DATA
01604                      *    SINCE WE NEVER ADDED ONE FOR THE
01605                      *    NUMBER OF DIMENSIONS
01606P 04FC 9F   CF      A        STX    ARYIDX   SAVE START ADDRESS IN ARRAY-1
01607P 04FE 96   06      A        LDA    VALTYP   MAKE SURE IT IS NOT A STRING ARRAY
01608P 0500 26   CE   04D0        BNE    GFCER    SINCE GARBAGE COLLECTION WOULD FAIL
01609P 0502 0F   D4      A        CLR    GGRPFL   ASSUME IT'S NOT GRAPHICS MODE
01610P 0504 9D   A5      A        JSR    CHRGOT   ANYTHING MORE ON THIS LINE?
01611P 0506 27   2D   0535        BEQ    GNOTRL   MUST BE CHARACTER MODE
01612P 0508 03   D4      A        COM    GGRPFL   SET GRAPHICS FLAG
01613P 050A BD   0000    A        JSR    CHKCOM   COMMA BEFORE TRAILING FLAGS
01614P 050D 0D   D8      A        TST    GTPTFL   IS IT PUT OR GET?
01615P 050F 26   07   0518        BNE    PUTTRL   HANDLING ACTION VERB ON PUT
01616P 0511                       SYNCHK 'G       GET ONLY ALLOWS ,G MEANING GRAPHICS
01617P 0516 20   30   0548        BRA    GETCN2
01618
01619P 0518 C6   05      A PUTTRL LDB    #PUTCNT  COUNT OF VERBS TO COMPARE AGAINST
01620P 051A 8E   05B7    P        LDX    #PUTTAB  TABLE WITH ADDRESSES AND VERBS
01621P 051D EE   81      A PUTTR2 LDU    ,X++     GET CANDIDATE FOR PUTAC0
01622P 051F 10AE 81      A        LDY    ,X++     GET CANDIDATE FOR PUTAC1
01623P 0522 A1   80      A        CMPA   ,X+      SEE IF MATCHES THE VERB
01624P 0524 27   06   052C        BEQ    PUTGOA   GO STORE ACTION ADDRESSES
01625P 0526 5A                    DECB            MORE ITEMS IN TABLE?
01626P 0527 26   F4   051D        BNE    PUTTR2   CONTINUE COMPARING
01627P 0529 7E   0000    A        JMP    SNERR    SYNTAX ERROR IF NO MATCH AT ALL
01628
01629P 052C 109F D5      A PUTGOA STY    PUTAC1   STORE ACTION IF BIT IS A 1
01630P 052F DF   D9      A        STU    PUTAC0   STORE ACTION IF BIT IS A 0
01631P 0531 9D   9F      A        JSR    CHRGET   SKIP OVER ACTION VERB
01632P 0533 20   13   0548        BRA    GETCN2   CONTINUE SCANNING
01633
01634P 0535 C6   F8      A GNOTRL LDB    #@377-&7 GET RID OF LAST 3 BITS IN BW MODE
01635P 0537 96   B6      A        LDA    SCMODE   SEE IF BW OR COLOR
01636P 0539 46                    RORA            BY TESTING LOW BIT
01637P 053A 24   02   053E        BCC    GNOTRB   ALREADY SET UP FOR BW
01638P 053C C6   FC      A        LDB    #@377-&3 GET RID OF LAST 2 BITS IN COLOR

PAGE  017  ECBGRP  .SA:1  TXRGRP Graphics PUT and GET

01639P 053E 1F   98      A GNOTRB TFR    B,A      MAKE 2 COPIES OF THE BIT MASK
01640P 0540 D4   BE      A        ANDB   XLOW     AND FIRST COORDINATE
01641P 0542 D7   BE      A        STB    XLOW
01642P 0544 94   C4      A        ANDA   X2STOR+&1 AND SECOND COORDINATE
01643P 0546 97   C4      A        STA    X2STOR+&1
01644P 0548 BD   049B    P GETCN2 JSR    XDELTS   CALCULATE DELTA X IN [D]
01645P 054B 24   04   0551        BCC    STXDLT   SKIP OVER IF XSTORE IS LOWER
01646P 054D 9E   C3      A        LDX    X2STOR   FORCE XSTORE TO BE THE SMALLER
01647P 054F 9F   BD      A        STX    XSTORE
01648P 0551 DD   C3      A STXDLT STD    X2STOR   USE X2STOR TO KEEP COUNT OF COLUMNS
01649P 0553 BD   048E    P        JSR    YDELTS   CALCULATE DELTA Y IN [D]
01650P 0556 24   04   055C        BCC    STYDLT   OK IF YSTORE IS ALREADY SMALLER
01651P 0558 9E   C5      A        LDX    Y2STOR   MAKE SURE YSTORE IS SMALLER
01652P 055A 9F   BF      A        STX    YSTORE
01653P 055C DD   C5      A STYDLT STD    Y2STOR   USE Y2STOR FOR COUNT OF ROWS
01654P 055E 96   B6      A        LDA    SCMODE   WE HAVE TO DOUBLE THE X COUNT FOR COLOR
01655P 0560 46                    RORA            MODE SINCE THERE ARE 2 BITS PER PIXEL
01656P 0561 DC   C3      A        LDD    X2STOR
01657P 0563 24   04   0569        BCC    GTPTBW
01658P 0565 D3   C3      A        ADDD   X2STOR   Double it and put it back.
01659P 0567 DD   C3      A        STD    X2STOR
01660P 0569 BD   0191    P GTPTBW JSR    GSCAL2   Scale the deltas according to the
01661                      *    current graphics mode.
01662P 056C DC   C3      A        LDD    X2STOR   Get X delta into D.
01663P 056E 9E   C5      A        LDX    Y2STOR   Make Y2STOR a count.
01664P 0570 30   01      A        LEAX   &1,X
01665P 0572 9F   C5      A        STX    Y2STOR
01666P 0574 0D   D4      A        TST    GGRPFL   SEE IF GRAPHICS OR NOT
01667P 0576 26   58   05D0        BNE    GRPGTP   USE A VERY DIFFERENT LOOP FOR
01668                      *    ITERATING THROUGH GRAPHICS BITS
01669P 0578 44                    LSRA            Now divide by 8 for byte mode.
01670P 0579 56                    RORB
01671P 057A 44                    LSRA
01672P 057B 56                    RORB
01673P 057C 44                    LSRA
01674P 057D 56                    RORB
01675P 057E C3   0001    A        ADDD   #&1      MAKE IT A COUNT
01676P 0581 DD   C3      A        STD    X2STOR
01677P 0583 BD   0009    P        JSR    GENADR   [X]=VIDEO RAM ADDRESS TO START AT
01678P 0586 D6   C4      A PCOLLP LDB    X2STOR+&1 GET COLUMN COUNT IN [U]
01679P 0588 34   10      A        PSHS   X        SAVE ADDRESS AT START OF COLUMN
01680                      *    AND PUT COLUMN COUNTER ON STACK
01681P 058A 0D   D8      A PROWLP TST    GTPTFL   IS THIS GET OR PUT?
01682P 058C 27   21   05AF        BEQ    GROWSB   HANDLE GET FOR ONE CHARACTER
01683P 058E 8D   11   05A1        BSR    GARYSB   INDEX NEXT BYTE IN ARRAY
01684P 0590 A6   C4      A        LDA    ,U       GET THE BYTE OUT OF THE ARRAY
01685P 0592 A7   80      A        STA    ,X+      SAVE THE CHARACTER
01686P 0594 5A             PRWINC DECB            DECREMENT COLUMN COUNT
01667P 0595 26   F3   058A        BNE    PROWLP   ITERATE FOR THE ENTIRE ROW
01688P 0597 35   10      A        PULS   X        [X]=ADDRESS AT START OR ROW
01689
01690P 0599 BD   005A    P GSKPCH JSR    GINCY    GO TO THE NEXT ROW
01691P 059C 0A   C6      A GGSKPC DEC    Y2STOR+&1 COUNT DOWN FOR EACH ROW
01692P 059E 26   E6   0586        BNE    PCOLLP
01693P 05A0 39             CPTRTS RTS
01694
01695P 05A1 DE   CF      A GARYSB LDU    ARYIDX   INDEX INTO THE ARRAY
01696P 05A3 33   41      A        LEAU   &1,U     UPDATE INDEX

PAGE  018  ECBGRP  .SA:1  TXRGRP Graphics PUT and GET

01697P 05A5 DF   CF      A        STU    ARYIDX
01698P 05A7 1193 D1      A        CMPU   ARYFIN   ARE WE PAST THE ARRAY?
01699P 05AA 26   F4   05A0        BNE    CPTRTS
01700P 05AC 7E   0000    A G2FCER JMP    FCERR
01701
01702P 05AF A6   80      A GROWSB LDA    ,X+      GET CHARACTERS AT CURRENT POSITION
01703P 05B1 8D   EE   05A1        BSR    GARYSB   GET INDEX
01704P 05B3 A7   C4      A        STA    ,U       STORE INTO THE ARRAY
01705P 05B5 20   DD   0594        BRA    PRWINC   RETURN TO CHARACTER ITERATION
01706
01707
01708                      *
01709                      * THE FOLLOWING CODE IS THE ITERATION LOOP FOR GRAPHICS GET AND PUT
01710                      * THE IDEA IS TO GO THROUGH A GRAPHICS AREA BIT BY BIT AND EITHER
01711                      * READ BITS FROM THE SCREEN INTO THE ARRAY OR READ BITS FROM THE
01712                      * ARRAY AND USE THE BIT ALONG WITH THE ACTION VERB TO AFFECT THE
01713                      * SCREEN BIT
01714                      *
01715
01716                      *
01717                      * THIS TABLE IS INDEXED WHEN THE VERB IS READ
01718                      * IT GIVES THE SCREEN ACTION FOR THE CASE WHEN THE ARRAY BIT IS
01719                      * SET AND NOT SET
01720                      *
01721
01722P 05B7      0612    P PUTTAB FDB    ZERIT    ZERO ON 0
01723P 05B9      0619    P        FDB    SETIT    SET ON 1 - IGNORE OLD VALUE OF BIT
01724P 05BB      00      A        FCB    PSETTK   PSET
01725P 05BC      0619    P        FDB    SETIT    OPPOSITE OF PSET, STILL IGNORE OLD BIT
01726P 05BE      0612    P        FDB    ZERIT
01727P 05C0      00      A        FCB    PRESTK   PRESET
01728P 05C1      062F    P        FDB    LVEIT    ON ZERO WITH OR, LEAVE OLD VALUE
01729P 05C3      0619    P        FDB    SETIT    ON ONE WITH OT SETIT
01730P 05C5      00      A        FCB    ORTK     OR
01731P 05C6      0612    P        FDB    ZERIT    ON ZERO WITH AND ZERO IT
01732P 05C8      062F    P        FDB    LVEIT    ON ONE WITH AND LEAVE IT ALONE
01733P 05CA      00      A        FCB    ANDTK    AND
01734P 05CB      061F    P        FDB    COMIT    COMPLEMENT IN BOTH CASES WIH NOT
01735P 05CD      061F    P        FDB    COMIT
01736P 05CF      00      A        FCB    NOTTK
01737            0005    A PUTCNT EQU    (*-PUTTAB)/&5
01738
01739P 05D0 C3   0001    A GRPGTP ADDD   #&1      Turn D into the X count.
01740P 05D3 DD   C3      A        STD    X2STOR   SAVE WHERE LOOP EXPECTS COUNT
01741P 05D5 96   D8      A        LDA    GTPTFL   IF IT IS GET WE CLEAR THE ARRAY FIRST
01742P 05D7 26   09   05E2        BNE    PSKPCL   IF IT IS PUT SKIP CLEARING
01743P 05D9 DE   D1      A        LDU    ARYFIN   GET END PLUS ONE
01744P 05DB A7   C2      A GTLPCL STA    ,-U
01745P 05DD 1193 CF      A        CMPU   ARYIDX   GO BACK TO START MINUS ONE
01746P 05E0 22   F9   05DB        BHI    GTLPCL
01747P 05E2 BD   0009    P PSKPCL JSR    GENADR   GET X=ADDRESS AND B=BIT MASK OF START
01748P 05E5 D6   B6      A        LDB    SCMODE   SEE IF COLOR OR BLACK AND WHITE
01749P 05E7 56                    RORB            SET CARRY FOR COLOR
01750P 05E8 24   02   05EC        BCC    GCOLST   NOTHING SPECIAL FOR BLACK AND WHITE
01751P 05EA 84   AA      A        ANDA   #@252    ONLY ONE OF COLOR BITS SHOULD BE ON
01752P 05EC C6   01      A GCOLST LDB    #&1      INITIALIZE BIT MASK IN ARRAY
01753P 05EE 109E CF      A        LDY    ARYIDX   CARRY ARRAY INDEX IN [Y]
01754P 05F1 34   12      A GCOLLP PSHS   X,A      SAVE ROW START ADDRESS AND BIT MASK

PAGE  019  ECBGRP  .SA:1  TXRGRP Graphics PUT and GET

01755P 05F3 DE   C3      A        LDU    X2STOR   GET BITS PER ROW
01755P 05F5 34   42      A GROWLP PSHS   U,A      SAVE BIT MASK AND COUNT
01757P 05F7 54                    LSRB            ADJUST BIT MASK
01758P 05F8 24   08   0602        BCC    GETBCN   IF NO CARRY, NO INCREMENT
01759P 05FA 56                    RORB            MAKE HIGH BIT BE SET
01760P 05FB 31   21      A        LEAY   &1,Y     ADVANCE IN THE ARRAY
01761P 05FD 109C D1      A        CMPY   ARYFIN   GONE OFF END?
01762P 0600 27   AA   05AC        BEQ    G2FCER
01753P 0602 0D   D8      A GETBCN TST    GTPTFL   PERFORM GET OR PUT?
01764P 0604 27   1F   0625        BEQ    GGRPDO   GO GET INTO ARRAY
01755P 0606 E5   A4      A        BITB   ,Y       TEST ARRAY ELEMENT TO SEE WHICH ACTION
01766P 0608 27   04   060E        BEQ    GOPUT0   ON ZERO, PERFORM ZERO ACTION
01757P 060A 6E   9F 00D5 A        JMP    [PUTAC1] ON ONE, PERFORM ONE ACTION
01768P 060E 6E   9F 00D9 A GOPUT0 JMP    [PUTAC0]
01769
01770                      *
01771                      * THESE ARE THE ACTION ROUTINES STORED IN PUTAC1 AND PUTAC0
01772                      *
01773
01774P 0612 43             ZERIT  COMA            CLEAR THE SELECTED BIT
01775P 0613 A4   84      A        ANDA   ,X
01776P 0615 A7   84      A        STA    ,X
01777P 0617 20   16   062F        BRA    PGRPRT
01778
01779P 0619 AA   84      A SETIT  ORA    ,X       SET THE SELECTED BIT
01780P 061B A7   84      A        STA    ,X
01781P 061D 20   10   062F        BRA    PGRPRT
01782
01783P 061F A8   84      A COMIT  EORA   ,X       EXCLUSIVE OR THE BIT TO COMPLEMENT IT
01784P 0621 A7   84      A        STA    ,X
01785P 0623 20   0A   062F        BRA    PGRPRT
01786
01787P 0625 A5   84      A GGRPDO BITA   ,X       TEST BIT ON SCREEN
01788P 0627 27   06   062F        BEQ    PGRPRT   IF CLEAR NO BIT TO SET
01789P 0629 1F   98      A        TFR    B,A      SAVE CONTENTS OF B
01790P 062B AA   A4      A        ORA    ,Y       SET THE SELECTED BIT
01791P 0620 A7   A4      A        STA    ,Y
01792
01793            062F    P LVEIT  EQU    *        DO NOTHING IF LEAVE BIT ALONE
01794P 062F 35   42      A PGRPRT PULS   A,U      GET BACK ROW COUNT AND BIT MASK
01795P 0631 BD   005E    P        JSR    GINXB    UPDATE X TO NEXT POSITION
01796P 0634 33   5F      A        LEAU   -&1,U    DECREMENT COUNT OF BITS IN THE ROW
01797P 0636 1193 8A      A        CMPU   DBLZER   (LEAU DOESN'T SET CONDITION CODES)
01798P 0639 26   BA   05F5        BNE    GROWLP   IF NONZERO CONTINUE THIS ROW
01799P 063B AE   61      A        LDX    &1,S     GET ADDRESS AT START OF ROW
01800P 063D 96   B9      A        LDA    SCWID    UPDATE IT
01801P 063F 30   86      A        LEAX   A,X
01802P 0641 35   02      A        PULS   A        GET BIT MASK
01803P 0643 32   62      A        LEAS   &2,S     GET RID OF OLD ADDRESS
01804P 0645 0A   C6      A        DEC    Y2STOR+&1 DECREMENT NUMBER OF ROWS COUNT
01805P 0647 26   A8   05F1        BNE    GCOLLP   ITERATE EACH ROW
01806P 0649 39                    RTS
01807                      *
01808                      * THIS ROUTINE LOOKS UP AN ARRAY AND RETURN THE POINTER
01809                      * TO ITS COUNT BYTES IN [X]
01810                      * IF NO ARRAY IS PRESENT, AN FCERR RESULTS
01811                      *
01812P 064A BD   0000    A PGTARY JSR    PTRGET   LOOK VARIABLE UP AS A SIMPLE

PAGE  020  ECBGRP  .SA:1  TXRGRP Graphics PUT and GET

01813                      *    TO GET THE NAME
01814P 064D E6   82      A        LDB    ,-X      LOOK JUST BEFORE VALUE TO FETCH
01815P 064F A6   82      A        LDA    ,-X      NAME
01816P 0651 1F   03      A        TFR    D,U      SAVE NAME IN [U]
01817P 0653 96   1D      A        LDX    ARYTAB   START AT FIRST ARRAY
016182 0655 9C   1F      A LOPFDP CMPX   STREND   SEE IF ARRAYS ENDED
01819P 0657 1027 F9A5    A        LBEQ   FCERR    IF SO ILLEGAL STATEMENT
01820P 065B 11A3 84      A        CMPU   ,X       IS THIS ARRAY THE ONE?
01821P 065E 27   06   0666        BEQ    PGTRET   IF SO, ADVANCE POINT AND RETURN
01622P 0660 EC   02      A        LDD    &2,X     GET SIZE INTO [D]
018230 0662 30   8B      A        LEAX   D,X      ADVANCE TO NEXT ARRAY
01824P 0664 20   EF   0655        BRA    LOPFDP   AND CHECK IT
01825P 0666 30   02      A PGTRET LEAX   &2,X     POINT AT BYTE COUNT
01826P 0668 39                    RTS
01827
01828                             TTL    PAINT CODE
01829P 0669 39             PNTRTS RTS
01830
01831
01832                      *
01833                      * PAINT (X,Y),PAINT COLOR,BORDER COLOR
01834                      * STARTING AT (X,Y) WE COLOR WITH PAINT COLOR UNTIL
01835                      * WE FIND THE BORDER COLOR
01836                      * ALL CONNECTED FIGURES CAN BE PROPERLY COLORED
01837                      * THE EDGE OF THE SCREEN IS CONSIDERED A BORDER
01838                      *
01839                             XDEF   PAINT
01840P 066A 81   40      A PAINT  CMPA   #'@
01841P 066C 26   02   0670        BNE    PNTNAT
01842P 066E 9D   9F      A        JSR    CHRGET
01843P 0670 BD   0123    P PNTNAT JSR    ONECRD
01844P 0673 BD   008E    P        JSR    GSCALE
01845P 0676 86   01      A        LDA    #&1      FLAG AS PSET CASE
01846P 0678 97   C2      A        STA    SETFLG
01847P 067A BD   02F2    P        JSR    CMCOLR   READ THE PAINT COLOR INTO [B]
01848P 067D DC   B4      A        LDD    ACTCLR   SAVE PAINT COLOR
01849P 067F 34   06      A        PSHS   D        WHICH CMCOLR SETUP
01850P 0681 9D   A5      A        JSR    CHRGOT   SEE IF BORDER COLOR IS DIFFERENT
01851P 0683 27   03   0688        BEQ    DEFBRD   IF NOT PRESENT DEFAULT TO PAINT COLOR
01852P 0685 BD   02F2    P        JSR    CMCOLR   READ A NEW COLOR
01853P 0688 96   B5      A DEFBRD LDA    ACTCLE   GET RESULT AND SAVE
01854P 068A 97   D8      A        STA    PNTCLR   IN BORDER COLOR STORAGE AREA
01855P 068C 35   06      A        PULS   D        GET BACK ACTIVE COLOR
01856P 068E DD   B4      A        STD    ACTCLR   FOR FILLING
01857P 0690 4F             SCAN   CLRA            MAKE A DUMMY ENTRY ON THE
01858P 0691 34   56      A        PSHS   D,X,U    STACK WITH DIRECTION OF 0
01859P 0693 BD   0293    P        JSR    STMAXS   SETUP MAXIMUMS
01860                      *    SO WE KNOW WHERE THE BORDER IS
01861P 0696 BD   0000    P        JSR    PTADRS   GET THE ADRESS MAP ROUTINE FOR
01862P 0699 DF   D9      A        STU    PNTADR   THIS SCREEN MODE AND SAVE IT
01863P 069B BD   075D    P        JSR    SCANL    LOOK LEFT FILLING AS WE GO MAKING [D] A COUNT
01864P 069E 27   0F   06AF        BEQ    PNTLP2   IF NOT, POP DUMMY ENTRY AND QUIT
01865P 06A0 BD   0749    P        JSR    SCNCON   CONTINUE SCAN TO RIGHT AND PUT TOTAL IN [X]
01866P 06A3 86   01      A        LDA    #&1      MAKE ENTRY TO LOOK UP
01867P 06A5 97   D7      A        STA    PDIRCT
01888P 06A7 BD   0738    P        JSR    ENTERS   MAKE SCAN ENTRY WITH X2STOR & PDIRCT
01889P 06AA 00   D7      A        NEG    PDIRCT   MAKE ENTRY FOR LOOKING DOWN
01870P 06AC BD   0738    P        JSR    ENTERS

PAGE  021  ECBGRP  .SA:1  TXRGRP PAINT CODE

01871P 06AF 10DF DC      A PNTLP2 STS    PNTSTK   Store stack pointer in case PNTCHF
01872                      *    equals zero since we don't initialize
01873                      *    PNTCHF.
01874P 06B2 0D   DB      A PNTLOP TST    PNTCHF   Anything changed?
01875P 06B4 26   03   06B9        BNE    PNTPUL   Yes, use the next stack entry.
01876P 06B6 10DE DC      A        LDS    PNTSTK   No, prune the stack.
01877P 06B9 35   56      A PNTPUL PULS   D,X,U    PULL SCAN ENTRY OFF THE STACK
01878P 06BB 0F   DB      A        CLR    PNTCHF   Say nothing changed yet.
01879P 06BD 10DF DC      A        STS    PNTSTK   Remember stack pointer for possible
01880                      *    pruning.
01881                      *
01882                      * THIS IS THE RECURSIVE SCAN ENTRY POINT. THE IDEA IS THAT
01883                      * ANY NON-BORDERPOINTS ARE CONNECTED STARTING TO THE RIGHT
01884                      * OF X,Y AND EXTENDING FOR COUNT POINTS. WE COLOR THE NON-BORDER
01885                      * POINTS AND MAKE NEW STACK ENTRIES FOR EACH NEW CONTIGUOUS GROUP
01886                      * OF CONNECTED POINTS. THIS WILL ALWAYS BE IN THE CURRENT SCAN DIRECTION
01887                      * UNLESS THERE IS OVERHANG ON THE LEFT OR RIGHT
01888                      * [A] HAS DIRECTION
01889                      * [B] HAS Y VALUE
01890                      * [X] HAS X VALUE
01891                      * [U] HAS POINT COUNT
01892                      * THE X AND Y ARE TO THE LEFT OF THE
01893                      * PLACE TO SCAN
01894P 06C0 30   01      A        LEAX   &1,X     MOVE TO THE RIGHT TO GET INTO THE SCAN AREA
01895P 06C2 9F   BD      A        STX    XSTORE
01896P 06C4 DF   D1      A        STU    PCOUNT
01897P 06C6 97   D7      A        STA    PDIRCT   SAVE THE DIRECTION
01898P 06C8 27   9F   0669        BEQ    PNTRTS   IF DUMMY ENTRY, QUIT
01899P 06CA 2B   06   06D2        BMI    SCANDN   IF NEGATIVE DECREMENT Y VALUE
01900P 06CC 5C                    INCB
01901P 06CD D1   D6      A        CMPB   YMAX+&1  SEE IF OFF THE BOTTOM
01902P 06CF 23   05   06D6        BLS    SCNCN1   IF NOT KEEP SCANNING
01903P 06D1 5F                    CLRB            MAKE 0 SO BRANCH TO PNTLOP
01904P 06D2 5D             SCANDN TSTB
01905P 06D3 27   DD   06B2        BEQ    PNTLOP   IF AT TOP, TRY NEXT ENTRY
01908P 06D5 5A                    DECB            DECREMENT Y
01907P 06D6 D7   C0      A SCNCN1 STB    YLOW     SAVE Y VALUE
01908P 06D8 BD   075D    P        JSR    SCANL    SCAN LEFT TO EXTEND
01909P 06DB 27   0F   06EC        BEQ    SCNCN4
01910P 06DD 1083 0003    A        CMPD   #&3     ENOUGH TO OVERHANG ON LEFT SIDE SO NEED TO LOOK
01911                      *    IN OPPOSITE DIRECTION
01912P 06E1 25   04   06E7        BCS    NLSENT   IF NOT NO NEW SCAN ENTRY
01913P 06E3 30   1E      A        LEAX   -&2,X    SUBTRACT TWO TO GET SCAN SIZE
01914P 06E5 8D   38   071F        BSR    ENTERL   MAKE THE ENTRY
01915P 06E7 BD   0749    P NLSENT JSR    SCNCON   CONTINUE SCAN TO RIGHT
01916P 06EA 8D   4C   0738 SCNLC1 BSR    ENTERS   MAKE ENTRY
01917P 06EC 43             SCNCN4 COMA
01918P 06ED 53                    COMB            SUBTRACT [D]+1 FROM TOTAL
01919P 06EE D3   D1      A SCNLCN ADDD   PCOUNT   ADD ONTO PCOUNT
01920P 06F0 DD   D1      A        STD    PCOUNT   AND UPDATE
01921P 06F2 2F   16   070A        BLE    SCNFIN   IF 0 OR LESS NO MORE SCANNING
01922P 06F4 BD   0277    P        JSR    XINC     MOVE RIGHT IF MORE POINTS
01923P 06F7 BD   0790    P        JSR    TSTBRD   SEE IF BORDER OR NOT
01924P 06FA 26   05   0701        BNE    SCNLC2   IF NOT, CALL SCANR
01925P 06FC CC   FFFF    A        LDD    #-&1     SUBTRACT ONE FROM POINT COUNT
01926P 06FF 20   ED   06EE        BRA    SCNLCN
01927P 0701 BD   0285    P SCNLC2 JSR    XDEC
01928P 0704 8D   3E   0744        BSR    SAVLOC   SAVE LEFT POSIION

PAGE  022  ECBGRP  .SA:1  TXRGRP PAINT CODE

01929P 0706 8D   5E   0766        BSR    SCANR    SCAN FOR COMPLETE SIZE
01930P 0708 20   E0   06EA        BRA    SCNLC1   GO MAKE ENTRY AND SUBTRACT
01931                      *
01932                      * WE ARE FINISHED EXTCEPT WE MIGHT NEED TO MAKE
01933                      * A REVERSE DIRECTION ENTRY FOR RIGHT SIDE OVERHANG
01934                      *
01935P 070A BD   0277    P SCNFIN JSR    XINC     NO CHECK IF RIGHT OVERHANG NEEDS A SCAN
01936P 070D 30   8B      A        LEAX   D,X      SUBTRACT OVERHANG SIZE FROM STOP POSITION
01937P 070F 9F   BD      A        STX    XSTORE
01938P 0711 43                    COMA            MAKE IT A POSITIVE COUNT
01939P 0712 53                    COMB
01940P 0713 83   0001    A        SUBD   #&1      IF STOPPED AT END+1 ALSO NO OVERHANG
01941P 0716 2F   04   071C        BLE    PQUIT    TAKES AT LEAST 2 POINTS TO OVERHANG
01942P 0718 1F   01      A        TFR    D,X
01943P 071A 8D   03   071F        BSR    ENTERL   ENTER OVERHANG SCAN
01944P 071C 7E   06B2    P PQUIT  JMP    PNTLOP
01945P 071F DD   CB      A ENTERL STD    PNTTMP   SAVE [D] WHICH HAS CURRENT COUNT
01946P 0721 35   20      A        PULS   Y        TAKE OFF THE RETURN ADDRESS
01947P 0723 DC   BD      A        LDD    XSTORE   SAVE COUNT AND X VALUE
01948P 0725 34   16      A        PSHS   D,X
01949P 0727 96   D7      A        LDA    PDIRCT   GET DIRECTION
01950P 0729 40                    NEGA
01951P 072A D6   C0      A ENTCON LDB    YLOW
01952P 072C 34   06      A        PSHS   D        SAVE DIRECTION AND Y VALUE
01953P 072E 34   20      A        PSHS   Y        PUT RETURN ADDRESS BACK ON
01954P 0730 C6   02      A        LDB    #&2      CHECK FOR STACK SPACE
01955P 0732 BD   0000    A        JSR    GETSTK
01956P 0735 DC   CB      A        LDD    PNTTMP   GET BACK SAVED [D] COUNT
01957P 0737 39                    RTS
01958P 0738 DD   CB      A ENTERS STD    PNTTMP
01959P 073A 35   20      A        PULS   Y        GET RETURN ADDRESS
01960P 073C DC   C3      A        LDD    X2STOR   GET X VALUE FROM SAVED POSITION
01961P 073E 34   16      A        PSHS   D,X
01962P 0740 96   D7      A        LDA    PDIRCT   USE CURRENT DIRECTION
01963P 0742 20   E6   072A        BRA    ENTCON   MERGE WITH ENTERL CODE
01964P 0744 9E   BD      A SAVLOC LDX    XSTORE   MOVE PRIMARY INTO SECONDARY
01965P 0746 9F   C3               STX    X2STOR
01966P 0748 39                    RTS
01967                      *
01968                      * CALLED HERE WHEN WANT TO  SCAN RIGHT AFTER A SCANL AND PUT THE
01969                      * TWO PIECES TOGETHER ALL AS ONE SCAN. WE HAVE STORED THE
01970                      * RIGHT POSITION OH THE LEFT SCAN IN THE SECONDARY
01971                      * WE ADD THE SIZES TOGETHER AND LEAVE THE TOTAL IN [X]
01972                      *
01973P 0749 DD   CD      A SCNCON STD    PCNT2    SAVE SIZE OF LEFT PIECE
01974P 074B 109E C3      A        LDY    X2STOR   SAVE SECONDARY IN REGISTERS
01975P 074E 8D   F4   0744        BSR    SAVLOC
01976P 0750 109F BD      A        STY    XSTORE
01977P 0753 8D   11   0766        BSR    SCANR    SCAN RIGHT MAKING COUNT IN [D]
01976P 0755 9E   CD      A        LDX    PCNT2    GET SIZE OF PREVIOUS SCAN
01979P 0757 30   8B      A        LEAX   D,X      COMBINE SIZE OF LEFT AND RIGHT
01980P 0759 C3   0001    A        ADDD   #&1      INCLUDE FIRST POINT IN LEFT IN SCAN SIZE
01981P 075C 39                    RTS
01982
01983                      *
01984                      * THESE ARE THE MOST IMPORTANT SCAN ROUTINES
01985                      * THEY SCAN EITHER LEFT OR RIGHT UNTIL THEY FIND A BORDER
01986                      * POINT OR THE EDGE. AS THEY SCAN THEY COLOR AND KEEP A POINT COUNT

PAGE  023  ECBGRP  .SA:1  TXRGRP PAINT CODE

01987                      * WHICH IS RETURNED IN [D]. XSTORE IS UPDATED AS THF SCAN PROCEEDS
01988                      * THE POINT VALUE RETURNED IN XSTORE IS EITHER AN EDGE OR BORDER
01989                      *
01990P 075D BD   0744    P SCANL  JSR    SAVLOC
01991P 0760 108E 0285    P        LDY    #XDEC    SCAN LEFT DECREMENTS X AS IT GOES
01992P 0764 20   06   076C        BRA    SCANLC
01993P 0766 108E 0277    P SCANR  LDY    #XINC    SCAN RIGHT INCREMENTS X
01994P 076A AD   A4      A        JSR    ,Y
01995P 076C DE   8A      A SCANLC LDU    DBLZER   SET COUNT VALUE TO 0
01996P 076E 9E   BD      A        LDX    XSTORE   START AT XSTORE
01997P 0770 2B   17   0789 SCANLP BMI    SCLRTS   RETURN IF NEGATIVE 1 ALREADY
01998P 0772 9C   D3      A        CMPX   XMAX     SEE IF AT HIGH END
01999P 0774 22   13   0789        BHI    SCLRTS   IF HIGHER MUST BE ON EDGE
02000P 0776 34   60      A        PSHS   U,Y      SAVE ROUTINE ADDRESS AND COUNT
02001P 0778 8D   16   0790        BSR    TSTBRD   SEE IF BORDER
02002P 077A 27   0B   0787        BEQ    SCLRT2   IF BORDER, QUIT
02003P 077C BD   00E8    P        JSR    GRPACT   SET THE COLOR AT THE DESIRED POINT
02004P 077F 35   60      A        PULS   U,Y      GET BACK COUNT AND ROUTINE ADDRESS
02005P 0781 33   41      A        LEAU   &1,U     UPDATE COUNT
02006P 0733 AD   A4      A        JSR    ,Y       UPDATE X VALUE
02007P 0785 20   E9   0770        BRA    SCANLP   AND CONTINUE SCANNING
02008P 0787 35   60      A SCLRT2 PULS   U,Y      TAKE OFF COUNT AND ADDRESS
02009P 0789 1F   30      A SCLRTS TFR    U,D      MOVE COUNT INTO [D]
02010P 078B 1F   01      A        TFR    D,X
02011P 078D 93   8A      A        SUBD   DBLZER
02012P 078F 39             RTSSCL RTS
02013P 0790 AD   9F 00D9 A TSTBRD JSR    [PNTADR] GET ADDRESS OF THIS POINT
02014P 0794 1F   89      A        TFR    A,B      SET [B] TO BE A COPY OF THE BIT MASK
02015P 0796 D4   D8      A        ANDB   PNTCLR   MASK BORDER COLOR TO GET SELECTED BORDER BITS
02016P 0798 34   06      A        PSHS   D        SAVE THE BIT MASK IN [A]
02017P 079A A4   84      A        ANDA   ,X       READ CURRENT DATA IN AND MASK
02018P 079C A1   61      A        CMPA   &1,S     SEE IF MATCH BORDER COLOR
02019P 079E 35   86      A        PULS   D,PC     RETURN WITH CONDITION CODES SET
02020
02021                             TTL    MUSIC COMMAND
02022
02023                      *
02024                      * PLAY
02025                      * TAKES A SINGLE STRING ARGUMENT WHICH IS THE "MUSIC MACRO LANGUAGE"
02026                      * THIS STRING DEFINES VOLUME, TEMPO, OCTAVE, NOTE, ETC AND ALLOWS
02027                      * EXECUTION OF SUBSTRINGS WITH X (EXECUTE)
02028                      * CURRENT FORM IS:
02029                      * O (OCTAVE) ARG 1-5
02030                      * V (VOLUME) ARG 0-31
02031                      * L (Length of note) ARG 1-255
02032                      * T (Tempo) ARG 1-255
02033                      * P (Pause) 1 to 255 (+, -, less than, greater than not allowed.)
02034                      * Notes A through G, with + or # for sharp, - for flat.
02035                      * Notes can also be specified as 1 through 12 with 1 being C.
02036                      * N preceding the note argument is optional.
02037                      * X (EXECUTE) STRING NAME;
02038                      * SEMICOLON, SPACE, AND SINGLEQUOTE ARE IGNORED
02039                      * ARG MEANS ONE OF:
02040                      * + (INCREMENT CURRENT VALUE BY ONE)
02041                      * - (DECREMENT CURRENT VALUE BY ONE)
02042                      * Right Angle Bracket (MULTIPLY CURRENT VALUE BY 2)
02043                      * Left Angle Bracket (DIVIDE CURRENT VALUE BY 2)
02044                      * =VAR NAME; (USE VARIABLE VALUE)

PAGE  024  ECBGRP  .SA:1  TXRGRP MUSIC COMMAND

02045                      * NUMERIC CONSTANT (SET TO CONSTANT VALUE)
02046                      *
02047                             XDEF   PLAY
02048P 07A0 9E   8A      A PLAY   LDX    DBLZER   MAKE DUMMY ENTRY
02049P 07A2 C6   01      A        LDB    #&1      (Must have nonzero length so
02050                      *    the zero pointer will be detected
02051                      *    at PLYSET.)
02052P 07A4 34   14      A        PSHS   B,X      SO EXECUTE WILL STOP ITERATION
02053P 07A6 BD   0000    A        JSR    FRMEVL   EVALUATE THE STRING ARG
02054P 07A9 5F                    CLRB            Select D/A sound.
02055P 07AA BD   0000    A        JSR    SETSEL
02056P 07AD BD   0000    A        JSR    SNDON    Turn on the TV sound.
02057P 07B0 BD   0000    A PLYSC4 JSR    FRESTR   FREE UP THE STRING AND SET [B] & [X]
02058P 07B3 20   02   07B7        BRA    PLYSET
02059P 07B5 35   14      A PLYCON PULS   B,X      GO BACK UP ONE LEVEL OF EXECUTE
02060P 07B7 D7   D8      A PLYSET STB    PSTLEN   STORE THE LENGTH
02061P 07B9 27   FA   07B5        BEQ    PLYCON   Null string, don't allow test for
02062                      *    zero pointer since if the execute
02063                      *    string was undefined its pointer
02064                      *    could be zero.
02065P 07BB 9F   D9      A        STX    PSTPTR   STORE THE LOCATION
02066P 07BD 1027 F83F    A        LBEQ   SNDOFF   All done, turn off the TV sound.
02067
02068P 07C1 0D   D8      A PLYSCN TST    PSTLEN   AT THE END OF THIS STRING?
02069P 07C3 27   F0   07B5        BEQ    PLYCON   SEE IF NESTED IN EXECUTE
02070P 07C5 BD   0916    P        JSR    FETCHR   GET THE NEXT CHARACTER
02071P 07C8 81   3B      A        CMPA   #SEMCOL  IGNORE SEMICOLONS
02072P 07CA 27   F5   07C1        BEQ    PLYSCN
02073P 07CC 81   27      A        CMPA   #''      IGNORE SINGLE QUOTE
02074P 07CE 27   F1   07C1        BEQ    PLYSCN
02075P 07D0 81   58      A        CMPA   #'X      IS IT EXECUTE?
02076P 07D2 1027 01B2 0988        LBEQ   PXCUTR   GO SCAN NAME AND START SUBSTRING
02077P 07D6 8D   02   07DA        BSR    PLYDOH   Do command and return to PLYSCN.
02078P 07D8 20   E7   07C1        BRA    PLYSCN
02079
02080P 07DA 81   4F      A PLYDOH CMPA   #'O      Select octave?
02081P 07DC 26   0D   07EB        BNE    NTMUSO   No.
02082P 07DE D6   DE      A        LDB    OCTAVE   Yes, evaluate the argument.
02083P 07E0 5C                    INCB
02084P 07E1 8D   5B   083E        BSR    GPARG
02085P 07E3 5A                    DECB            Must be between 1 and 5.
02086P 07E4 C1   04      A        CMPB   #&4
02087P 07E6 22   63   084B        BHI    BADPLY
02088P 07E8 D7   DE      A        STB    OCTAVE
02089P 07EA 39                    RTS
02090
02091P 07EB 81   56      A NTMUSO CMPA   #'V      Select volume?
02092P 07ED 26   1A   0809        BNE    NTMUSV   No.
02093P 07EF D6   DF      A        LDB    HIGHA    Yes, evaluate the specified volume.
02094P 07F1 54                    LSRB
02095P 07F2 54                    LSRB
02096P 07F3 C0   1F      A        SUBB   #&31
02097P 07F5 8D   47   083E        BSR    GPARG
02098P 07F7 C1   1F      A        CMPB   #&31     Check the range 0 to 31.
0209SP 07F9 22   50   084B        BHI    BADPLY
021000 07FB 58                    ASLB
02101P 07FC 58                    ASLB
02102P 07FD 34   04      A        PSHS   B

PAGE  025  ECBGRP  .SA:1  TXRGRP MUSIC COMMAND

02103P 07FF CC   7E7C    A        LDD     #(&124!+&2)*&256+&124!+PIABIT
02104P 0802 AB   E4      A        ADDA   ,S       Set high amplitude and low amplitude.
02105P 0804 E0   E0      A        SUBB   ,S+
02106P 0806 DD   DF      A        STD    HIGHA    Store high and low amplitudes.
02107P 0808 39                    RTS
02108
02109P 0809 81   4C      A NTMUSV CMPA   #'L      Select length of note?
02110P 080B 26   23   0830        BNE    NTMUSL   No.
02111P 080D D6   E1      A        LDB    LNOTE
02112P 080F 8D   2D   083E        BSR    GPARG
02113P 0811 5D                    TSTB            Must  be 1 to 255.
02114P 0812 27   37   084B        BEQ    BADPLY
02115P 0814 D7   E1      A        STB    LNOTE
02116P 0816 0F   E5      A        CLR    DOTFLG   Assume not dotted note.
02117P 0818 8D   03   081D MORDOT BSR    LOOKDT   Scan any dots there are, incrementing
02116P 081A 24   FC   0818        BCC    MORDOT   DOTFLG for each dot seen.
02119P 081C 39                    RTS
02120
02121P 081D 0D   D8      A LOOKDT TST    PSTLEN   Anything left?
02122P 081F 27   0A   082B        BEQ    NOTDOT   No, there can't be a dot.
02123P 0821 BD   0916    P        JSR    FETCHR   Yes, look ahead to see if dot.
02124P 0824 81   2E      A        CMPA   #'.
02125P 0826 27   05   082D        BEQ    ISDOT    It is a dot.
02126P 0828 BD   0960    P        JSR    FETBAK   Not a dot, move pointer back.
02127P 082B 43             NOTDOT COMA            Set carry to indicate not a dot.
02128P 082C 39                    RTS
02129
02130P 082D 0C   E5      A ISDOT  INC    DOTFLG   Increment the count of dots and
02131P 082F 39                    RTS             return with carry clear from CMPAIM
02132                      *    "." to indicate a dot was seen.
02133
02134P 0830 81   54      A NTMUSL CMPA   #'T      Select tempo?
02135P 0832 26   0D   0841        BNE    NTMUST   No.
0213EP 0834 D6   E2      A        LDB    TEMPO
02137P 0836 8D   06   083E        BSR    GPARG
02138P 0838 5D                    TSTB            Must be 0 to 255.
02139P 0839 27   10   084B        BEQ    BADPLY
02140P 083B D7   E2      A        STB    TEMPO
02141P 083D 39                    RTS
02142
02143P 083E 7E   092A    P GPARG  JMP    PLYARG
02144
02145P 0841 81   50      A NTMUST CMPA   #'P      Pause?
02146P 0843 26   24   0869        BNE    NTMUSP   No.
02147P 0845 BD   0A49    P        JSR    FTCHVL   Yes, skip over the and evaluate
02148                      *    the pause argument.
02149P 0848 5D                    TSTB            Disallow 0.
02150P 0849 26   03   084E        BNE    OKPAWZ
02151P 084B 7E   0000    A BADPLY JMP    FCERR
02152P 084E 96   E5      A OKPAWZ LDA    DOTFLG   Save the dotted note flag and
02153P 0850 9E   DF      A        LDX    HIGHA    volume setting.
02154P 0852 34   12      A        PSHS   X,A
02155P 0854 86   7C      A        LDA    #&124!+PIABIT Select zero volume.
02156P 0856 97   DF      A        STA    HIGHA
02157P 0858 97   E0      A        STA    LOWA
02158P 085A 0F   E5      A        CLR    DOTFLG
02159P 085C 8D   07   0865        BSR    GOPAWZ   Do pause and return to restore
02160P 085E 35   12      A        PULS   A,X      the settings.

PAGE  026  ECBGRP  .SA:1  TXRGRP MUSIC COMMAND

02161P 0860 97   E5      A        STA    DOTFLG
02162P 0862 9F   DF      A        STX    HIGHA
02163P 0864 39                    RTS
02164
02165P 0865 6F   E2      A GOPAWZ CLR    ,-S      Put on a zero to play a C.  This
02166P 0867 20   40   08A9        BRA    DOPAWZ   value is irrelevant since the volume
02167                      *    is zero.
02166
02169
02170P 0869 81   45      A NTMUSP CMPA   #'N      Note?
02171P 086B 26   03   0870        BNE    IMPNOT   No, must be implied note.
02172P 086D BD   0916    P        JSR    FETCHR   Yes, skip the N.
02173P 0870 81   41      A IMPNOT CMPA   #'A      Is it a note letter?
02174P 0872 25   04   0878        BLO    NOTNLT
02175P 0874 81   47      A        CMPA   #'G
02176P 0876 23   05   087D        BLS    LETNOT   Yes, go handle note letter.
02177P 0878 BD   093C    P NOTNLT JSR    PLYVAL   No, must be a numeric note spec.
02178P 087B 20   23   08A0        BRA    PLYB     Go play the note in B.
02179
02160P 087D 80   41      A LETNOT SUBA   #'A      Get number from 0 to 7.
02181P 087F 8E   09D9    P        LDX    #NOTETB  Map it so C=1, B=7.
02182P 0882 E6   86      A        LDB    A,X
02183P 0884 0D   D8      A        TST    PSTLEN   Anything left in the play string?
02184P 0886 27   18   08A0        BEQ    PLYB     No, so don't look for sharp or flat.
02185P 0888 BD   0916    P        JSR    FETCHR   Look for sharp of flat.
02186P 088B 81   23      A        CMPA   #'#
02187P 088D 27   04   0893        BEQ    ISSHRP
02188P 088F 81   2B      A        CMPA   #'+      Plus is same as sharp sign.
02189P 0891 26   03   0896        BNE    NTSHRP
02190P 0893 5C             ISSHRP INCB            Sharp so increment note.
02191P 0894 20   0A   08A0        BRA    PLYB     Go play it.
02192
02193P 0896 81   2D      A NTSHRP CMPA   #'-      Flat?
02194P 0898 26   03   089D        BNE    NTFLAT   No.
02155P 089A 5A                    DECB            Yes, decrement the note.
0298P  089B 20   03   08A0        BRA    PLYB
02197
02198P 089D BD   0960    P NTFLAT JSR    FETBAK   Not sharp or flat, back up pointer.
02199P 08A0 5A             PLYB   DECB            Make note 0 through 11.
02200P 08A1 C1   0B      A        CMPB   #&11
02201P 08A3 22   A6   084B        BHI    BADPLY
02202P 08A5 34   04      A        PSHS   B        Save the note.
02203P 08A7 D6   E1      A        LDB    LNOTE    B:=note length.
02204P 08A9 96   E2      A DOPAWZ LDA    TEMPO    A:=tempo.
02205P 08AB 3D                    MUL             Calculate number to subtract to
02206P 08AC DD   D5      A        STD    DURSUB   determine how long to hold the note.
02207P 08AE 33   61      A        LEAU   &1,S     Make U point to the return address
02208                      *    so the interrupt routine can clean
02209                      *    up the stack.
02210P 08B0 96   DE      A        LDA    OCTAVE   A:=octave.
02211P 08B2 81   01      A        CMPA   #&1      In the first two octaves?
02212P 08B4 22   2C   08E2        BHI    HIOCT    No, it's in one of the high 3.
02213P 08B6 8E   09E0    P        LDX    #OCTL    Yes, point to the counts for this
02214P 08B9 C6   18      A        LDB    #&24     note.  First point to correct octave.
02215P 08BB 3D                    MUL
02216P 08BC 3A                    ABX
02217P 08BD 35   04      A        PULS   B        Now point to the entry for the note.
02218P 08BF 58                    ASLB

PAGE  027  ECBGRP  .SA:1  TXRGRP MUSIC COMMAND

02219P 08C0 3A                    ABX
02220P 08C1 31   84      A        LEAY   ,X       Transfer the table pointer to Y.
02221P 08C3 8D   45   090A        BSR    CNTSET   Set up the duration count.
02222P 08C5 DD   E3      A        STD    DURCNT
02221P 08C7 8D   0C   08D5 MORLON BSR    LOWMID   Output the center amplitude.
02224P 08C9 96   DF      A        LDA    HIGHA    Output the high amplitude.
02225P 08CB 8D   0B   08D8        BSR    LOWSND
02226P 08CD 8D   06   08D5        BSR    LOWMID   Do the center again.
02227P 08CF 96   E0      A        LDA    LOWA     Finish with the low amplitude.
02228P 08D1 8D   05   08D8        BSR    LOWSND
02229P 08D3 20   F2   08C7        BRA    MORLON   Continue until interrupt routine
02230                      *    causes termination.
02231
02232P 08D5 86   7C      A LOWMID LDA    #&124!+PIABIT Output the center amplitude.
02233P 08D7 12                    NOP             NOP is to equalize the timing.
02234P 08D8 B7   0000    A LOWSND STA    PIA1AD   Output the amplitude.
02235P 08D9 AE   A4      A        LDX    ,Y       Get the delay from the table.
02236P 08DD 30   1F      A LOWSLP LEAX   -&1,X    Hold the amplitude.
02237P 08DF 26   FC   08DD        BNE    LOWSLP
02238P 08E1 39                    RTS
02239
02240P 08E2 8E   09F8    P HIOCT  LDX    #OCTH-&24 X:=pointer to table entry for
02241P 08E5 C6   0C      A        LDB    #&12     this note.
02242P 08E7 3D                    MUL
02243P 08E8 3A                    ABX
02244P 08E9 35   04      A        PULS   B
02245P 08EB 3A                    ABX
02246P 08EC 8D   1C   090A        BSR    CNTSET   SET UP THE DURATION COUNT.
02247P 08EE DD   E3      A        STD    DURCNT
02248P 08F0 8D   0C   08FE MORHIN BSR    HIMID    Center.
02249P 08F2 96   DF      A        LDA    HIGHA    High.
02250P 08F4 8D   0B   0901        BSR    HISND
02251  08F6 8D   06   08FE        BSR    HIMID    Center.
02252P 08F8 96   E0      A        LDA    LOWA     Low.
02253P 08FA 8D   05   0901        BSR    HISND
02254  08FC 20   F2   08F0        BRA    MORHIN
02255
02256P 08FE 86   7C      A HIMID  LDA    #&124!+PIABIT Center amplitude.
02257P 0900 12                    NOP
02258P 0901 B7   0000    A HISND  STA    PIA1AD
02259P 0904 A6   84      A        LDA    ,X
02260P 0906 4A             HISLP  DECA
02261P 0907 26   FD   0906        BNE    HISLP
02262P 0909 39                    RTS
02263
02264P 090A C6   FE      A CNTSET LDB    #&255
02265P 090C 96   E5      A        LDA    DOTFLG   Dotted note?
02266P 090E 27   05   0915        BEQ    CNTSRT   No.
02267P 0910 8B   02      A        ADDA   #&2      Yes, map 1 to 3 to get 3/2 note value.
02268P 0912 3D                    MUL
02269P 0913 44                    LSRA
02270P 0914 56                    RORB
02271P 0915 39             CNTSRT RTS
02272

PAGE  028  ECBGRP  .SA:1  TXRGRP MUSIC COMMAND

02274                      * THIS ROUTINE READS THE NEXT CHARACTER FROM THE MUSIC STRING
02275P 0916 34   10      A FETCHR PSHS   X
02276P 0918 0D   D8      A FETCH2 TST    PSTLEN   NO MORE LEFT
02277P 091A 27   4D   0969        BEQ    PLYBAD   MUST BE AN ERROR
02278P 091C 9E   D9      A        LDX    PSTPTR   GO TO POSITION IN STRING
02279P 091E A6   80      A        LDA    ,X+      PICK UP CHARACTER
02280P 0920 9F   D9      A        STX    PSTPTR   UPDATE POINTER
02281P 0922 0A   D8      A        DEC    PSTLEN   AND LENGTH
02282P 0924 81   20      A        CMPA   #'       SKIP SPACES EVERYWHERE
02283P 0926 27   F0   0918        BEQ    FETCH2
02284P 0928 35   90      A        PULS   X,PC
02285
02286P 092A 80   EA   0916 PLYARG BSR    FETCHR   GET CHAR AFTER VARIABLE NAME CHAR
02287P 092C 81   2B      A        CMPA   #'+      CHECK FOR INCREMENT CASE
02288P 092E 27   3C   096C        BEQ    INCVAR
02289P 0930 81   2D      A        CMPA   #'-      CHECK FOR DECREMENT CASE
02290P 0932 27   3C   0970        BEQ    DECVAR
02291P 0934 81   3E      A        CMPA   #&62     CHECK FOR GREATER
02292P 0936 27   42   097A        BEQ    DBLVAR
02293P 0938 81   3C      A        CMPA   #&60     CHECK FOR LESS THAN
02294P 093A 27   39   0975        BEQ    HLFVAR
02295P 093C 81   3D      A PLYVAL CMPA   #'=      USE VARIABLE NAME?
02296P 093E 27   3F   097F        BEQ    VARGET
02297P 0940 BD   0000    A        JSR    ISDIGC
02298P 0943 25   24   0969        BCS    PLYBAD
02299P 0945 5F                    CLRB            START CONSTANT VALUE AT 0
02300P 0946 80   30      A PLYNLP SUBA   #'0      OFFSET BY ASCII 0
02301P 0948 97   D7      A        STA    PDIGIT
02302P 094A 86   0A      A        LDA    #&10
02303P 094C 3D                    MUL             MULTIPLY OLD VALUE BY 10
02304P 094D 4D                    TSTA            SHOULDNT FLOW INTO HIGH BYTE
02305P 094E 26   19   0969        BNE    PLYBAD   ERROR IF SO
02306P 0950 DB   D7      A        ADDB   PDIGIT   BRING IN NEW DIGIT
02307P 0952 25   15   0969        BCS    PLYBAD   AGAIN SHOJLDNT OVERFLOW
02308P 0954 0D   D8      A        TST    PSTLEN   End of string?
02309P 0956 27   17   096F        BEQ    PLYRTS   Yes, quit scanning value.
02310P 0958 BD   0916    P        JSR    FETCHR   READ NEXT CHARACTER
02311P 095B BD   0000    A        JSR    ISDIGC   MAKE SURE NEXT CHAR IS DIGIT
02312P 095E 24   E6   0946        BCC    PLYNLP   ITEARATE READING DIGITS
02313P 0960 0C   DB      A FETBAK INC    PSTLEN   PUT BACK TERMINATOR
02314P 0962 9E   D9      A        LDX    PSTPTR   AND REREAD OLD CHARACTER
02315P 0964 30   1F      A        LEAX   -&1,X
02316P 0966 9F   D9      A        STX    PSTPTR
02317P 0968 39                    RTS
02318P 0969 7E   0000      PLYBAD JMP    FCERR
02319P 096C 5C             INCVAR INCB            PLUS ONE FROM "+"
02320P 096D 27   FA   0969        BEQ    PLYBAD
02321P 096F 39             PLYRTS RTS
02322P 0970 5D             DECVAR TSTB            SEE IF 0 ALREADY
02323P 0971 27   F6   0969        BEQ    PLYBAD
02324P 0973 5A                    DECB
02325P 0974 39                    RTS
02326P 0975 5D             HLFVAR TSTB
02327P 0976 27   F1   0969        BEQ    PLYBAD
02328P 0978 54                    LSRB
02329P 0979 39                    RTS
02330P 097A 5D             DBLVAR TSTB            ALREADY GREATER THAN 127?
02331P 097B 2B   EC   0969        BMI    PLYBAD

PAGE  029  ECBGRP  .SA:1  TXRGRP MUSIC COMMAND

02332P 097D 58                    LSLB            MULTIPLY BY 2
02333P 097E 39                    RTS
02334P 097F 34   60      A VARGET PSHS   U,Y      SAVE VARIABLE AND TABLE POINTERS
02335P 0981 8D   16   0999        BSR    VARSUB   GO SCAN VARIABLE AND LOOK IT UP
02336P 0983 BD   0000    A        JSR    CONINT   MAKE IT AN INTEGER IN [B]
02337P 0986 35   E0      A        PULS   U,Y,PC   RESTORE POINTERS AND RETURN
02338
02339P 0988 BD   0999    P PXCUTR JSR    VARSUB   READ NAME AND LOOK UP
02340P 098B C6   02      A        LDB    #&2      MAKE SURE ROOM ON STACK
02341P 098D BD   0000    A        JSR    GETSTK
02342P 0990 D6   D8      A        LDB    PSTLEN   SAVE CURRENT SCAN POSITION AND LENGTH
02343P 0992 9E   D9      A        LDX    PSTPTR
02344P 0994 34   14      A        PSHS   B,X      SAVE FOR RESTORING
02345P 0996 7E   07B0    A        JMP    PLYSC4   CALL FRESTR WITH NEW STRING
02346
02347P 0999 9E   D9      A VARSUB LDX    PSTPTR   REMEMBER CURRENT POSITION SO PTRGET
02348P 099B 34   10      A        PSHS   X        CAN SCAN NAME
02349P 099D BD   0916    P        JSR    FETCHR   GET FIRST CHARACTER OF NAME
02350P 09A0 BD   0000    A        JSR    ISLETC   HAVE TO BE ALPHABETIC
02351P 09A3 25   C4   0969        BCS    PLYBAD
02352P 09A5 BD   0916    P VARSLP JSR    FETCHR   SKIP TO NEXT CHARACTER
02153P 09A8 81   3B      A        CMPA   #SEMCOL
02354P 09AA 26   F9   09A5        BNE    VARSLP   SKIP UNTIL ";" ENDS NAME
02355P 09AC 35   10      A        PULS   X        GET STARTING POSITION
02356P 09AE DE   A6      A        LDU    TXTPTR   SAVE PLAY STATEMENT TXTPTR
02357P 09B0 34   40      A        PSHS   U
02358P 09B2 9F   A6      A        STX    TXTPTR
02359P 09B4 8D   0000    A        JSR    ISVAR    SCAN NAME AND MOVE INTO FAC
02360P 09B7 35   10      A        PULS   X        GET BACK OLD TEXT POINTER
02361P 09B9 9F   A6               STX    TXTPTR
02362P 09BB 39                    RTS

PAGE  030  ECBGRP  .SA:1  TXRGRP MUSIC COMMAND

02364                      *
02365                      * The interrupt routine to handle note timing.
02366                      *
02367
02368                             XDEF   PLYCLK
02369P 09BC 4F             PLYCLK CLRA            Clear the direct page register.
02370P 09BD 1F   8B      A        TFR    A,DP
02371P 09BF DC   E3      A        LDD    DURCNT   Are we PLAYing a note?
02372P 09C1 1027 F63B    A        LBEQ   SNDCLK   No, go handle SOUND clocking.
02373P 09C5 93   D5      A        SUBD   DURSUB   Yes, update the duration count.
02374P 09C7 DD   E3      A        STD    DURCNT
02375P 09C9 22   0D   09D8        BHI    PLYRTI   Hold the note.
02376P 09CB 0F   E3      A        CLR    DURCNT   Clear the count to indicate that the
02377P 09CD 0F   E4      A        CLR    DURCNT+&1 note is finished.
02378P 09CF 35   02      A        PULS   A        Get stacked CC register into A.
02379P 09D1 10EE 67               LDS    &7,S     Clear all garbage from the stack.
02380                      *    (The stacked U is marking the stack.)
02361P 09D4 84                    ANDA   #@177    Clear the Entire bit and restack the
02382P 09D6 34   02      A        PSHS   A        CCs.
02383P 09D8                PLYRTI RTI             Return from the interrupt.
02384

PAGE  031  ECBGRP  .SA:1  TXRGRP MUSIC COMMAND

02386
02387P 09D9      0A      A NOTETB FCB    &10      A
02388P 09DA      0C      A        FCB    &12      B
02389P 09DB      01      A        FCB    &1       C
02390P 09DC      03      A        FCB    &3       D
02391P 09DD      05      A        FCB    &5       E
02392P 09DE      06      A        FCB    &6       F
02393P 09DF      08      A        FCB    &8       G

PAGE  032  ECBGRP  .SA:1  TXRGRP MUSIC COMMAND

02395                      *
02395                      * Low octave table.
02397                      *
02398
02399P 09E0      01A8    A OCTL   FDB    &424
02400P 09E2      0190    A        FDB    &400
02401P 09E4      017A    A        FDB    &378
02402P 09E6      0164    A        FDB    &356
024032 09E8      0150    A        FDB    &336
02404P 09EA      013D    A        FDB    &317
02405P 09EC      012B    A        FDB    &299
02406P 09EE      011A    A        FDB    &282
02407P 09F0      010A    A        FDB    &266
02408P 09F2      00FB    A        FDB    &251
02409P 09F4      00ED    A        FDB    &237
02410P 09F6      00DF    A        FDB    &223
02411
02412P 09F8      00D3    A        FDB    &211
02413P 09FA      00C7    A        FDB    &199
02414P 09FC      00BB    A        FDB    &187
02415P 09FE      00B1    A        FDB    &177
02416P 0A00      00A6    A        FDB    &166
02417P 0A02      009D    A        FDB    &157
02418P 0A04      0094    A        FDB    &148
02419P 0A06      008B    A        FDB    &139
02420P 0A08      0083    A        FDB    &131
02421P 0A0A      007C    A        FDB    &124
02422P 0A0C      0075    A        FDB    &117
02423P 0A0E      006E    A        FDB    &110

PAGE  033  ECBGRP  .SA:1  TXRGRP MUSIC COMMAND

02425                      *
02426                      * The high octave table.
02427                      *
02428
02429P 0A10      A6      A OCTH   FCB    &166
02430P 0A11      9C      A        FCB    &156
02431P 0A12      93      A        FCB    &147
02432P 0A13      8B      A        FCB    &139
02433P 0A14      83      A        FCB    &131
02434P 0A15      7B      A        FCB    &123
02435P 0A16      74      A        FCB    &116
02436P 0A17      6D      A        FCB    &109
02437P 0A18      67      A        FCB    &103
02438P 0A19      61      A        FCB    &97
02439P 0A1A      5B      A        FCB    &91
02440P 0A1B      56      A        FCB    &86
02441
02442P 0A1C      51      A        FCB    &81
02443P 0A1D      4C      A        FCB    &76
02444P 0A1E      47      A        FCB    &71
02445P 0A1F      43      A        FCB    &67
02446P 0A20      3F      A        FCB    &63
02447P 0A21      3B      A        FCB    &59
02448P 0A22      37      A        FCB    &55
02449P 0A23      34      A        FCB    &52
02450P 0A24      31      A        FCB    &49
02451P 0A25      2E      A        FCB    &46
02452P 0A26      2B      A        FCB    &43
02453P 0A27      28      A        FCB    &40
02454
02455P 0A28      26      A        FCB    &38
02456P 0A29      23      A        FCB    &35
02457P 0A2A      21      A        FCB    &33
02458P 0A2B      1F      A        FCB    &31
02459P 0A2C      1D      A        FCB    &29
02460P 0A2D      1B      A        FCB    &27
02461P 0A2E      19      A        FCB    &25
02462P 0A2F      18      A        FCB    &24
02463P 0A30      16      A        FCB    &22
02464P 0A31      14      A        FCB    &20
02465P 0A32      13      A        FCB    &19
02466P 0A33      12      A        FCB    &18
02467
02468                             TTL    DRAW COMMAND
02469
02470                             XDEF   DRAW
02471P 0A34 9E   8A      A DRAW   LDX    DBLZER   MAKE DUMMY ENTRY
02472P 0A36 C6   01      A        LDB    #&1
02473P 0A38 34   14      A        PSHS   B,X      SO EXECUTE WILL STOP ITERATION
02474P 0A3A D7   C2      A        STB    SETFLG   Set up to use foreground color.
02475P 0A3C 9F   D5      A        STX    DRWFL1   DRWFL1:=DRWFL2:=0.
02476P 0A3E BD   030B    P        JSR    DEFCOL   DEFAULT BY SETTING UP ACTCLR AND ACTCLE
02477P 0A41 BD   0000    A        JSR    FRMEVL   EVALUATE THE STRING ARG
02478P 0A44 BD   0000    A DRWSC4 JSR    FRESTR   FREE UP THE STRING AND SET [B] & [X]
02479P 0A47 20   08   0A51        BRA    DRWSET
02580
02481P 0A49 BD   0916    P FTCHVL JSR    FETCHR   Read next char into A.
02482P 0A4C 7E   093C    P        JMP    PLYVAL   Go scan the value.

PAGE  034  ECBGRP  .SA:1  TXRGRP DRAW COMMAND

02483
02484P 0A4F 35   14      A DRWCON PULS   B,X      GO BACK UP ONE LEVEL OF EXECUTE
02485P 0A51 D7   D8      A DRWSET STB    PSTLEN   STORE THE LENGTH
02486P 0A53 27   FA   0A4F        BEQ    DRWCON   Don't check for zero pointer if
02487                      *    string is null since pointer is
02488                      *    meaningless.
02489P 0A55 9F   D9      A        STX    PSTPTR   STORE THE LOCATION
02450P 0A57 1027 00EA 0B45        LBEQ   DRWRTS
02491P 0A5B 0D   D8      A DRWSCN TST    PSTLEN   AT THE END OF THIS STRING?
02492P 0A5D 27   F0   0A4F        BEQ    DRWCON   SEE IF NESTED IN EXECUTE
02493P 0A5F BD   0916    P        JSR    FETCHR   GET THE NEXT CHARACTER
02454P 0A62 81   3B      A        CMPA   #SEMCOL  IGNORE SEMICOLONS
02495P 0A64 27   F5   0A5B        BEQ    DRWSCN
02496P 0A66 81   27      A        CMPA   #''      IGNORE SINGLE QUOTE
02497P 0A68 27   F1   0A5B        BEQ    DRWSCN
02458P 0A6A 81   4E      A        CMPA   #'N      IS IT NO MOVE DRAW?
02495P 0A6C 26   04   0A72        BNE    DRWSC1
02500P 0A6E 03   D5      A        COM    DRWFL1
02501P 0A70 20   E9   0A5B        BRA    DRWSCN
02502P 0A72 81   42      A DRWSC1 CMPA   #'B
02503P 0A74 26   04   0A7A        BNE    DRWSC2
02504P 0A76 03   D6      A        COM    DRWFL2
02505P 0A78 20   E1   0A5B        BRA    DRWSCN
02506P 0A7A 81   58      A DRWSC2 CMPA   #'X      IS IT EXECUTE?
02507P 0A7C 1027 0096 0B16        LBEQ   DXCUTR   GO SCAN NAME AND START SUBSTRING
02506P 0A80 81   4D      A        CMPA   #'M      CHECK FOR MOVE COMMAND
02505P 0A82 1027 012A 0BB0        LBEQ   DDRWMV
02510P 0A86 34   02      A        PSHS   A
02511P 0A88 C6   01      A        LDB    #&1      All arguments default to 1.
02512P 0A8A 0D   D8      A        TST    PSTLEN   End of the string?
02513P 0A8C 27   11   0A9F        BEQ    DEFONE   Yes, use the default arg.
02514P 0A8E BD   0916    P        JSR    FETCHR   No, look ahead at the char following
02515                      *    the command letter.
02516P 0A91 BD   0000    A        JSR    ISLETC   Clear the carry if it is a letter.
02517P 0A94 34   01      A        PSHS   CC       Remember if it's a letter.
02516P 0A96 BD   0960    P        JSR    FETBAK   Put the pointer back.
02519P 0A99 35   01      A        PULS   CC       Is the next thing a letter?
02520P 0A9B 24   02   0A9F        BCC    DEFONE   Yes, it must be another command rather
02521                      *    than an argument for the current
02522                      *    command so use the default arg.
02523P 0A9D 8D   AA   0A49        BSR    FTCHVL   No, READ ARGUMENT INTO [B]
02524P 0A9F 35   02      A DEFONE PULS   A        SEE WHAT THE COmMAND WAS
02525P 0AA1 81   43      A        CMPA   #'C
02526P 0AA3 27   28   0ACD        BEQ    DDRWCL
02527P 0AA5 81   41      A        CMPA   #'A
02528P 0AA7 27   2E   0AD7        BEQ    DDRWAN
02529P 0AA9 81   53      A        CMPA   #'S
02530P 0AAB 27   32   0ADF        BEQ    DDRWSC
02531P 0AAD 81   55      A        CMPA   #'U
02532P 0AAF 27   5C   0B0D        BEQ    DDRWUP
02533P 0AB1 81   44      A        CMPA   #'D
02534P 0AB3 27   55   0B0A        BEQ    DDRWDN
02535P 0AB5 81   4C      A        CMPA   #'L
02536P 0AB7 27   4C   0B05        BEQ    DDRWLF
02537P 0AB9 81   52      A        CMPA   #'R
02536P 0ABB 27   43   0B00        BEQ    DDRWRG
02539P 0ABD 80   45      A        SUBA   #'E      Right and up.
02540P 0ABF 27   2F   0AF0        BEQ    DDRWRU

PAGE  035  ECBGRP  .SA:1  TXRGRP DRAW COMMAND

02541P 0AC1 4A                    DECA            Right and down.
02542P 0AC2 27   27   0AEB        BEQ    DDRWRD
02543P 0AC4 4A                    DECA            Left and down.
02544P 0AC5 27   32   0AF9        BEQ    DDRWLD
02545P 0AC7 4A                    DECA            Left and up.
02546P 0AC8 27   1D   0AE7        BEQ    DDRWLU
02547P 0ACA 7E   0000    A G3FCER JMP    FCERR    SAVE SOME LONG BRANCHES
02548P 0ACD BD   02CE    P DDRWCL JSR    GETCLX   SCAN COLOR NUMBER
02549P 0AD0 D7   B2      A        STB    FORCLR   SET UP AS FOREGROUND
02550P 0AD2 BD   030B    P        JSR    DEFCOL   SET UP ACTCLR AND ACTCLE
02551P 0AD5 20   84   0A5B GODSCN BRA    DRWSCN   CONTINUE SCANNING
02552P 0AD7 C1   04      A DDRWAN CMPB   #&4      ONLY ALLOW 4 ANGLES
02553P 0AD9 24   EF   0ACA        BCC    G3FCER
02554P 0ADB D7   E8      A        STB    DRWANG
02555P 0ADD 20   F6   0AD5        BRA    GODSCN
02556P 0ADF C1   3F      A DDRWSC CMPB   #&63    ONLY ALLOW SCALE UP TO 63
02557P 0AE1 24   E7   0ACA        BCC    G3FCER
02558P 0AE3 D7   E9      A        STB    DRWSCL
02559P 0AE5 20   EE   0AD5        BRA    GODSCN
02560
02561P 0AE7 4F             DDRWLU CLRA            Make X and Y both negative
02562P 0AE8 8D   58   0B42        BSR    NEGDB    to go left and up.
02563P 0AEA      21      A        FCB    @41      (BRN over CLRA.)
02564P 0AEB 4F             DDRWRD CLRA            Make both X and Y positive to
02565P 0AEC 1F   01      A        TFR    D,X      go right and down.
02566P 0AEE 20   59   0B49        BRA    DODRAW
02567
02568P 0AF0 4F             DDRWRU CLRA            Make X positive, Y negative to
02569P 0AF1 1F   01      A        TFR    D,X      go right and up.
02570P 0AF3 8D   4D   0B42        BSR    NEGDB
02571P 0AF5 lE   01      A        EXG    D,X
02572P 0AF7 20   50   0B49        BRA    DODRAW
02573
02574P 0AF9 4F             DDRWLD CLRA            Make X negative, Y positive to
02575P 0AFA 1F   01      A        TFR    D,X      go left and down.
02576P 0AFC 8D   44   0B42        BSR    NEGDB
02577P 0AFE 20   49   0B49        BRA    DODRAW
02578
02579P 0B00 4F             DDRWRG CLRA            SET UP [D] AS X
02580P 0B01 9E   8A      A DDRWXG LDX    DBLZER   AND [X] AND Y
02581P 0B03 20   44   0B49        BRA    DODRAW
02582P 0B05 4F             DDRWLF CLRA
02583P 0B06 8D   3A   0B42        BSR    NEGDB
02584P 0B08 20   F7   0B01        BRA    DDRWXG   SET Y TO ZERO
02585P 0B0A 4F             DDRWDN CLRA
02586P 0B0B 20   03   0B10        BRA    DDRWYG
02587P 0B0D 4F             DDRWUP CLRA
02586P 0B0E 8D   32   0B42        BSR    NEGDB
02589P 0B10 9E   8A      A DDRWYG LDX    DBLZER
02590P 0B12 1E   10      A        EXG    X,D
02591P 0B14 20   33   0B49        BRA    DODRAW
02592P 0B16 BD   0999    P DXCUTR JSR    VARSUB   READ NAME AND LOOK UP
02593P 0B19 C6   02      A        LDB    #&2      MAKE SURE ROOM ON STACK
02594P 0B1B BD   0000    A        JSR    GETSTK
02595P 0B1E D6   D8      A        LDB    PSTLEN   SAVE CURRENT SCAN POSITION AND LENGTH
02596P 0B20 9E   D9      A        LDX    PSTPTR
02597P 0B22 34   14      A        PSHS   B,X      SAVE FOR RESTORING
02598P 0B24 7E   0A44    P        JMP    DRWSC4   CALL FRESTR WITH NEW STRING

PAGE  036  ECBGRP  .SA:1  TXRGRP DRAW COMMAND

02599                      *
02600                      * THIS ROUTINE MULTIPLIES [X] BY DRWSCL AND RETURNS IN [D]
02601                      * WHEN DRWSCL IS ZERO NOTHING IS DONE. OTHERWISE WE DIVIDE BY
02602                      * FOUR AFTER THE MULTIPLY.
02603                      *
02604P 0B27 D6   E9      A DMULSB LDB    DRWSCL   GET THE SCALE
02605P 0B29 27   1B   0B46        BEQ    DRWSC9   MOVE RESULT TO [D] AND EXIT
02606P 0B2B 4F                    CLRA            SET UP TO MULTIPLY [D] BY [X]
02607P 0B2C 1E   01      A        EXG    D,X      Find out and remember if X is
02608P 0B2E A7   E2      A        STA    ,-S      negative.
02609P 0B30 2A   02   0B34        BPL    POSMUL   It isn't.
02610P 0B32 8D   0D   0B41        BSR    NEGD     It is, negate it.
02611P 0B34 BD   0D33    P POSMUL JSR    ML1632   GET 32 BIT RESULT IN [Y,U]
02612P 0B37 1F   30      A        TFR    U,D      MOVE RESULT INTO [D]
02613P 0B39 44                    LSRA            AND DIVIDE BY 4 (Unsigned)
02614P 0B3A 56                    RORB
02615P 0B3B 44                    LSRA
02616P 0B3C 56                    RORB
02617P 0B3D 6D   E0      A        TST    ,S+      Negate if it was originally negative.
02618P 0B3F 2A   04   0B45        BPL    DRWRTS
02619P 0B41 40             NEGD   NEGA
02620P 0B42 50             NEGDB  NEGB
02621P 0B43 82   00      A        SBCA   #&0
02622P 0B45 39             DRWRTS RTS
02623P 0B46 1F   10      A DRWSC9 TFR    X,D
02624P 0B46 39                    RTS
02625                      *
02626                      * DODRAW ACTUALLY DOES THE DRAWING WORK
02627                      * X OFFSET IS IN [D] AND Y OFFSET IS IN [X]
02628                      * FIRST WE SCALE, THEN WE DO ANGLE, THEN WE
02629                      * COMPUTE TARGET POINT AND RANGE CHECK, THEN
02630                      * WE STORE THE NEW END POINT
02631                      *
02632P 0B49 34   06      A DODRAW PSHS   D        SAVE X OFFSET
02633P 0B4B 8D   DA   0B27        BSR    DMULSB   SCALE Y VALUE IN [X]
02634P 0B4D 35   10      A        PULS   X        GET BACK X OFFSET IN [X]
02635P 0B4F 34   06      A        PSHS   D        SAVE Y SCALED VALUE
02636P 0B51 8D   D4   0B27        BSR    DMULSB   COMPUTE SCALED X INTO [D]
02637P 0B53 35   10      A        PULS   X        GET BACK SCALED Y IN [X]
02638P 0B55 109E E8      A        LDY    DRWANG   Put angle count on top of stack.
02639P 0B58 34   20      A        PSHS   Y        (Don't care about low order byte.)
02640P 0B5A 6D   E4      A DRWANL TST    ,S       HAVE 90 DEGREE ROTATE COUNT RUN OUT?
02641P 0B5C 27   08   0B66        BEQ    DRWAFN   DONE WITH ANGLE EXCEPT ASPECT RATIO
02642P 0B5E 1E   10      A        EXG    X,D      FOR EVERY 90 DEGREES WE EXCHANGE X AND Y
02643P 0B60 8D   DF   0B41        BSR    NEGD     AND NEGATE THE NEW X
02644P 0B62 6A   E4      A        DEC    ,S       UPDATE ANGLE 90 DEGREE COUNT
02645P 0B64 20   F4   0B5A        BRA    DRWANL   AND LOOP DOING ROTATE
02646
02647P 0B66 35   20      A DRWAFN PULS   Y        Get rid of the angle count.
0648P  0B68 DE   8A      A        LDU    DBLZER   In case beyond right margin.
02649P 0B6A D3   C7      A        ADDD   LSAVEX   Add in the current position.
02650P 0B6C 2B   02   0B70        BMI    MINX     Force to right margin.
02651P 0B6E 1F   03      A        TFR    D,U      Put target X position into U.
02652P 0B70 1F   10      A MINX   TFR    X,D      Put Y offset into D.
02653P 0B72 9E   8A      A        LDX    DBLZER   In case beyond top of screen.
02654P 0B74 D3   C9      A        ADDD   LSAVEY   Add in the current position.
02655P 0B76 2B   02   0B7A        BMI    DRWABS   Force to top of screen.
02656P 0B78 1F   01      A        TFR    D,X      Put target Y position into X.

PAGE  037  ECBGRP  .SA:1  TXRGRP DRAW COMMAND

02657P 0B7A 1183 0100    A DRWABS CMPU   #CXMAX   CHECK X RANGE
02658P 0B7E 25   03   0B83        BCS    DRWXOK
02659P 0B80 CE   00FF    A        LDU    #CXMAX-&1
02660P 0B83 8C   00C0    A DRWXOK CMPX   #CYMAX   CHECK Y RANGE
02661P 0B86 25   03   0B8B        BCS    DRWYOK
02662P 0B88 8E   00BF    A        LDX    #CYMAX-&1
02663P 0B8B DC   C7      A DRWYOK LDD    LSAVEX   SET UP START POINT OF DRAW
02664P 0B8D DD   BD      A        STD    XSTORE
02665P 0B8F DC   C9      A        LDD    LSAVEY
02666P 0B91 DD   BF      A        STD    YSTORE
02667P 0B93 9F   C5      A        STX    Y2STOR   SET UP END POINT
02668P 0B95 DF   C3      A        STU    X2STOR
02669P 0B97 0D   D5      A        TST    DRWFL1   DO WE UPDATE CURRENT POINT?
02670P 0B99 26   04   0B9F        BNE    DRWNSV   MUST HAVE USED "N" OPTION
02671P 0B9B 9F   C9      A        STX    LSAVEY
02672P 0B9D DF   C7      A        STU    LSAVEX   UPDATE CURRENT POSITION
02673P 0B9F BD   0191    P DRWNSV JSR    GSCAL2   SCALE BOTH BEFORE DRAWING
02674P 0BA2 0D   D6      A        TST    DRWFL2   SEE IF SHOULD DRAW ("B" OPTION)
02675P 0BA4 26   03   0BA9        BNE    DRWNLN   IF SET THEN NO LINE
02676P 0BA6 BD   0212    P        JSR    LINGEN   ACTUALLY DO THE DRAW
02677P 0BA9 0F   D5      A DRWNLN CLR    DRWFL1   CLEAR THE FLAGS
02678P 0BAB 0F   D6      A        CLR    DRWFL2
02679P 0BAD 7E   0A5B    P        JMP    DRWSCN   GO BACK AND CONTINUE DRAW SCAN
02680                      *
02681                      * HERE ON M COMMAND
02682                      * ARGUMENT IS +-X,+-Y
02683                      * IF X HAS A + OR - IT IS A RELATIVE MOVE
02684                      * OTHERWISE IT IS AN ABSOLUTE MOVE
02685                      *
02686P 0BB0 BD   0916    P DDRWMV JSR    FETCHR   LOOK AT FIRST CHARACTER
02687P 0BB3 34   02      A        PSHS   A        SAVE FOR END TO CHECK ABSOLUTE
02688P 0BB5 BD   0BDC    P        JSR    SGNVL2   SCAN X VALUE
02689P 0BB8 34   06      A        PSHS   D        SAVE X VALUE
02690P 0BBA BD   0916    P        JSR    FETCHR   LOOK AT TERMINATOR
02691P 0BBD 81   2C      A        CMPA   #COMMA   MUST BE COMMA
02692P 0BBF 1026 FF07 0ACA        LBNE   G3FCER   FUNCTION CALL ERROR IF NOT
02693P 0BC3 BD   0BD9    P        JSR    SGNVAL   READ Y VALUE
02694P 0BC6 1F   01      A        TFR    D,X      MOVE Y VALUE INTO [X]
02695P 0BC8 35   40      A        PULS   U        GET X VALUE INTO [U]
02696P 0BCA 35   02      A        PULS   A        GET BACK FIRST CHARACTER
02697P 0BCC 81   2B      A        CMPA   #'+      SEE IF IT WAS PLUS
02698P 0BCE 27   04   0BD4        BEQ    MOVREL   IF SO MUST BE RELATIVE MOVE
02699P 0BD0 81   2D      A        CMPA   #'-      CHECK FOR NEGATIVE
02700P 0BD2 26   A6   0B7A        BNE    DRWABS   GO DO ABSOLUTE DRAW
02701P 0BD4 1F   30      A MOVREL TFR    U,D      GO TO DODRAW WITH X=[D] Y=[X]
02702P 0BD6 7E   0B49    P        JMP    DODRAW   DO RELATIVE DRAW
02703                      *
02704                      * READ SIGNED VALUE INTO [D] FROM CURRENT POSITION
02705                      *
02706P 0BD9 BD   0916    P SGNVAL JSR    FETCHR   READ FIRST CHACRACTER
02707P 0BDC 81   2B      A SGNVL2 CMPA   #'+      SEE IF SIGNED
02708P 0BDE 27   07   0BE7        BEQ    SGNPLS
02709P 0BE0 81   2D      A        CMPA   #'-       SEE IF SIGNED NEGATIVE
02710P 0BE2 27   04   0BE8        BEQ    SGNMIN
02711P 0BE4 BD   0960    P        JSR    FETBAK   IF NOT SIGN, RESCAN CHARACTER
02712P 0BE7 4F             SGNPLS CLRA            INDICATE NO NEGATE
02713P 0BE8 34   02      A SGNMIN PSHS   A        SAVE FLAG
02714P 0BEA BD   0A49    P        JSR    FTCHVL   GO GET VALUE IN [B]

PAGE  038  ECBGRP  .SA:1  TXRGRP DRAW COMMAND

02715P 0BED 35   02      A        PULS   A        LOOK AT FLAG
02716P 0BEF 4D                    TSTA            NOT NECESSARY???
02717P 0BF0 27   04   0BF6        BEQ    SGNRTS   IF NO NEGATE DONE
02718P 0BF2 4F                    CLRA
02719P 0BF3 50                    NEGB
02720P 0BF4 82   00      A        SBCA   #&0
02721P 0BF6 39             SGNRTS RTS
02722
02723                             TTL    MONITOR COMMAND - SIMPLE M G R D
02724
02725            0000    A        IFNE   &0
02904                       ENDC   IFN 0
02905
02906                             TTL    CIRCLE
02907
02908                      *
02909                      * THIS IS THE CIRCLE GENERATE TABLE.
02910                      * IT IS THE SINE AND COSINE OF 0 TO PI OVER 4
02911                      * IN 8 INTERVALS TO 16 BITS
02912                      * THE CONSTANTS ARE PLUS ONE SO 1.0 IS 0 AND 0 IS 65535
02913                      *
02914            0009    A NUMPNT EQU    &9
02915P 0BF7      0000    A CIRCTB FDB    &0       SPECIAL CASE FOR 1
02916P 0BF9      0001    A        FDB    &1       ZERO
02917P 0BFB      FEC5    A        FDB    &65221
02918P 0BFD      1919    A        FDB    &6425
02919P 0BFF      FB16    A        FDB    &64278
02920P 0C01      31F2    A        FDB    &12786
02921P 0C03      F4FB    A        FDB    &62715
02922P 0C05      4A51    A        FDB    &19025
02923P 0C07      EC84    A        FDB    &60548
02924P 0C09      61F9    A        FDB    &25081
02925P 0C0B      E1C7    A        FDB    &57799
02926P 0C0D      78AE    A        FDB    &30894
02927P 0C0F      D4DC    A        FDB    &54492
02928P 0C11      8E3B    A        FDB    &36411
02929P 0C13      C5E5    A        FDB    &50661
02930P 0C15      A269    A        FDB    &41577
02931P 0C17      B506    A        FDB    &46342
02932P 0C19      B506    A        FDB    &46342
02933
02934                      *
02935                      * CIRCLE (X,Y),RADIUS [,ATTRIBUTE [,ASPECT RATIO [,F FOR FILL OR N FOR
02936                      * NOT, [,START POS 0-1 [,END POS 0-1]]]]]
02937                      *
02938
02939                             XDEF   CIRCLE
02940P 0C1B 81   40      A CIRCLE CMPA   #'@      ALLOW @
02941P 0C1D 26   02   0C21        BNE    CNATSK
02942P 0C1F 9D   9F      A        JSR    CHRGET
02943P 0C21 BD   0293    P CNATSK JSR    STMAXS   UP MAX X AND Y IN XMAX AND YMAX
02944P 0C24 BD   0123    P        JSR    ONECRD   READ CENTER COORDINATE
02945P 0C27 BD   008E    P        JSR    GSCALE   SCALE CENTER
02946P 0C2A AE   C4      A        LDX    ,U       GET XSTORE
02947P 0C2C 9F   CB      A        STX    CNTRX    SET UP THE CENTER
02948P 0C2E AE   42      A        LDX    &2,U     GET YSTORE
02949P 0C30 9F   CD      A        STX    CNTRY
02950P 0C32 BD   0000    A        JSR    CHKCOM

PAGE  039  ECBGRP  .SA:1  TXRGRP CIRCLE

02951P 0C35 BD   0000    A        JSR    EVLADR   READ THE RADIUS
02952P 0C38 CE   00CF    A        LDU    #RADIUS  POINT TO STORAGE LOCATION
02953P 0C3B AF   C4      A        STX    ,U       SET IT UP
02954P 0C3D BD   0091    P        JSR    GSCALC   SCALE AS AN XCOUNT
02955                      *    ASPECT IS ALSO SCALED BUT NO AFFECT
02956P 0C40 86   01      A        LDA    #&1      SETUP AS PSET
02957P 0C42 97   C2      A        STA    SETFLG
02558P 0C44 BD   02F2    P        JSR    CMCOLR
02959P 0C47 8E   0100    A        LDX    #&256    ASSUME ASPECT RATIO OF 1.0
02960P 0C4A 9D   A5      A        JSR    CHRGOT   SEE IF STATEMENT ENDED
02961P 0C4C 27   0F   0C5D        BEQ    CASPCT   SO STORE DEFAULT ASPECT RATIO
02962P 0C4E BD   0000    A        JSR    CHKCOM
02963P 0C51 BD   0000    A        JSR    FRMNUM   EVALUATE THE FORMULA
02964P 0C54 96   4F      A        LDA    FACEXP   QUICK MULTIPLY BY 256
02965P 0C56 8B   08      A        ADDA   #&8
02566P 0C58 97   4F      A        STA    FACEXP
02967P 0C5A BD   0000    A        JSR    GETADR   FORCE TO A 16 BIT INT IN X
02968P 0C5D 96   B6      A CASPCT LDA    SCMODE   SCALE BY SCMODE TO COMPENSATE FOR X Y RATIO
02969P 0C5F 85   02      A        BITA   #&2      CHECK IF MODE 2 OR 3
02970P 0C61 27   04   0C67        BEQ    CSTASP   IF NOT, ASPECT RATIO IS CORRECT
02971P 0C63 1F   10      A        TFR    X,D      MULTIPLY X BY 2
02972P 0C65 30   8B      A        LEAX   D,X
02973P 0C67 9F   D1      A CSTASP STX    ASPECT
02974            0000    A        IFNE   &0
02985                       ENDC   IFN 0
02986P 0C69 C6   01      A CSTFLG LDB    #&1      TELL GRAPHICS CODE WE ARE SETTING
02987P 0C6B D7   C2      A        STB    SETFLG
02988P 0C6D D7   D8      A        STB    CSTRFL   INDICATE JUST START
02939P 0C6F BD   0D60    P        JSR    CPOSSB   SCAN FOR POSSIBLE LENGTH OF CIRCLE
02990P 0C72 34   06      A        PSHS   D        SAVE START POSITION
02991P 0C74 BD   0060    P        JSR    CPOSSB   SCAN FOR POSSIBLE START POSITION
02592P 0C77 DD   D9      A        STD    CENDPS   STORE END POSITION
02993P 0C79 35   06      A        PULS   D        GET BACK START POSITION
02994                      *
02995                      * NOW WE GENERATE THE APPROXIMATION POINTS FOR THE CIRCLE
02996                      * BY USING A TABLE FOR THE EIGHT OF A CIRCLE AND MODIFYING THE POINT
02997                      *
02598                      *    [A]=QUADRANT COUNT (0 TO 7)
02999                      *    [B]=POINT IN QUADRANT (0 TO NUMPNT-1)
03000P 0C7B 34   06      A CQUADL PSHS   D        RESAVE COUNTERS ON STACK
03001P 0C7D 9E   C3      A        LDX    X2STOR   MOVE NEW POINT TO OLD POINT
03002P 0C7F 9F   BD      A        STX    XSTORE
03003P 0C81 9E   C5      A        LDX    Y2STOR
03004P 0C83 9F   BF      A        STX    YSTORE
03005P 0C85 CE   0BF9    P        LDU    #CIRCTB+&2 INDEX TABLE WITH FACTORS
03006                      *    LOOK AT QUADRANT TO SEE IF NEED TO SWITCH
03007P 0C88 84   01      A        ANDA   #&1      DIRECTIONS. DESIRED FOR 1,3,5,7
03008P 0C8A 27   03   0C8F        BEQ    CPNXC3
03009P 0C8C 50                    NEGB
03010P 0C8D CB   08      A        ADDB   #NUMPNT-&1
03011P 0C8F 58             CPNXC3 LSLB            EACH ENTRY IS 2 2BYTE NUMBERS
03012P 0C90 58                    LSLB
03013P 0C91 33   C5      A        LEAU   B,U      POINT AT YFACTOR
03014P 0C93 34   40      A        PSHS   U        SAVE FOR XFACTOR
03015P 0C95 BD   0D25    P        JSR    RADMUL   MULTIPLY BY RADIUS
03016                      *    TO GET VALUE IN [X]
03017P 0C98 35   40      A        PULS   U        GET BACK THE POINTER
03018P 0C9A 33   5E      A        LEAU   -&2,U    POINT AT X FACTOR

PAGE  040  ECBGRP  .SA:1  TXRGRP CIRCLE

03019P 0C9C 34   10      A        PSHS   X        SAVE Y VALUE
03020P 0C9E BD   0D25    P        JSR    RADMUL   GET X VALUE IN [X]
03021P 0CA1 35   20      A        PULS   Y        NOW Y IS IN [Y]
03022P 0CA3 A6   E4      A        LDA    ,S       GET QUADRANT TO SEE IF SWAP X AND Y
03023                      *    DESIRED FOR 1,2,5 AND 6
03024P 0CA5 84   03      A        ANDA   #&3      MAP TO 0,1,2,3
03025P 0CA7 27   06   0CAF        BEQ    CPNXCH   NO SWAP FOR 0 AND 4
03026P 0CA9 81   03      A        CMPA   #&3
03027P 0CAB 27   02   0CAF        BEQ    CPNXCH   NO SWAP FOR 3 AND 7
03028P 0CAD 1E   12      A        EXG    X,Y      SWAP X AND Y
03029P 0CAF 9F   C3      A CPNXCH STX    X2STOR   STORE X OFFSET
03030P 0CB1 1F   21      A        TFR    Y,X      SETUP FOR MULTIPLY
03031P 0CB3 DC   D1      A        LDD    ASPECT   BY ASPECT RATIO
03032P 0CB5 BD   0D33    P        JSR    ML1632
03033P 0CB8 1F   20      A        TFR    Y,D      SEE WHAT HIGH ORDER RESULT IS
03034P 0CBA 4D                    TSTA            SHOULD HAVE 0 IN HIGH ORDER
03035P 0CBB 1026 F341    P        LBNE   FCERR
03036P 0CBF D7   C5      A        STB    Y2STOR
03037P 0CC1 1F   30      A        TFR    U,D      GET LOW 8 BITS OF RESULT
03038P 0CC3 97   C6      A        STA    Y2STOR+&1
03039                      * NOW WE HAVE Y2STOR AND X2STOR EQUAL POINT OFFSET
03040                      * SO WE NEED TO CENTER ADJUST AND RANGE CHECK
03041P 0CC5 A6   E4      A        LDA    ,S       GET THE QUADRANT
03042P 0CC7 81   02      A        CMPA   #&2      FOR 2,3,4,5 WE USE NEGATIVE X
03043P 0CC9 25   0E   0CD9        BCS    CADDX    ADD FOR 0 AND 1
0304AP 0CCB 81   06      A        CMPA   #&6
03045P 0CCD 24   0A   0CD9        BCC    CADDX    ADD FOR 6 AND 7
03046P 0CCF DC   CB      A        LDD    CNTRX    OFFSET FROM CENTER
03047P 0CD1 93   C3      A        SUBD   X2STOR
03048P 0CD3 24   11   0CE6        BCC    CXOK     MUST BE OK SINCE 0 IS LEGAL
03049P 0CD5 4F                    CLRA            TRY 0
03050P 0CD6 5F                    CLRB
03051P 0CD7 20   0D   0CE6        BRA    CXOK
03052P 0CD9 DC   CB      A CADDX  LDD    CNTRX
03053P 0CDB D3   C3      A        ADDD   X2STOR
03054P 0CDD 25   05   0CE4        BCS    CNXOK    ALWAYS MAP TO BORDER
03055P 0CDF 1093 D3      A        CMPD   XMAX
03056P 0CE2 25   02   0CE6        BCS    CXOK
03057P 0CE4 DC   D3      A CNXOK  LDD    XMAX
03058P 0CE6 DD   C3      A CXOK   STD    X2STOR   NOW HAVE OFFSET X IN RANGE
03059P 0CE8 A6   E4      A        LDA    ,S       GET THE QUADRANT
03060P 0CEA 81   04      A        CMPA   #&4      WE ADD TO CNTRY IN 0,1,2,3
03061P 0CEC 25   0A   0CF8        BCS    CADDY    GO DO THE ADD
03062P 0CEE DC   CD      A        LDD    CNTRY
03063P 0CF0 93   C5      A        SUBD   Y2STOR
03064P 0CF2 24   11   0D05        BCC    CYOK
03065P 0CF4 4F                    CLRA            MAP TO BORDER
03066P 0CF5 5F                    CLRB
03067P 0CF6 20   0D   0D05        BRA    CYOK
03068P 0CF8 DC   CD      A CADDY  LDD    CNTRY
03069P 0CFA D3   C5      A        ADDD   Y2STOR
03070P 0CFC 25   05   0D03        BCS    CNYOK
03071P 0CFE 1093 D5      A        CMPD   YMAX
03072P 0D01 25   02   0D05        BCS    CYOK
03073P 0D03 DC   D5      A CNYOK  LDD    YMAX
03074P 0D05 DD   C5      A CYOK   STD    Y2STOR
03075                      * NOW WE HAVE THE NEXT CONNECTING POINT IN X2STOR AND Y2STOR
03076P 0D07 0D   D8      A        TST    CSTRFL

PAGE  041  ECBGRP  .SA:1  TXRGRP CIRCLE

03077P 0D09 26   02   0D0D        BNE    CQLOPI
03078P 0D0B 8D   50   0D5D        BSR    CDRAW    GO DO THE CDRAW
03079P 0D0D 35   06      A CQLOPI PULS   D        GET QUADRANT AND POINT COUNT
03080P 0D0F 04   D8      A        LSR    CSTRFL   CLEAR AND TEST CIRCLE START FLAG
03081P 0D11 25   05   0D18        BCS    GCQUAI
03082P 0D13 1093 D9      A        CMPD   CENDPS   SEE IF AT END POSITION
03083P 0D16 27   0C   0D24        BEQ    GCFINC
03084P 0D18 5C             GCQUAI INCB            UPDATE POINT COUNT
03085P 0D19 C1   08      A        CMPB   #NUMPNT-&1 MORE IN THIS QUADRANT?
03086P 0D1B 26   04   0D21        BNE    GCQUAD
03087P 0D1D 4C                    INCA            NEXT QUADRANT
03088P 0D1E 5F                    CLRB
03089P 0D1F 84   07      A        ANDA   #&7      PASSING THROUGH TO QUADRANT 0 SET TO 0
03090P 0D21 7E   0C7B    P GCQUAD JMP    CQUADL
03091            0D24    P GCFINC EQU    *
03092                      *** CLR CFLFLG  ;CLEAR SO LINGEN IS NORMALLY NOT FILLING
03093P 0D24 39                    RTS
03094
03095                      * MULTIPLY RADIUS BY TABLE VALUE
03096P 0D25 9E   CF      A RADMUL LDX    RADIUS
03097P 0D27 EC   C4      A        LDD    ,U       GET TABLE FACTOR
03098P 0D29 27   07   0D32        BEQ    RADUNT   IF 0 JUST RETURN RADIUS
03099P 0D2B 83   0001    A        SUBD   #&1      SCALE BACK AFTER SPECIAL CASE
03100P 0D2E 8D   03   0D33        BSR    ML1632
03101P 0D30 1F   21      A        TFR    Y,X      RETURN HIGH 16BITS IN X
03102P 0D32 39             RADUNT RTS
03103                      *
03104                      * MULTIPLY [D] BY [X] GIVING [Y,U]
03105                      *
03106                             XDEF   ML1632
03107P 0D33 34   76      A ML1632 PSHS   U,Y,D,X
03108P 0D35 6F   64      A        CLR    &4,S     CLEAR HIGH BYTE OF RESULT
03109P 0D37 A6   63      A        LDA    &3,S     GET LOW OF ARG2 [B] HAS LOW OF ARG1
03110P 0D39 3D                    MUL
03111P 0D3A ED   66      A        STD    &6,S     SET LOW 2 BYTES OF RESULT
03112P 0D3C EC   61      A        LDD    &1,S     GET LOW OF ARG1 AND HIGH OF ARG2
03113P 0D3E 3D                    MUL
03114P 0D3F EB   66      A        ADDB   &6,S     COMBINE WITH PREVIOUS
03115P 0D41 89   00      A        ADCA   #&0
03116P 0D43 ED   65      A        STD    &5,S     SAVE INTERMEDIATE
03117P 0D45 E6   E4      A        LDB    ,S       GET HIGH OF ARG1
03118P 0D47 A6   63      A        LDA    &3,S     GET LOW OF ARG2
03119P 0D49 3D                    MUL
03120P 0D4A E3   65      A        ADDD   &5,S
03121P 0D4C ED   65      A        STD    &5,S
03122P 0D4E 24   02   0D52        BCC    MLCARY   SEE IF CARRY INTO HIGH BYTE
03123P 0D50 6C   64      A        INC    &4,S
03124P 0D52 A6   E4      A MLCARY LDA    ,S       GET HIGHS
03125P 0D54 E6   62      A        LDB    &2,S
03126P 0D56 3D                    MUL
03127P 0D57 E3   64      A        ADDD   &4,S     COMBINE WITH PREVIOUS
03128P 0D59 ED   64      A        STD    &4,S     SET HIGH 2 BYTES OF RESULT
03129P 0D5B 35   F6      A        PULS   U,Y,X,D,PC POP OFF ARGS AND RESULT AND RETURN
03130
03131
03132P 0D5D 7E   0212    P CDRAW  JMP    LINGEN
03133            0000    A        IFNE   &0
03163                       ENDC   IFN 0

PAGE  042  ECBGRP  .SA:1  TXRGRP CIRCLE

03164                      *
03165                      * SCAN FOR SIZE OR STAT POSITION
03166                      *
03167P 0D60 5F             CPOSSB CLRB            ASSUME NO ARGUMENT
03168P 0D61 9D   A5      A        JSR    CHRGOT
03169P 0D63 27   11   0D76        BEQ    CPSEND
03170P 0D65 BD   0000    A        JSR    CHKCOM
03171P 0D68 BD   0000    A        JSR    FRMNUM   EVALUATE THE NUMBER
03172P 0D6B 96   4F      A        LDA    FACEXP   SCALE BY 64
03173P 0D6D 8B   06      A        ADDA   #&6
03174P 0D6F 97   4F      A        STA    FACEXP
03175P 0D71 BD   0000    A        JSR    CONINT
03176P 0D74 C4   3F      A        ANDB   #&63     ORIGINAL HAD TO BE 0 TO 1
03177P 0D76 1F   98      A CPSEND TFR    B,A      GET TWO COPIES FOR BIT SPLIT
03176P 0D78 C4   07      A        ANDB   #&7      ASSUMES 8 POINTS
03179                      *    SET NUMPNT PARAMETER
03180P 0D7A 44                    LSRA            GET QUADRANT PARAMETER
03181P 0D7B 44                    LSRA
03182P 0D7C 44                    LSRA
03183P 0D7D 39                    RTS
03184
03185                             END
TOTAL ERRORS 00000--00000
TOTAL WARNINGS 00001--01128
