PAGE  001  ECBCOM  .SA:0  TXRGRP Extension ROM Direct Page RAM

00700                             OPT    L,LLE=120
00701                             NAM    TXRGRP   - TANDY EXTENSION ROM GRAPHICS CODE
00702
00703                      **********************************************************************
00704                      *                                                                    *
00705                      *    Copyright 1982 by Microsoft Corporation, all rights reserved    *
00706                      *                                                                    *
00707                      **********************************************************************
00708
00709                             TTL    Equates
00710            0100    A CXMAX  EQU    &256
00711            00C0    A CYMAX  EQU    &192
00712
00713            FFC0    A SAM    EQU    @177700
00714
00715                             TTL    External Declarations
00716
00717                             XREF   ANDTK
00718                             XREF   CHEADA,CHROUT,CLEARC,CONINT,CRDO
00719                             XREF   EQULTK,EVLADR
00720                             XREF   FCERR,FRESTR,FRMEVL
00721                             XREF   GETADR,GETSTK
00722                             XREF   HEXCNX,HKPTGT
00723                             XREF   ILINE,INLIN,ISDIGC,ISLETC,ISVAR
00724                             XREF   NEWSTT,NOTTK
00725                             XREF   ORTK,OUTSPC
00726                             XREF   PIA1AD,PIA1BD,PTRGET
00727                             XREF   READY
00728                             XREF   SCRTCH,SETSEL,SNDCLK,SNDOFF,SNDON,SNERR,SNGFLT
00729                             XREF   STKINI,SYNCHR
00730                             XREF   TOTK
00731
00732            00D7    A GTMPB1 EQU    PDIRCT
00733
00734                             TTL    GRAPHICS CODE PSET,PRESET,LINE,PUT,GET,PPOINT
00735                             XREF   MINUTK,FRMNUM,INPUTK,CHKCOM
00736                             XREF   PSETTK,PRESTK,CHKOPN,CHKCLS,COMBYT
00737            00BE    A XLOW   EQU    XSTORE+&1
00738            00C0    A YLOW   EQU    YSTORE+&1
00739
00740                             XREF   GETBYT,GETNUM
00741                      *
00742                      * THE KEY SYSTEM DEPENDENT ROUTINES ARE THE FOLLOWING:
00743                      *  GTADRS - FETCH THE MEMORY ADDRESS OF THE POINT SPECIFIED IN
00744                      *  XSTORE AND YSTORE INTO [X] WITH A BIT MASK IN [A]
00745                      *  GINCY,GINCX -- INCREMENT X OR Y IN CHAR OR GRAPHIC MODE
00746                      *
00747                      *
00748                      * MEMORY HAS THE FOLLOWING KEY LOCATIONS:
00749                      * SCBASE LOW ADDRESS OF SCREEN
00750                      * SCTOP HIGH ADDRESS OF SCREEN
00751                      * SCMODE VALUE SHOWING CURRENT MODE
00752                      * RADIO SHACK HAS 5 GRAPHICS MODES
00753                      *  0 128X 96  BW  SCWID=16 ASPECT=1 MEM=1.5K
00754                      *  1 128X 96  C   SCWID=32 ASPECT=1 MEM=3K
00755                      *  2 128X192  BW  SCWID=16 ASPECT=2 MEM=3K
00756                      *  3 128X192  C   SCWID=32 ASPECT=2 MEM=6K
00757                      *  4 256X192  BW  SCWID=32 ASPECT=1 MEM=6K

PAGE  002  ECBGRP  .SA:1  TXRGRP GRAPHICS CODE PSET,PRESET,LINE,PUT,GET,PPOINT

00758                      * SCWID GIVING SCREEN WIDTH (16 OR 32)
00759                      * XSTORE IS THE 2 BYTE X VALUE
00760                      * YSTORE IS THE 2 BYTE Y VALUE
00761                      *
00762P 0000 CE   000D    P PTADRS LDU    #PTADRG  POINT AT ADDRESS TABLE
00763P 0003 96   B6      A        LDA    SCMODE   GET THE SCREEN MODE
00764P 0005 48                    ASLA            CONSTRUCT A TABLE INDEX
00765P 0006 EE   C6      A        LDU    A,U
00766P 0008 39             FTRTS  RTS
00767P 0009 8D   F5   0000 GENADR BSR    PTADRS   GET ADDRESS IN [U]
00768P 000B 6E   C4      A        JMP    ,U
00769
00770P 000D      0017    P PTADRG FDB    GPUTMB
00771P 000F      0033    P        FDB    GPUTMC
00772P 0011      0017    P        FDB    GPUTMB
00773P 0013      0033    P        FDB    GPUTMC
00774P 0015      0017    P        FDB    GPUTMB
00775
00776                      *
00777                      * IN BLACK AND WHITE MODE WE SELECT THE ADDRESS AS FOLLOWS:
00778                      *  [X] = SCBASE + Y*SCWID + INT (X/8)
00779                      *  [A] = 2 ^ ( 7 - ( X MOD 8 ) )
00780                      *
00781P 0017 34   44      A GPUTMB PSHS   B,U
00782P 0019 D6   B9      A        LDB    SCWID    GET BYTE SIZE OF EACH ROW
00783P 001B 96   C0      A        LDA    YLOW     GET ROW COUNTER
00784P 001D 3D                    MUL             MULTIPLY
00785P 001E D3   BA      A        ADDD   SCBASE   TURN INTO MEMORY SCREEN POINTER
00786P 0020 1F   01      A        TFR    D,X      SAVE CURRENT SUM IN [X]
00787P 0022 D6   BE      A        LDB    XLOW     LOOK AT X
00788P 0024 54                    LSRB            DIVIDED BY 8
00789P 0025 54                    LSRB
00790P 0026 54                    LSRB
00791P 0027 3A                    ABX             ADD ONTO SUM
00792P 0028 96   BE      A        LDA    XLOW     LOOK AT X AGAIN TO GET BIT MASK
00793P 002A 84   07      A        ANDA   #&7      LOW THREE BITS ARE AN INDEX
00794P 002C CE   004E    P        LDU    #BITTB1  INTO A POWER OF 2 TABLE
00795P 002F A6   C6      A        LDA    A,U      FETCH BIT MASK FROM TABLE
00796P 0031 35   C4      A        PULS   U,B,PC
00797                      *
00798                      * GRAPHICS ADDRESS SELECT IN COLOR MODE WORKS AS FOLLOWS:
00799                      *  [X] = SCBASE + Y*SCWID + INT (X/4)
00800                      *  [A] = 3 * ( 4 ^ ( 3 - ( X MOD 4 ) ) )
00801                      * SO BIT MASK HAS 2 BITS IN [A] AND ADDRESS IS IN [X]
00802                      *
00803P 0033 34   44      A GPUTMC PSHS   B,U
00804P 0035 D6   B9      A        LDB    SCWID    GET BYTE SIZE OF EACH ROW
00805P 0037 96   C0      A        LDA    YLOW     GET ROW COUNTER
00806P 0039 3D                    MUL             MULTIPLY
00807P 003A D3   BA      A        ADDD   SCBASE   TURN INTO MEMORY SCREEN POINTER
00808P 003C 1F   01      A        TFR    D,X      SAVE CURRENT SUM IN [X]
00809P 003E D6   BE      A        LDB    XLOW     LOOK AT X
00810P 0040 54                    LSRB            DIVIDED BY 4
00811P 0041 54                    LSRB
00812P 0042 3A                    ABX             ADD ON BYTE OFFSET FROM ROW
00813P 0043 96   BE      A        LDA    XLOW     GET BACK X COUNT TO CONSTRUCT
00814P 0045 84   03      A        ANDA   #&3      BIT MASK
00815P 0047 CE   0056    A        LDU    #BITTB2  USE AS INDEX INTO BIT TABLE

PAGE  003  ECBGRP  .SA:1  TXRGRP GRAPHICS CODE PSET,PRESET,LINE,PUT,GET,PPOINT

00816P 004A A6   C6      A        LDA    A,U      GET BIT MASK WITH 2 BITS FROM TABLE
00817P 004C 35   C4      A        PULS   U,B,PC
00818
00819
00820P 004E      80      A BITTB1 FCB    &128     BACKWARDS BECAUSE OF THE WAY
00821P 004F      40      A        FCB    &64      GRAPHICS BITS ARE HANDLED
00822P 0050      20      A        FCB    &32
00823P 0051      10      A        FCB    &16
00824P 0052      08      A        FCB    &8
00875P 0053      04      A        FCB    &4
00826P 0054      02      A        FCB    &2
00827P 0055      01      A        FCB    &1
00828
00829P 0056      C0      A BITTB2 FCB    &192     MASK FOR COLOR GRAPHICS CASE
00830P 0057      30      A        FCB    &48      TWO  BITS PER PIXEL
00831P 0058      0C      A        FCB    &12
00832P 0059      03      A        FCB    &3
00833
00834                      *
00835                      * THESE ARE THE RELATIVE POSITION ROUTINES THAT MOVE
00836                      * UP ONE IN X OR Y
00837                      *
00838P 005A D6   B9      A GINCY  LDB    SCWID
00839P 005C 3A                    ABX
00840P 005D 39                    RTS
00841P 005E 44             GINXB  LSRA            SHIFT BIT MASK TO THE RIGHT
00842P 005F 24   03   0064        BCC    GIXRTS   IF NO CARRY THATS ALL
00843P 0061 46                    RORA            SET HIGH BIT IN [A]
00844P 0062 30   01      A        LEAX   &1,X     UPDATE DISPLAY ADDRESS
00845P 0064 39             GIXRTS RTS
00846P 0065 44             GINXC  LSRA            MOVE OVER 1 BIT
00847P 0066 24   F6   005E        BCC    GINXB    JUST SHIFT ONE MORE IF NO CARRY
00848P 0068 86   C0      A        LDA    #&192    SET UP FOR 2 LEFTMOST BITS
00849P 006A 30   01      A        LEAX   &1,X     UPDATE DISPLAY ADDRESS
00850P 006C 39                    RTS
00851
00852
00853                      *
00854                      * THIS ROUTINE SCANS A POINT AT THE CURRENT TEXT POSITION INTO
00855                      * XSTORE AND YSTORE. THE RANGE IS COMPRESSED TO Y=0 TO CYMAX-1
00856                      * AND X=0 TO CXMAX-1
00857                      *
00858                             XDEF   SCNPNT
00859P 006D BD   0000    A SCNPNT JSR    GETNUM   SET X INTO POKER AND Y INTO [B]
00860P 0070 108E 00BD    A        LDY    #XSTORE
00861P 0074 C1   C0      A SCNPN2 CMPB   #CYMAX   IS IT TOO BIG?
00862P 0076 25   02   007A        BCS    SCNYNT
00863P 0078 C6   BF      A        LDB    #CYMAX—&1 SET MAXIMUM VALUE
00864P 007A 4F             SCNYNT CLRA            MAKE DOUBLE BYTE
00865P 007B ED   22      A        STD    &2,Y
00866P 007D DC   2B      A        LDD    POKER    GET X VALUE
00867P 007F 1083 0100    A        CMPD   #CXMAX   SEE IF TOO BIG
00868P 0083 25   03   0088        BCS    SVXRTS
00869P 0085 CC   00FF    A        LDD    #CXMAX—&1
00870P 0088 ED   A4      A SVXRTS STD    ,Y
00871P 008A 39                    RTS
00872
00873                      *

PAGE  004  ECBGRP  .SA:1  TXRGRP GRAPHICS CODE PSET,PRESET,LINE,PUT,GET,PPOINT

00874                      * THIS SUBROUTINE TAKES THE VALUES IN XSTORE AND YSTORE AND
00875                      * ASSUMING THEY ARE GRAPHICS COORDINATES SCALES THEM BASED ON THE
00876                      * CURRENT GRAPHICS MODE.
00877                      * THIS ALLOWS ALL GRAPHICS COORDINATES TO BE DECLARED IN THE SPACE
00878                      * Y=0 TO CYMAX-1 AND X=0 TO CXMAX-1 SO MODE CHANGES DON'T REQUIRE PROGRAM
00879                      * CHANGES
00880                      * IN MODE0+1 X=X/2 Y=Y/2
00881                      * IN MODE2+3 X=X/2
00882                      * IN MODE4 NO CHANGE
00883                      *
00884P 0088 BD   006D    P GSCALR JSR    SCNPNT   SCAN VALUES OUT OF TEXT
00885P 008E CE   00BD    A GSCALE LDU    #XSTORE  POINT AT ARGUMENTS
00886P 0091 96   B6      A GSCALC LDA    SCMODE   GET THE SCREEN MODE
00887P 0093 81   02      A        CMPA   #&2      SEE IF Y NEEDS TO BE ADJUSTED
00888P 0095 24   06   009D        BCC    GSCNTY   NO GO HANDLE X
00889P 0097 EC   42      A        LDD    &2,U     DIVIDE Y BY 2
00890P 0099 44                    LSRA
00891P 009A 56                    RORB
00892P 009B ED   42      A        STD    &2,U
00893P 009D 96   B6      A GSCNTY LDA    SCMODE   NOW SEE IF X HAS TO BE SHIFTED
00894
00895P 009F 81   04      A        CMPA   #&4      SEE IF ITS MODE 4
00896P 00A1 24   06   00A9        BCC    SVURTS   ONLY MODE4 HAS X NON—SCALED
00897P 00A3 EC   C4      A        LDD    ,U
00898P 00A5 44                    LSRA
00899P 00A6 56                    RORB            DO THE DIVIDE
00900P 00A7 ED   C4      A        STD    ,U
00901P 00A9 39             SVURTS RTS
00902
00903
00904                      *
00905                      * PPOINT IS A FUNCTION TAKING (X,Y) AND RETURNING THE COLOR OF THE GRAPHICS
00906                      * BIT SET AT THAT LOCATION
00907                      *
00908                             XDEF   PPOINT
00909P 00AA BD   0123    P PPOINT JSR    ONECRD   SCAN COORDINATE
00910P 00AD BD   008E    P        JSR    GSCALE   SCALE TO GRAPHICS RANGE
00911P 00B0 BD   0009    P        JSR    GENADR   GET THE ADDRESS IN [X] AND BITS IN [A]
00912P 00B3 A4   84      A        ANDA   ,X       GET BIT RESULT INTO [A]
00913P 00B5 D6   B6      A        LDB    SCMODE   SEE IF COLOR OR BLACK AND WHITE
00914P 00B7 56                    RORB
00915P 00B8 24   12   00CC        BCC    PNTBW    POINT IN COLOR MODE IS SPECIAL
00916P 00BA 81   04      A PNTCLP CMPA   #&4      ARE BITS IN RANGE?
00917P 00BC 25   04   00C2        BCS    PNTCDN
00918P 00BE 46                    RORA
00919P 00BF 46                    RORA
00920P 00C0 20   F8   00BA        BRA    PNTCLP
00921P 00C2 4C             PNTCDN INCA            MAP NON BLACK COLORS TO 1 TO 8
00922P 00C3 48                    ASLA
00923P 00C4 9B   C1      A        ADDA   SCCSS    ADD IN COLOR SELECT TO GIVE ACTUAL COLOR
00924P 00C6 44                    LSRA
00925P 00C7 1F   89      A PNTRT1 TFR    A,B      RETURN RESULT IN [B]
00926P 00C9 7E   0000    A PNTRT0 JMP    SNGFLT
00927P 00CC 4D             PNTBW  TSTA            SEE IF POINT IS SET OR NOT
00928P 00CD 27   F8   00C7        BEQ    PNTRT1   RETURN ZERO FOR BLACK
00929P 00CF 4F                    CLRA            OTHERWISE ITS GREEN OR CYAN
00930P 00D0 20   F0               BRA    PNTCDN
00931

PAGE  005  ECBGRP  .SA:1  TXRGRP GRAPHICS CODE PSET,PRESET,LINE,PUT,GET,PPOINT

00932                      *
00933                      * PSET AND PRESET ARE STATEMENTS WHICH TAKE (X,Y,[,Z])
00934                      * AND AFFECT THE SELECTED POINT. Z IS THE ATTRIBUTE TO SET
00935                      * IF IT IS PRESENT.
00936                      *
00937                             XDEF   PSET
00938P 00D2 86   01      A PSET   LDA    #&1      INDICATE THIS IS A SET
00939P 00D4 20   01   00D7        BRA    PSETCN
00940                             XDEF   PRESET
00941P 00D6 4F             PRESET CLRA
00942P 00D7 97   C2      A PSETCN STA    SETFLG   SET UP A FLAG FOR LATER USE
00943P 00D9 BD   0000    A        JSR    CHKOPN
00944P 00DC BD   008B    P        JSR    GSCALR   GET THE ARGUMENT IN GRAPHICS MODE
00945P 00DF BD   02F2    P        JSR    CMCOLR
00946P 00E2 BD   0000    A        JSR    CHKCLS   MAKE SURE STATEMENT ENDED
00947P 00E5 BD   0009    P        JSR    GENADR   GET [X] POINTING AT VALUE AND [A] AS MASK
00948P 00E8 E6   84      A GRPACT LDB    ,X       Remember the current contents of
00949P 00EA 34   04      A        PSHS   B        the video memory.
00950P 00EC 1F   89      A        TFR    A,B      DUPLICATE BIT MASK
00951P 00EE 43                    COMA            FORM COMPLEMENT
00952P 00EF A4   84      A        ANDA   ,X       AND BRING IN CURRENT DATA BITS
00953P 00F1 D4   B5      A        ANDB   ACTCLE   AND BITS WITH CURRENT COLOR BITS
00954P 00F3 34   04      A        PSHS   B        PUT [B] ON STACK TO OR TOGETHER
00955P 00F5 AA   E0      A        ORA    ,S+      NEW COLOR BITS AND OLD DATA
00956P 00F7 A7   84      A        STA    ,X
00957P 00F9 A0   E0      A        SUBA   ,S+      Set the change flag for PAINT if
00958P 00FB 9A   DB      A        ORA    PNTCHF   the video memory was changed.
00959P 00FD 97   DB      A        STA    PNTCHF
00960P 00FF 39                    RTS
00961
00962                      *
00963                      * SCAN A PAIR OF POINTS INTO XSTORE,YSTORE AND X2STOR,Y2STOR
00964                      *
00965                             XDEF   CRDGET
00966P 0100 9E   C7      A CRDGET LDX    LSAVEX
00967P 0102 9F   BD      A        STX    XSTORE
00968P 0104 9E   C9      A        LDX    LSAVEY
00969P 0106 9F   BF      A        STX    YSTORE
00970P 0108 81   00      A        CMPA   #MINUTK  SEE IF DEFAULTING
00971P 010A 27   03   010F        BEQ    CRDGT2
00972P 010C BD   0123    P        JSR    ONECRD   READ ONE PAIR INTO XSTORE AND YSTORE
00973P 010F                CRDGT2 SYNCHK MINUTK   SEPERATED BY A MINUS SIGN
00974P 0114 BD   0000    A        JSR    CHKOPN
00975P 0117 BD   0000    A        JSR    GETNUM   EVALUATE NUMBER
00976P 011A 108E 00C3    A        LDY    #X2STOR  STORE VALUE INTO SECOND SET OF POINTS
00977P 011E BD   0074    P        JSR    SCNPN2
00976P 0121 20   06   0129        BRA    CHKCGO
00979                      *
00980                      * READ A COORDINATE SET WITH PARENS INTO XSTORE AND YSTORE
00981                      *
00982P 0123 BD   0000    A ONECRD JSR    CHKOPN
00983P 0126 BD   006D    P        JSR    SCNPNT
00984P 0129 7E   0000    A CHKCGO JMP    CHKCLS
00985
00986                      *
00987                      * THIS IS THE GENERAL PURPOSE LINE ROUTINE
00988                      * FORMAT IS LINE(X1,Y1)-(X2,Y2), (PSET OR PRESET)
00989                      * OPTIONAL ,B (FOR BOX) OR ,BF (BOX FILL)

PAGE  006  ECBGRP  .SA:1  TXRGRP GRAPHICS CODE PSET,PRESET,LINE,PUT,GET,PPOINT

00990                      *
00991                      * IDEA IS TO SCAN COORDINATES INTO (XSTORE,YSTORE) AND (X2STOR,Y2STOR)
00992                      * AND USE SETFLG TO DISTINGUISH THE GRAPHICS OR CHAR AND PSET OR PRESET
00993                      *
00994                             XDEF   LINE
00995P 012C 81   00      A LINE   CMPA   #INPUTK  FUNCTION NAME LIKE "INPUT"
00996P 012E 1027 FECE    A        LBEQ   ILINE
00997P 0132 81   28      A        CMPA   #OPNPAR
00998P 0134 27   09   013F        BEQ    GLINEC   DON'T REQUIRE @ LIKE NEC VERSION
00999P 0136 81   00      A        CMPA   #MINUTK
01000P 0138 27   05   013F        BEQ    GLINEC   ALLOW DEFAULT OF FIRST COORDINATE
01001P 013A                       SYNCHK '@       SKIP @ THAT MUST BE THERE
01002P 013F BD   0100    P GLINEC JSR    CRDGET   SCAN THE COORDINATES
01003P 0142 9E   C3      A        LDX    X2STOR   SAVE SECOND COORDINATE FOR REUSE WITH -
01004P 0144 9F   C7      A        STX    LSAVEX
01005P 0146 9E   C5      A        LDX    Y2STOR
01006P 0148 9F   C9      A        STX    LSAVEY
01007P 014A BD   0000    A        JSR    CHKCOM
01008P 014D 81   00      A        CMPA   #PRESTK  IS IT PRESET?
01009P 014F 27   09   015A        BEQ    GRLINR
01010P 0151 81   00      A        CMPA   #PSETTK
01011P 0153 1026 FEA9    A        LBNE   SNERR
01012P 0157 C6   01      A GRLINS LDB    #&1      FLAG FOR PSET
01013P 0159                       SKIP1
01014P 015A 5F             GRLINR CLRB            FLAG FOR PRESET
01015P 015B 34   04      A        PSHS   B        SAVE THE FLAG
01016P 015D 9D   9F      A        JSR    CHRGET   SKIP OVER PSET OR PRESET
01017P 015F BD   0191    P        JSR    GSCAL2   GRAPHICS SCALE BOTH POINTS
01018P 0162 35   04      A        PULS   B        GET BACK THE FLAG
01019P 0164 D7   C2      A LINCN2 STB    SETFLG   FLAG IS 1PSET,0PRESET
01020P 0166 BD   030B    P        JSR    DEFCOL   SET UP DEFAULT COLOR
01021P 0169 9D   A5      A        JSR    CHRGOT   REGET THE LAST CHAR
01022P 016B 1027 00A3 0212        LBEQ   LINGEN   JUST LINE
01023P 016F BD   0000    A        JSR    CHKCOM   MUST HAVE ATTRIBUTE
01024P 0172                       SYNCHK 'B       MUST HAVE B FOR BOX
01025P 0177 26   21   019A        BNE    LINBXF   IF CONTINUES MUST BE BOX FILL
01026P 0179 8D   3A   01B5        BSR    XLINE    DRAW THE BOX
01027P 017B 8D   62   01DF        BSR    YLINE
01028P 017D 9E   BD      A        LDX    XSTORE
01029P 017F 34   10      A        PSHS   X        SAVE XSTORE FOR LAST LINE
01030P 0181 9E   C3      A        LDX    X2STOR   OVERWRITE FOR BOTTOM LINE
01031P 0183 9F   BD      A        STX    XSTORE
01032P 0185 8D   58   01DF        BSR    YLINE
01033P 0187 35   10      A        PULS   X        GET BACK XSTORE
01034P 0189 9F   BD      A        STX    XSTORE
01035P 018B 9E   C5      A        LDX    Y2STOR   DRAW BOTTOM LINE
01036P 018D 9F   BF      A        STX    YSTORE
01037P 018F 20   24   01B5        BRA    XLINE
01038
01039                      *
01040                      * SET UP GRAPHICS LINE BY SCALING COORDINATES AND SETTING FLAG
01041                      *
01042P 0191 BD   008E    P GSCAL2 JSR    GSCALE   SCALE FIRST COORDINATE
01043P 0194 CE   00C3    A        LDU    #X2STOR  POINT AT SECOND COORDINATES
01044P 0197 7E   0091    P        JMP    GSCALC   AND SCALE THEM
01045
01046P 019A                LINBXF SYNCHK 'F       THIS IS LINE BOX FILL
01047P 019F 20   04   01A5        BRA    LINBXS   JUMP INTO THE LOOP

PAGE  007  ECBGRP  .SA:1  TXRGRP GRAPHICS CODE PSET,PRESET,LINE,PUT,GET,PPOINT

01048P 01A1 30   1F      A LINBXD LEAX   -&1,X    DECREMENT Y COORDINATE
01049P 01A3 9F   BF      A LINBXL STX    YSTORE   UPDATE Y COORDINATE
01050P 01A5 BD   01B5    P LINBXS JSR    XLINE    DRAW THE XLINE
01051P 01A8 9E   BF      A        LDX    YSTORE   SEE HOW WE COMPARE WITH Y2STOR
01022P 01AA 9C   C5      A        CMPX   Y2STOR
01053P 01AC 27   06   01B4        BEQ    LINRTS   ALL DONE WHEN MATCH
01054P 01AE 24   F1   01A1        BCC    LINBXD   YSTORE IS BIGGER SO DECREMENT IT
01055P 01B0 30   01      A        LEAX   &1,X     YSTORE IS SMALLER SO INCREMENT IT
01056P 01B2 20   EF   01A3        BRA    LINBXL
01057
01058P 01B4 39             LINRTS RTS
01059
01060
01061                      *
01062                      * DRAW A LINE FROM XSTORE,YSTORE TO X2STOR,YSTORE
01063                      *
01064P 01B5 9E   BD      A XLINE  LDX    XSTORE   GET X1 COORDINATE
01065P 01B7 34   10      A        PSHS   X        SAVE IT FOR CALLER
01066P 01B9 BD   049B    P        JSR    XDELTS
01067P 01BC 24   04   01C2        BCC    XLNXFR   [D] HAS COUNT IF NO CARRY SO GO
01068P 01BE 9E   C3      A        LDX    X2STOR   ALWAYS INCREMENT SO MAKE XSTORE SMALLER
01069P 01C0 9F   BD      A        STX    XSTORE
01070P 01C2 1F   02      A XLNXFR TFR    D,Y      PUT COUNT IN [Y]
01071P 01C4 31   21      A        LEAY   &1,Y     OFFSET BY ONE
01072P 01C6 BD   0009    P        JSR    GENADR   GET ADDRESS AND BIT MASK FOR START
01073P 01C9 35   40      A        PULS   U        GET BACK XSTORE
01074P 01CB DF   BD      A        STU    XSTORE
01075P 01CD 8D   36   0205        BSR    XADRI    MAKE U ADDRESS OF INCREMENT ROUTINE
01076P 01CF 97   D7      A XLNLOP STA    GTMPB1   SAVE THE BIT MASK
01077P 01D1 BD   00E8    P        JSR    GRPACT   ACTUALLY PERFORM ACTION (SET RESET OR PUT CHR)
01078P 01D4 96   D7      A        LDA    GTMPB1   GET BACK THE BIT MASK
01079P 01D6 AD   C4      A        JSR    ,U       GO OFF TO INCREMENT ROUTINE
01080P 01D8 31   3F      A        LEAY   -&1,Y    DECREMENT THE COUNT
01081P 01DA 26   F3   01CF        BNE    XLNLOP   ITERATE WITH ACTION
01082P 01DC 39                    RTS
01083
01084                      *
01085                      * YLINE DRAWS FROM XSTORE,YSTORE TO XSTORE,Y2STOR
01086                      *
01087P 01DD 35   06      A DYLINE PULS   D        ENTRY FROM GENERAL LINE DRAW ROUTINE
01086                      *    CLEAN OFF THE STACK
01089
01090                             XDEF   YLINE
01091P 01DF DC   BF      A YLINE  LDD    YSTORE   GET Y COORDINATE
01092P 01E1 34   06      A        PSHS   D        SAVE TO RESTORE
01093P 01E3 BD   048E    P        JSR    YDELTS
01094P 01E6 24   04   01EC        BCC    YLNXFR
01095P 01E8 9E   C5      A        LDX    Y2STOR
01096P 01EA 9F   BF      A        STX    YSTORE
01097P 01EC 1F   02      A YLNXFR TFR    D,Y
01098P 01EE 31   21      A        LEAY   &1,Y
01099P 01F0 BD   0009    P        JSR    GENADR
01100P 01F3 35   40      A        PULS   U
01101P 01F5 DF   BF      A        STU    YSTORE
01102P 01F7 8D   15   020E        BSR    YADRI    MAKE U A ROUTINE TO INCREMENT Y
01103P 01F9 20   D4   01CF        BRA    XLNLOP
01104
01105                      *

PAGE  008  ECBGRP  .SA:1  TXRGRP GRAPHICS CODE PSET,PRESET,LINE,PUT,GET,PPOINT

01106                      * TABLE OF ROUTINES TO INCREMENT X AND Y FOR EACH MODE
01107                      *
01108P 01FB      005E    P XINCS  FDB    GINXB
01109P 01FD      0065    P        FDB    GINXC
01110P 01FF      005E    P        FDB    GINXB
01111P 0201      0065    P        FDB    GINXC
01112P 0203      005E    P        FDB    GINXB
01113P 0205 CE   01FB    P XADRI  LDU    #XINCS
01114P 0208 D6   B6      A        LDB    SCMODE
01115P 020A 58                    ASLB
01116P 020B EE   C5      A IMDFET LDU    B,U
01117P 020D 39                    RTS
01116P 020E CE   005A    P YADRI  LDU    #GINCY   Y INCREMENT ROUTINE
011I9P 0211 39                    RTS
01120                      *
01121                      * THIS IS THE GENERAL PURPOSE LINE DRAWING ROUTINE
01122                      * IT DRAWS FROM XSTORE,YSTORE TO X2STOR,Y2STOR
01123                      *
01124P 0212 108E 027E    P LINGEN LDY    #YINC    ASSSUME INCREMENTING Y
01125P 0216 BD   048E    P        JSR    YDELTS
01126                      *** BNE LINNTX
01127                      *** TST CFLFLG  ;CANT USE XLINE FOR FILLING
****WARNING   001--00000
01128P 0219 1027 FF98 01B5        LBEQ   XLINE    SPECIAL CASE IS FASTER
01129P 021D 24   04   0223 LINNTX BCC    LY1BIG
01130P 021F 108E 028C    P        LDY    #YDEC
01131P 0223 34   06      A LY1BIG PSHS   D        SAVE DELTA Y ON THE STACK
01132P 0225 CE   0277    P        LDU    #XINC    ASSUME INCREMENT
01133P 0228 BD   049B    P        JSR    XDELTS
01134                      *** BNE LINNTY
01135                      *** TST CFLFLG  ;CANT USE YLIN FOR CIRCLE FILL CASE
01136P 022B 27   B0   01DD        BEQ    DYLINE
01137P 022D 24   03   0232 LINNTY BCC    LX1BIG
01136P 022F CE   0285    P        LDU    #XDEC
01139P 0232 10A3 E4      A LX1BIG CMPD   ,S       SEE WHICH DELTA IS BIGGER
01140P 0235 35   10      A        PULS   X        GET DELTA Y INTO X
01141P 0237 24   04   023D        BCC    XMLDLT   IF CC THEN XDELTA IS BIGGER
01142P 0239 1E   32      A        EXG    U,Y      MAKE U MAJOR AXIS AND Y MINOR AXIS
01143                      *    INCREMENT OR DECREMENT ROUTINE
01144P 023B 1E   01      A        EXG    D,X      MAKE D MAJOR DELTA AND X MINOR DELTA
01145P 023D 34   46      A XMLDLT PSHS   U,D      SAVE COUNT OF POINTS IN LINE
01146P 023F 34   06      A        PSHS   D        SAVE MAJOR DELTA TO KNOW WHEN TO
01147                      *    INCREMENT ON MINOR AXIS
01148P 0241 44                    LSRA            START THE COUNT AT MAJOR DELTA/2
01149P 0242 56                    RORB            SO MIDPOINT IS ALWAYS CORRECT
01150P 0243 25   09   024E        BCS    HLFNTO   IF NOT ODD NO PROBLEM
01151                      *    WE ROUND IF WE ARE DECREMENTING
01i52                      *    SO WE END UP WITH THE SAME POINTS
01153                      *    IN BOTH DIRECTIONS
01154P 0245 1183 027F    P        CMPU   #YINC+&1
01155P 0249 25   03   024E        BCS    HLFNTO   SINCE XINC AND YINC ARE BELOW YINC+1 SKIP INCREMENT
01156P 024B 83   0001    A        SUBD   #&1
01157P 024E 34   16      A HLFNTO PSHS   X,D      THE COUNTER IN [D] IS INCREMENTED BY
01158                      *    THE MINOR DELTA EVERYTIME AND THE MINOR
01159                      *    AXIS IS UPDATED WHEN IT REACHES THE MAJOR
01160                      *    DELTA
01161                      *    SAVE MINOR DELTA IN [X] FOR ADDING TO
01162                      *    COUNTER

PAGE  009  ECBGRP  .SA:1  TXRGRP GRAPHICS CODE PSET,PRESET,LINE,PUT,GET,PPOINT

01163P 0250 BD   0000    P        JSR    PTADRS   GET INTO [U] ADDRESS OF INDEX ROUTINE
01164            0000    A        IFNE   &0
01177                       ENDC   IFN 0
01178P 0253 AD   C4      A LNGLOP JSR    ,U       GET LOCATION IN [X] AND BIT IN [A]
01179P 0255 BD   00E8    P        JSR    GRPACT   ACTUALLY PERFORM THE ACTION
01180P 0258 AE   66      A LNGLP2 LDX    &6,S     CHECK COUNT OF POINTS
01181P 025A 27   17   0273        BEQ    LNGFIN
01182P 025C 30   1F      A        LEAX   -&1,X    DECREMENT
01183P 025E AF   66      A        STX    &6,S
01184P 0260 AD   F8 08   A        JSR    [&8,S]   UPDATE MAJOR AXIS
01165P 0263 EC   E4      A        LDD    ,S       GET COUNT TO ADD MINOR DELTA
01186P 0265 E3   62      A        ADDD   &2,S
01187P 0267 ED   E4      A        STD    ,S       UPDATE COUNT
01188P 0269 A3   64      A        SUBD   &4,S     SEE IF REACHED MAJOR DELTA
01189P 026B 25   E6   0253        BCS    LNGLOP   IF NOT JUST CONTINUE DRAWING
01190P 026D ED   E4      A        STD    ,S       UPDATE TEMP COUNT
01191P 026F AD   AA      A        JSR    ,Y       UPDATE MINOR AXIS
01192P 0271 20   E0   0253        BRA    LNGLOP
01193P 0273 35   10      A LNGFIN PULS   X        GET RID OF FIFTH TEMP ON STACK
01194P 0275 35   F6      A        PULS   X,D,Y,U,PC GET RlD OF 4 TEMPS AND RETURN
01195                      *** JSR SPCROT  ;SPECIAL JSR FOR CIRCLE FILL
01196                      ***    ;THIS IS CALLED WHEN MINOR AXIS UPDATE
01197                      ***    ;IS DECREMENTED BY 3 FOR FILLED CIRCLE
01198P 0277 9E   BD      A XINC   LDX    XSTORE
01199P 0279 30   01      A        LEAX   &1,X
01200P 027B 9F   BD      A        STX    XSTORE
01201P 027D 39                    RTS
01202                      *** JSR SPCROT
01203                      * NOTE THIS ORDER IS IMPORTANT SINCE WE COMPARE ADDRESS OF MAJOR
01204                      * AXIS UPDATE ROUTINE TO YINC+1 TO SEE IF WE ARE +ING OR -ING
01205P 027E 9E   BF      A YINC   LDX    YSTORE
01206P 0280 30   01      A        LEAX   &1,X
01207P 0282 9F   BF      A        STX    YSTORE
01208P 0284 39                    RTS
01209                      *** JSR SPCROT
01210P 0285 9E   BD      A XDEC   LDX    XSTORE
01211P 0287 30   1F      A        LEAX   -&1,X
01212P 0289 9F   BD      A        STX    XSTORE
01213P 028B 39                    RTS
01214                      *** JSR SPCROT
01215P 028C 9E   BF      A YDEC   LDX    YSTORE
01216P 028E 30   1F      A        LEAX   -&1,X
01217P 0290 9F   BF      A        STX    YSTORE
01218P 0292 39                    RTS
01219P 0293 CE   00D3    A STMAXS LDU    #XMAX    POINT AT MAX STORAGE AREA
01220P 0296 8E   00FF    A        LDX    #CXMAX-&1 MAX LOGICAL VALUE TO SCALE
01221P 0299 AF   C4      A        STX    ,U
01222P 029B 8E   00BF    A        LDX    #CYMAX-&1 MAX Y LOGICAL VALUE
01223P 029E AF   42      A        STX    &2,U
01224P 02A0 7E   0091    P        JMP    GSCALC
01225
01226                             TTL    NEW GRAPHICS CODE FOR 6847 COLOR COMPUTER
01227
01228                      *
01229                      * PCLS CLEAR A GRAPHICS SCREEN
01230                      *
01231                             XDEF   PCLS
01232P 02A3 27   0E   02B3 PCLS   BEQ    DEFCLS   IF NO ARGUMENT, DEFAULT CLEAR

PAGE  010  ECBGRP  .SA:1  TXRGRP NEW GRAPHICS CODE FOR 6847 COLOR COMPUTER

01233P 02A5 8D   24   02CB        BSR    GETCLR   READ COLOR TO CLEAR TO
01234P 02A7 86   55      A GCLSB  LDA    #@125    REPLICATE THROUGHOUT BYTE
01235P 02A9 3D                    MUL
01236P 02AA 9E   BA      A        LDX    SCBASE   STORE INTO SCREEN MEMORY
01237P 02AC E7   80      A GCLSLP STB    ,X+
01238P 02AE 9C   B7      A        CMPX   SCTOP
01239P 02B0 26   FA   02AC        BNE    GCLSLP
01240P 02B2 39                    RTS
01241P 02B3 D6   B3      A DEFCLS LDB    BAKCLR
01242P 02B5 20   F0   02A7        BRA    GCLSB
01243
01244                      *
01245                      * COLOR SETS UP FOREGROUND AND BACKROUND COLOR
01246                      *
01247                             XDEF   COLORS
01248P 02B7 81   2C      A COLORS CMPA   #COMMA   FOREGROUND COLOR PRESENT?
01249P 02B9 27   08   02C3        BEQ    COLORB   IF ONLY BACKGROUND
01250P 02BB 8D   0E   02CB        BSR    GETCLR   READ COLOR IN
01251P 02BD D7   B2      A        STB    FORCLR   SET UP FORCLR (FOREGROUND COLOR)
01252P 02BF 9D   A5      A        JSR    CHRGOT   FOREGROUND ONLY?
01253P 02C1 27   07   02CA        BEQ    COLRTS
01254P 02C3 BD   0000    A COLORB JSR    CHKCOM   HAVE TO HAVE COMMA BEFORE BACKROUND
01255P 02C6 8D   03   02CB        BSR    GETCLR   FETCH BACKROUND COLOR
01256P 02C8 D7   B3      A        STB    BAKCLR   SET UP BAKCLR
01257P 02CA 39             COLRTS RTS
01258
01259                      *
01260                      * GETCLR RETURNS
01261                      * [B] = COLOR FROM 0 TO 3
01262                      * [A] = 8 IF CSS SHOULD BE SET 0 OTHERWISE
01263                      * TABLE OF RETURNS
01264                      * ARG C BW CSS
01265                      *   0 3  0  0
01266                      *   1 0  3  0
01267                      *   2 1  0  0
01268                      *   3 2  3  0
01269                      *   4 3  0  0
01270                      *   5 0  3  8
01271                      *   6 1  0  8
01272                      *   7 2  3  8
01273                      *   8 3  0  8
01274                      *
01275P 02CB BD   0000    A GETCLR JSR    GETBYT   READ THE COLOR
01276P 02CE C1   09      A GETCLX CMPB   #&9
01277P 02D0 1024 FD2C    A        LBCC   FCERR    ILLEGAL OVER 9
01278P 02D4 4F                    CLRA            ASSUME CSS 0
01279P 02D5 C1   05      A        CMPB   #&5
01280P 02D7 25   04   02DD        BCS    CNOCSS   0 -4 HAVE NO CSS
01281P 02D9 86   08      A        LDA    #&8
01282P 02DB C0   04      A        SUBB   #&4      MAP 5-8 TO 1-4
01283P 02DD 34   02      A CNOCSS PSHS   A        SAVE CSS
01284P 02DF 96   B6      A        LDA    SCMODE   SEE IF COLOR OR BLACK AND WHITE
01285P 02E1 46                    RORA
01286P 02E2 24   08   02EC        BCC    CLBWST   CLEAR FOR BLACK AND WHITE
01287P 02E4 5D                    TSTB            IF NON-ZERO ALL WE NEED IS A DECREMENT
01288P 02E5 26   02   02E9        BNE    CLCLST
01289P 02E7 C6   04      A CLBW3  LDB    #&4      FOR ZERO END UP MAPPING TO 3
01290P 02E9 5A             CLCLST DECB

PAGE  011  ECBGRP  .SA:1  TXRGRP NEW GRAPHICS CODE FOR 6847 COLOR COMPUTER

01291P 02EA 35   82      A GETCFN PULS   A,PC     GET CSS BACK AND RETURN
01292P 02EC 56             CLBWST RORB            LOOK AT LOW BIT OF COLOR
01293P 02ED 25   F8   02E7        BCS    CLBW3
01294P 02EF 5F                    CLRB            OTHERWISE RETURN ZERO
01295P 02F0 20   F8   02EA        BRA    GETCFN
01296                      *
01297                      * COLOR FETCH ROUTINE
01298                      *
01299P 02F2 BD   030B    P CMCOLR JSR    DEFCOL   SETUP DEFAULT
01300P 02F5 9D   A5      A        JSR    CHRGOT   SEE IF DEFAULT IS CORRECT
01301P 02F7 27   10   0309        BEQ    CO2RTS   IF END, IT MUST BE
01302P 02F9 81   29      A        CMPA   #CLSPAR
01303P 02FB 27   0C   0309        BEQ    CO2RTS
01304P 02FD BD   0000    A        JSR    CHKCOM
01305P 0300 81   2C      A        CMPA   #COMMA   IF COMMA IF MUST BE
01306P 0302 27   05   0309        BEQ    CO2RTS
01307P 0304 BD   02CB    P        JSR    GETCLR   GET COLOR IN
01308P 0307 8D   0A   0313        BSR    DEFFOR
01309P 0309 0E   A5      A CO2RTS JMP    CHRGOT
01310P 030B D6   B2      A DEFCOL LDB    FORCLR   ASSUME FOREGROUND IS CORRECT
01311P 030D 0D   C2      A        TST    SETFLG   SEE IF PSET OR PRESET
01312P 030F 26   02   0313        BNE    DEFFOR
01313P 0311 D6   B3      A        LDB    BAKCLR
01314P 0313 D7   B4      A DEFFOR STB    ACTCLR
01315P 0315 86   55      A        LDA    #@125
01316P 0317 3D                    MUL
01317P 0318 D7   B5      A        STB    ACTCLE
01318P 031A 39                    RTS
01319                      *
01320                      * SAMALP IS CALLED TO SWITCH BACK TO ALPHA MODE FROM GRAPHICS
01321                      *
01322P 031B 26   23   0340 SAMMOD BNE    SAMGRP   CALLED BY SCREEN TO SELECT MODE
01323                             XDEF   SAMALP
01324P 031D 34   16      A SAMALP PSHS   D,X
01325P 031F 8E   FFC8    A        LDX    #SAM+&8
01326P 0322 A7   0A      A        STA    &10,X    SPEED LESSENS FLICKER IN MODE SWITCH
01327P 0324 A7   08      A        STA    &8,X     CHANGE LEAST IMPORTANT FIRST
01328P 0326 A7   06      A        STA    &6,X
01329P 0328 A7   04      A        STA    &4,X
01330P 032A A7   02      A        STA    &2,X
01331P 032C A7   01      A        STA    &1,X
01332P 032E A7   1E      A        STA    -&2,X
01333P 0330 A7   1C      A        STA    —&4,X
01334P 0332 A7   1A      A        STA    —&6,X
01335P 0334 A7   18      A        STA    -&8,X
01336P 0336 B6   0000    A        LDA    PIA1BD   GET PIA VALUE FOR VIDEO CONTROL
01337P 0339 84   07      A        ANDA   #&7      PRESERVE NON—VIDEO BITS
01338P 033B B7   0000    A        STA    PIA1BD   SETTING ALL VIDEO BIT TO 0
01339P 033E 35   96      A        PULS   D,X,PC   RETURN PRESERVING ALL REGISTERS
01340P 0340 34   16      A SAMGRP PSHS   D,X
01341P 0342 96   B6      A        LDA    SCMODE   GET GRAPHICS MODE TO SET
01342P 0344 8B   03      A        ADDA   #&3
01343P 0346 C6   10      A        LDB    #&16     MOVE OVER 4 BITS
01344P 0348 3D                    MUL             AND PUT RESULT IN [B]
01345P 0349 CA   80      A        ORB    #&128    ALWAYS TURN HIGH BIT ON
01346P 034B DA   C1      A        ORB    SCCSS
01347P 034D B6   0000    A        LDA    PIA1BD   GET OLD STATE OF PIA
01348P 0350 84   07      A        ANDA   #&7      PRESERVE LOW 3 BITS

PAGE  012  ECBGRP  .SA:1  TXRGRP NEW GRAPHICS CODE FOR 6847 COLOR COMPUTER

01349P 0352 34   02      A        PSHS   A
01350P 0354 EA   E0      A        ORB    ,S+      OR IN OLD WITH NEW
01351P 0356 F7   0000    A        STB    PIA1BD   SET UP FOR GRAPHICS NOW
01352P 0359 96   BA      A        LDA    SCBASE   GET SCREEN BASE
01353P 035B 44                    LSRA            AS A .5K COUNT
01354P 035C BD   0380    P        JSR    SETVAD   AND SET UP AS A VIDEO ADDRESS
01355P 035F 96   B6      A        LDA    SCMODE   GET SCREEN MODE AGAIN
01356P 0361 8B   03      A        ADDA   #&3      TO PROGRAM SAM CHIP
01357P 0363 81   07      A        CMPA   #&7      ONLY CHANGE IS MAP 7 TO 6
01358P 0365 26   01   0368        BNE    GSTVMD
01359P 0367 4A                    DECA
01360P 0368 8D   02   036C GSTVMD BSR    SETVMD   SET VIDEO MODE
01361P 036A 35   96      A        PULS   D,X,PC
01362P 036C C6   03      A SETVMD LDB    #&3      THREE BITS TO SET
01363P 036E 8E   FFC0    A        LDX    #SAM     START AT SAM BASE ADDRESS
01364P 0371 46             SETVLP RORA            SET IF NEXT BIT IS HIGH OR LOW
01365P 0372 24   04   0378        BCC    SETVZR   IF LOW STORE INTO LOW ADDRESS
01366P 0374 A7   01      A        STA    &1,X
01367P 0376 20   02   037A        BRA    SETVON
01368P 0378 A7   84      A SETVZR STA    ,X
01369P 037A 30   02      A SETVON LEAX   &2,X     MOVE UP TO SET NEXT BIT
01370P 037C 5A                    DECB            MORE BITS TO SET?
01371P 037D 26   F2   0371        BNE    SETVLP
01372P 037F 39                    RTS
01373P 0380 C6   07      A SETVAD LDB    #&7      SEVEN BITS TO SET IN VIDEO BASE
01374P 0382 8E   FFC6    A        LDX    #SAM+&6  STARTING PLACE IS 6 BYTES INTO SAM
01375P 0385 20   EA   0371        BRA    SETVLP
01376P 0387 B6   0000    A SETCSS LDA    PIA1BD   GET VIDEO STATUS
01377P 038A 84   F7      A        ANDA   #@377-@10 TURN OFF BIT 3
01378P 038C 9A   C1      A        ORA    SCCSS    OR IN CURRENT CSS VALUE
01379P 038E B7   0000    A        STA    PIA1BD   SET NEW VALUE TO PIA
01380P 0391 39             SETRTS RTS
01381
01382                      *
01383                      * PMODE SCREEN MODE (0-4),PAGE NUMBER (WHICH 1.5K BLOCK)
01384                      *
01385                             XDEF   PMODE
01386P 0392 81   2C      A PMODE  CMPA   #COMMA
01387P 0394 27   2B   03C1        BEQ    PMDPGS   IF NO MODE, READ NEW PAGE NUMBER
01388P 0396 BD   0000    A        JSR    GETBYT   GET THE MODE
01389P 0399 C1   05      A        CMPB   #&5      MAX MODE IS 4
01390P 039B 24   41   03DE        BCC    FCGRP1
01391P 039D 96   BC      A        LDA    SCRBAS   REINIT SCBASE TO PAGE 1
01392                             XDEF   XRPMOD
01393P 039F 97   BA      A XRPMOD STA    SCBASE
01394P 03A1 58                    ASLB            CONSTRUCT INDEX INTO SCREEN DATA TABLE
01395P 03A2 CE   0485    P        LDU    #SCRTAB+&1 EACH ENTRY HAS 2 BYTES
01396P 03A5 AB   C5      A        ADDA   B,U      NUMBER OF MEMORY PAGES IS #2
01397P 03A7 91   19      A        CMPA   TXTTAB   COMPARE WITH MAXIMUM
01398P 03A9 22   33   03DE        BHI    FCGRP1   NO MEMORY FOR THAT MODE
01399P 03AB 97   B7      A        STA    SCTOP    SET TOP ADDRESS OF SCREEN
01400P 03AD 33   5F      A        LEAU   -&1,U    GET FIRST BYTE IN TABLE
01401P 03AF A6   C5      A        LDA    B,U      WHICH IS THE SCWID FOR THE MODE
01402P 03B1 97   B9      A        STA    SCWID
01403P 03B3 54                    LSRB            GET BACK MODE
01404P 03B4 D7   B6      A        STB    SCMODE
01405P 03B6 4F                    CLRA            DEFAULT BACKROUND AND FOREGROUND
01406P 03B7 97   B3      A        STA    BAKCLR   COLORS

PAGE  013  ECBGRP  .SA:1  TXRGRP NEW GRAPHICS CODE FOR 6847 COLOR COMPUTER

01407P 03B9 86   03      A        LDA    #&3
01408P 03BB 97   B2      A        STA    FORCLR
01409P 03BD 9D   A5      A        JSR    CHRGOT   SEE IF ANY MORE ARGUMENT
01410P 03BF 27   1C   03DD        BEQ    SCRRTS
01411                             XDEF   PMDPGS
01412P 03C1 BD   0000    A PMDPGS JSR    COMBYT   FORCE COMMA AND READ PAGE
01413P 03C4 5D                    TSTB            ZERO NOT ALLOWED
01414P 03C5 27   17   03DE        BEQ    FCGRP1
01415P 03C7 5A                    DECB
01416P 03C8 86   06      A        LDA    #&6      CONVERT TO NUMBER OF MEMORY PAGES
01417P 03CA 3D                    MUL             IN [B]
01418P 03CB DB   BC      A        ADDB   SCRBAS   ADD ON BASE OF GRAPHICS MEMORY
01419P 03CD 34   04      A        PSHS   B        SAVE CANDIDATE FOR SCBASE
01420P 03CF DB   B7      A        ADDB   SCTOP    ADD ON SIZE OF CURRENT MODE
01421P 03D1 D0   BA      A        SUBB   SCBASE   WHICH IS SCTOP-SCBASE
01422P 03D3 D1   19      A        CMPB   TXTTAB   AND SEE IF HITTING PROGRAM
01423P 03D5 22   07   03DE        BHI    FCGRP1
01424P 03D7 D7   B7      A        STB    SCTOP    SETUP NEW TOP
01425P 03D9 35   04      A        PULS   B
01426P 03DB D7   BA      A        STB    SCBASE   AND NEW BOTTOM
01427P 03DD 39             SCRRTS RTS
01428
01429P 03DE 7E   0000    A FCGRP1 JMP    FCERR
01430
01431                      *
01432                      * SCREEN [ALPHA/GRAPHIC FLAG][,CSS FLAG]
01433                      *
01434                             XDEF   SCREEN
01435P 03E1 81   2C      A SCREEN CMPA   #COMMA   JUST CHANGE CSS
01436P 03E3 27   0B   03F0        BEQ    SCRCSS   SCAN CSS ARGUMENT
01437P 03E5 BD   0000    A        JSR    GETBYT   READ FLAG ALPHA/GRAPHIC
01438P 03E8 5D                    TSTB            SEE CONDITION CODES
01439P 03E9 BD   031B    P        JSR    SAMMOD   SELECT ALPHA IF ZERO ELSE GRAPHICS
01440P 03EC 9D   A5      A        JSR    CHRGOT
01441P 03EE 27   ED   03DD        BEQ    SCRRTS
01442P 03F0 BD   0000    A SCRCSS JSR    COMBYT   READ CSS FLAG
01443P 03F3 5D                    TSTB            ZERO OR NON-ZERO?
01444P 03F4 27   02   03F8        BEQ    SCRS2R
01445P 03F6 C6   08      A        LDB    #&8      B3 SHOULD DE SELECTED
01446P 03F8 D7   C1      A SCRS2R STB    SCCSS    SAVE FLAG
01447P 03FA 20   8B   0387        BRA    SETCSS   ACTUALLY CHANGE THE VALUE
01448                             XDEF   PCLEAR
01449P 03FC BD   0000    A PCLEAR JSR    GETBYT   READ IN NUMBER OF 1.5K BLOCKS ALLOWED
01450P 03FF 5D                    TSTB            MUST ALLOW AT LEAST ONE
01451P 0400 27   DC   03DE        BEQ    FCGRP1
01452P 0402 C1   09      A        CMPB   #&9      LIMIT IS 8 FOR 12K MAXIMUM
01453P 0404 24   D8   03DE CCFCER BCC    FCGRP1
01454P 0406 86   06      A        LDA    #&6      CONVERT 1.5K TO 256 BYTE
01455P 0408 3D                    MUL             TURN INTO 256 BYTE COUNT
01456P 0409 DB   BC      A        ADDB   SCRBAS   ADD BASE ADDRESS FOR GRAPHICS MEMORY
01457P 040B 1F   98      A        TFR    B,A      MAKE [D] CONTAIN ADDRESS OF NEW
01458P 040D C6   01      A        LDB    #&1      TXTTAB CANDIDATE
01459P 040F 1F   02      A        TFR    D,Y      SAVE TO SET IF LEGAL
01460P 0411 1093 B7      A        CMPD   SCTOP    SEE IF PROGRAM WOULD BE IN VIDEO
01461P 0414 1025 FBE8    A        LBCS   FCERR
01462P 0418 93   19      A        SUBD   TXTTAB   CALCULATE NEW VARTAB
01463P 041A D3   1B      A        ADDD   VARTAB   BY ADDING OLD VARTAB-OLD TXTTAB
01464P 041C 1F   01      A        TFR    D,X      ALSO SAVE VARTAB CANDIDATE

PAGE  014  ECBGRP  .SA:1  TXRGRP NEW GRAPHICS CODE FOR 6847 COLOR COMPUTER

01465P 041E C3   00C8    A        ADDD   #&200    ALLOW 200 BYTES EXTRA
01466P 0421 93   21      A        SUBD   STKTOP   ROOM AFTER END OF PROGRAM?
01467P 0423 24   B9   03DE        BCC    FCGRP1   SHOULD BE WELL BELOW STKTOP
01468P 0425 96   68      A        LDA    CURLIN   Executing a direct statement?
01469P 0427 4C                    INCA
01470P 0428 27   08   0432        BEQ    DIRSTA   Yes, leave TXTPTR as is.
01471P 042A 1F   20      A        TFR    Y,D      No, TXTPTR:=TXTPTR+(new TXTTAB-
01472P 042C 93   19      A        SUBD   TXTTAB   old TXTTAB) so it points to the
01473P 042E D3   A6      A        ADDD   TXTPTR   same place in the program after
01474P 0430 DD   A6      A        STD    TXTPTR   the program is moved.
01475P 0432 DE   1B      A DIRSTA LDU    VARTAB   FETCH OLD VARTAB FOR BLOCK TRANSFER
01476P 0434 9F   1B      A        STX    VARTAB   SAVE NEW VARTAB
01477P 0436 1193 1B      A        CMPU   VARTAB   MOVING UP OR DOWN?
01478P 0439 24   17   0452        BCC    PRGMVD   BLOCK TRANSFER DOWN
01479P 043B A6   C2      A PRGMVU LDA    ,-U      FETCH FROM OLD VARTAB GOING LOWER
01480P 043D A7   82      A        STA    ,-X      STORE INTO NEW VARTAB
01481P 043F 1193 19      A        CMPU   TXTTAB   REACHED OLD TXTTAB?
01462P 0442 26   F7   043B        BNE    PRGMVU   IF NOT, KEEP TRANSFERING
01483P 0444 109F 19      A        STY    TXTTAB   SET UP NEW TXTTAB
01484P 0447 6F   3F      A        CLR    -&1,Y    AND ZERO BYTE BEFORE IT
01485                             XDEF   PRGSET
01486P 0449 BD   0000    A PRGSET JSR    CHEADA   FIX UP THE LINKS
01487P 044C BD   0000    A        JSR    CLEARC   PERFORM A CLEAR TO SET NEW ARYTAB...
01488P 044F 7E   0000    A        JMP    NEWSTT   AND CONTINUE WITH PROGRAM
01489P 0452 DE   19      A PRGMVD LDU    TXTTAB   GET OLD TXTTAB TO MOVE DOWN FROM
01490P 0454 109F 19      A        STY    TXTTAB   SET UP NEW TXTTAB
01491P 0457 6F   3F      A        CLR    -&1,Y    AND FORCE ZERO BEFORE IT
01492P 0459 A6   C0      A PRGMVL LDA    ,U+      FETCH FROM TXTTAB UP
01493P 045B A7   A0      A        STA    ,Y+      AND STORE INTO NEW TXTTAB GOING UP
01494P 045D 109C 1B      A        CMPY   VARTAB   COMPARE AGAINST NEW VARTAB
01495P 0460 26   F7   0459        BNE    PRGMVL   ITERATE MOVING TO LOWER ADDRESSES
01496P 0462 20   E5   0449        BRA    PRGSET   FINISH UP PCLEAR
01497                             XDEF   PINIT
01498P 0464 C6   1E      A PINIT  LDB    #&30     ALLOW FOR MAXIMUM GRAPHICS
01499            0001    A        IFNE   REALIO
01500P 0466 D7   19      A        STB    TXTTAB   SAME AS PCLEAR 4
01501                             ENDC   IFN      REALIO
01502P 0468 86   06      A        LDA    #&6
01503                             XDEF   REPINT
01504P 046A 97   BC      A REPINT STA    SCRBAS   SAVE FOR FUTURE USE
01505P 046C 97   BA      A        STA    SCBASE
01506P 046E 4F                    CLRA
01507P 046F 97   B6      A        STA    SCMODE
01508P 0471 86   10      A        LDA    #&16
01509P 0473 97   B9      A        STA    SCWID
01510P 0475 86   03      A        LOA    #&3
01511P 0477 97   B2      A        STA    FORCLR
01512P 0479 86   0C      A        LDA    #&12
01513P 047B 97   B7      A        STA    SCTOP
01514P 047D 9E   19      A        LDX    TXTTAB
01515P 047F 6F   1F      A        CLR    -&1,X
01516P 0481 7E   0000    A        JMP    SCRTCH
01517P 0484      10      A SCRTAB FCB    &16      MODE 0 HAS SCWID 16
01518P 0485      06      A        FCB    &6       AND REQUIRE 6 256 BYTE PAGES OF MEMORY
01519P 0486      20      A        FCB    &32      MOVE TO 32 BYTE SCWID FOR COLOR
01520P 0487      0C      A        FCB    &12      AND DOUBLE THE MEMORY
01521P 0488      10      A        FCB    &16
01522P 0489      0C      A        FCB    &12

PAGE  015  ECBGRP  .SA:1  TXRGRP NEW GRAPHICS CODE FOR 6847 COLOR COMPUTER

01523P 048A      20      A        FCB    &32
01524P 048B      18      A        FCB    &24
01525P 048C      20      A        FCB    &32
01526P 048D      18      A        FCB    &24
01527P 048E DC   C5      A YDELTS LDD    Y2STOR   CALCULATE DELTA Y IN [D]
01528P 0490 93   BF      A        SUBD   YSTORE
01529P 0492 24   3B   04CF YDLCON BCC    YDLRTS
01530P 0494 34   01      A        PSHS   CC       Save carry and zero flags.
01531P 0496 BD   0B41    P        JSR    NEGD     Get a positive delta.
01532P 0499 35   81      A        PULS   CC,PC    Restore carry and zero and return.
01533
01534P 049B DC   C3      A XDELTS LDD    X2STOR   CALCULATE DELTA X
01535P 049D 93   BD      A        SUBD   XSTORE
01536P 049F 20   F1   0492        BRA    YDLCON
01537P                            XDEF   PCOPY
01538P 04A1 8D   1A   04BD PCOPY  BSR    PCOPR    READ A PAGE NUMBER ARGUMENT AND
01539P 04A3 34   06      A        PSHS   D        GET PAGE ADDRESS IN [D]
01540P 04A5                       SYNCHK TOTK     Format is PCOPY <source> TO <dest>.
01541P 04AA 8D   11   04BD        BSR    PCOPR    GET dest PAGE ARGUMENT
01542P 04AC 35   10      A        PULS   X        GET source PAGE IN [X]
01543P 04AE 1F   03      A        TFR    D,U      PUT dest PAGE IN [U]
01544P 04B0 108E 0300    A        LDY    #&0768   NUMBER OF BYTES ON A PAGE IS 2*768
01545P 04B4 EC   81      A PCOPLP LDD    ,X++     READ FROM SOURCE PAGE
01546P 04B6 ED   C1      A        STD    ,U++     AND STORE WITHOUT MODIFYING
01547P 04B8 31   3F      A        LEAY   -&1,Y
01548P 04BA 26   F8   04B4        BNE    PCOPLP
01549P 04BC 39                    RTS
01550P 04BD BD   0000    A PCOPR  JSR    GETBYT   PAGE NUMBERS ARE 1-8
01551P 04C0 5D                    TSTB            ZERO IS ILLEGAL
01552P 04C1 27   0D   04D0        BEQ    GFCER
01553P 04C3 5A                    DECB            MAP PAGE NUMBER TO 0 TO 7
01554P 04C4 86   06      A        LDA    #&6      TRANSLATE TO MEMORY ADDRESS
01555P 04C6 3D                    MUL             MAKE [B] NUMBER OF 256 BYTE PAGES
01556P 04C7 DB   BC      A        ADDB   SCRBAS   ADD GRAPHICS MEMORY BASE ADDRESS
01557P 04C9 D1   19      A        CMPB   TXTTAB   SHOULDN'T POINT INTO PROGRAM
01558P 04CB 24   03   04D0        BHS    GFCER
01559P 04CD lE   89      A        EXG    A,B      Turn it into a 16 bit address.
01560P 04CF 39             YDLRTS RTS             (A was zero from MUL.)
01561
01562                             TTL    Graphics PUT and GET
01563
01564
01565                      *
01566                      * GET[@](X1,Y1)-(X2,Y2),ARRAY NAME[,G]
01567                      * PUT[@](X1,Y1)-(X2,Y2),ARRAY NAME[ACTION=AND,OR,PSET,PRESET,NOT]
01568                      *
01569
01570P 04D0 7E   0000    A GFCER  JMP    FCERR    FUNCTION CALL FROM SEVERAL SOURCES
01571
01572                             XDEF   GET
01573P 04D3 5F             GET    CLRB            FLAG AS GET -- SHARE CODE WITH PUT
01574P 04D4 20   02   04D8        BRA    GGETCN
01575
01576                             XDEF   PUT
01577P 04D6 C6   01      A PUT    LDB    #&1      FLAG AS PUT NOT GET
01578P 04D8 D7   D8      A GGETCN STB    GTPTFL   SAVE INDICATION OF WHICH IT IS
01579P 04DA BD   0000    A        JSR    HKPTGT   ALLOW EXIT IN CASE GET/PUT USED OTHERPLACES
01580                             XDEF   GGPRET

PAGE  016  ECBGRP  .SA:1  TXRGRP Graphics PUT and GET

01581            04DD    P GGPRET EQU    *        This address is used by the code
01582                      *    the disk ROM hooks into HKPTGT to
01583                      *    determine if the caller was the
01584                      *    graphics PUT/GET code.
01585P 04DD 81   40      A        CMPA   #'@      ALLOW OPTIONAL @ FOR COMPATIBILITY
01586P 04DF 26   02   04E3        BNE    GGETC2
01587P 04E1 9D   9F      A        JSR    CHRGET   SKIP OVER THE @ SIGN
01588P 04E3 BD   0100    P GGETC2 JSR    CRDGET   SCAN THE COORDINATES
01589P 04E6 BD   0000    A        JSR    CHKCOM   SKIP COMMA AFTER COORDINATES
01590P 04E9 BD   064A    P        JSR    PGTARY   SCAN THE ARRAY NAME AND LOOK IT UP
01591                      •    [X] RECEIVES POINTER AT THE LENGTH
01592                      *    BYTES. AN FCERR IS GENERATED IF
01593                      *    THE ARRAY DOES NOT EXIST
01594P 04EC 1F   10      A        TFR    X,D      SAVE POINTER LENGTH BYTES IN [D]
01595P 04EE EE   84      A        LDU    ,X       [U]=LENGTH
01596P 04F0 33   5E      A        LEAU   -&2,U    DON'T INCLUDE NAME SIZE WHICH IS IN COUNT
01597P 04F2 33   CB      A        LEAU   D,U      SET [U]=ADDRESS JUST PAST END OF ARRAY
01598P 04F4 DF   D1      A        STU    ARYFIN   SAVE THIS SO WE MAKE SURE WE NEVER
01599                      *    READ OR WRITE THIS HIGH
01600P 04F6 30   02      A        LEAX   &2,X     MOVE TO POINT AT NUMBER OF DIMENSIONS
01601P 04F8 E6   84      A        LDB    ,X       [B]=NUMBER OF DIMENSIONS
01602P 04FA 58                    LSLB            [B]=BYTES USED BY DIMENSION SIZES
01603P 04FB 3A                    ABX             POINT AT THE BYTE JUST BEFORE THE DATA
01604                      *    SINCE WE NEVER ADDED ONE FOR THE
01605                      *    NUMBER OF DIMENSIONS
01606P 04FC 9F   CF      A        STX    ARYIDX   SAVE START ADDRESS IN ARRAY-1
01607P 04FE 96   06      A        LDA    VALTYP   MAKE SURE IT IS NOT A STRING ARRAY
01608P 0500 26   CE   04D0        BNE    GFCER    SINCE GARBAGE COLLECTION WOULD FAIL
01609P 0502 0F   D4      A        CLR    GGRPFL   ASSUME IT'S NOT GRAPHICS MODE
01610P 0504 9D   A5      A        JSR    CHRGOT   ANYTHING MORE ON THIS LINE?
01611P 0506 27   2D   0535        BEQ    GNOTRL   MUST BE CHARACTER MODE
01612P 0508 03   D4      A        COM    GGRPFL   SET GRAPHICS FLAG
01613P 050A BD   0000    A        JSR    CHKCOM   COMMA BEFORE TRAILING FLAGS
01614P 050D 0D   D8      A        TST    GTPTFL   IS IT PUT OR GET?
01615P 050F 26   07   0518        BNE    PUTTRL   HANDLING ACTION VERB ON PUT
01616P 0511                       SYNCHK 'G       GET ONLY ALLOWS ,G MEANING GRAPHICS
01617P 0516 20   30   0548        BRA    GETCN2
01618
01619P 0518 C6   05      A PUTTRL LDB    #PUTCNT  COUNT OF VERBS TO COMPARE AGAINST
01620P 051A 8E   05B7    P        LDX    #PUTTAB  TABLE WITH ADDRESSES AND VERBS
01621P 051D EE   81      A PUTTR2 LDU    ,X++     GET CANDIDATE FOR PUTAC0
01622P 051F 10AE 81      A        LDY    ,X++     GET CANDIDATE FOR PUTAC1
01623P 0522 A1   80      A        CMPA   ,X+      SEE IF MATCHES THE VERB
01624P 0524 27   06   052C        BEQ    PUTGOA   GO STORE ACTION ADDRESSES
01625P 0526 5A                    DECB            MORE ITEMS IN TABLE?
01626P 0527 26   F4   051D        BNE    PUTTR2   CONTINUE COMPARING
01627P 0529 7E   0000    A        JMP    SNERR    SYNTAX ERROR IF NO MATCH AT ALL
01628
01629P 052C 109F D5      A PUTGOA STY    PUTAC1   STORE ACTION IF BIT IS A 1
01630P 052F DF   D9      A        STU    PUTAC0   STORE ACTION IF BIT IS A 0
01631P 0531 9D   9F      A        JSR    CHRGET   SKIP OVER ACTION VERB
01632P 0533 20   13   0548        BRA    GETCN2   CONTINUE SCANNING
01633
01634P 0535 C6   F8      A GNOTRL LDB    #@377-&7 GET RID OF LAST 3 BITS IN BW MODE
01635P 0537 96   B6      A        LDA    SCMODE   SEE IF BW OR COLOR
01636P 0539 46                    RORA            BY TESTING LOW BIT
01637P 053A 24   02   053E        BCC    GNOTRB   ALREADY SET UP FOR BW
01638P 053C C6   FC      A        LDB    #@377-&3 GET RID OF LAST 2 BITS IN COLOR
