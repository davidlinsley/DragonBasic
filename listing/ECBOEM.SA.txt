PAGE  001  ECBOEM  .SA:1  IODRVR I/O DRIVER EQUATES

00001                             NAM    IODRVR
00002                             OPT    REL,LLE=120
00003                             TTL    I/O DRIVER EQUATES
00004                      *
00005                      * I/O DEVICE ADDRESS EQUATES
00006                      *
00007                      * CONVENTIONS USED:
00008                      *
00009                      * DDR = DATA DIRECTION REGISTER
00010                      * PDR = PERIPHERAL DATA REGISTER
00011                      * CR  = CONTROL REGISTER
00012                      * A   = A-SIDE OF PIA
00013                      * B   = B-SIDE OF PIA
00014                      * E.G.  P0CRA = CONTROL REGISTER FOR A-SIDE OF PIA SELECTED BY P0
00015                      * PIA ADDRESS EQUATES FOLLOW
00016                             XREF   VFIRQ,VIRQ,VNMI,VSWI,VSWI2,VSWI3,XRSLWC,FCERR
00017                      *
00018                      * P0 PIA
00019                      *
00020            FF00    A P0DDRA EQU    $FF00
00021            FF00    A P0PDRA EQU    P0DDRA
00022            FF01    A P0CRA  EQU    P0DDRA+1
00023            FF02    A P0DDRB EQU    P0DDRA+2
00024            FF02    A P0PDRB EQU    P0DDRB
00025            FF03    A P0CRB  EQU    P0DDRB+1
00026                      *
00027                      * RS232  6551 CHIP
00028                      *
00029            FF04    A RSTXD  EQU    $FF04
00030            FF04    A RSRXD  EQU    RSTXD
00031            FF05    A RSSTAT EQU    $FF05
00032            FF06    A RSCMD  EQU    $FF06
00033            FF07    A RSCNT  EQU    $FF07
00034                      *
00035                      * P1 PIA
00036                      *
00037            FF20    A P1DDRA EQU    $FF20
00038            FF20    A P1PDRA EQU    P1DDRA
00039            FF21    A P1CRA  EQU    P1DDRA+1
00040            FF22    A P1DDRB EQU    P1DDRA+2
00041            FF22    A P1PDRB EQU    P1DDRB
00042            FF23    A P1CRB  EQU    P1DDRB+1
00043                      *
00044                      * SAM CHIP EQUATES
00045                      *
00046            FFC0    A SAMCR  EQU    $FFC0    BASE ADDRESS OF SAM CONTROL REGISTER
00047            FFC9    A SAMF1S EQU    $FFC9    F1 SET ADDRESS
00048            FFDB    A SAMMOS EQU    $FFDB    M0 SET ADDRESS
00049            FFDD    A SAMM1S EQU    $FFDD    M1 SET ADDRESS
00050            FFDE    A SAMTYC EQU    $FFDE    MAP TYPE CLEAR ADDRESS
00051            FFDF    A SAMTYS EQU    $FFDF    "   "    SET     "
00052                      *
00053                      * ADDRESSES OF I/O DRIVER RAMS FOLLOW
00054                      *
00055            0082    A PWIDTH EQU    $82      PULSE WIDTH COUNTER
00056            0083    A BITCNT EQU    $83      BIT COUNTER (SYNC BITS NORMALLY)
00057            0084    A BPFLAG EQU    $84      BIT PHASE FLAG
00058            0085    A LSTSIN EQU    $85      LAST SINE TABLE ENTRY TO BE OUTPUT

PAGE  002  ECBOEM  .SA:1  IODRVR I/O DRIVER EQUATES

00059            0088    A CURADR EQU    $88      CURRENT CURSOR ADDRESS IN 88,89
00060            008F    A CBLCNT EQU    $8F      CURRENT CURSOR BLINK COUNT
00061            0090    A LDRCNT EQU    $90      COUNT OF NUMBER OF LEADER BYTES
00062            0092    A MIN0WD EQU    $92      MINIMUM CYCLE WIDTH OF 1200 HZ (IN PWIDTHS)
00063            0093    A MIN0PW EQU    $93      "    PULSE   "   "    "  "   "     "
00064            0094    A MAX0PW EQU    $94      MAXIMUM   "     "   "    "      "     "
00065            0095    A MODLAY EQU    $95      CASSETTE MOTOR DELAY VALUE
00066            0097    A KBDLAY EQU    $97      KEYBOARD DEBOUNCE DELAY VALUE
00067            0099    A LPTCFW EQU    $99      LINE PRINTER COMMA FIELD WIDTH
00068            009A    A LPTLCF EQU    $9A      "     "    LAST COMMA FIELD
00069            009B    A LPTWID EQU    $98      "     "    WIDTH
00070            009C    A LPTPOS EQU    $9C      "     "    CURRENT CHARACTER POSITION
00071            011D    A LSTKEY EQU    $011D    ASCII OF KEY CURRENTLY PRESSED
00072            011E    A CNTDWN EQU    $011E    COUNTDOWN TO KEYBOARD REPEAT
00073            011F    A RPTDLY EQU    $011F    INTER-REPEAT INTERRUPT COUNT
00074            0148    A AUTOLF EQU    $0148    BUFFER FULL AUTO LINE FEED FLAG
00075            0149    A ALLOCK EQU    $0149    ALPHA LOCK FLAG
00076            014A    A EOLSEQ EQU    $014A    LINE PRINTER EOL TERMINATOR SEQUENCE
00077            0151    A KBROLL EQU    $0151    KEYBOARD ROLLOVER PATTERN TABLE
00078            015A    A POTVAL EQU    $015A    START ADDRESS OF JOYSTICK READINGS
00079            03FD    A LDELAY EQU    $03FD    DELAY AFTER END OF PRINTING LINE
00080            03FF    A PRNFLG EQU    $03FF    SERIAL OR PARRALLEL PRINT FLAG
00081                      *
00082                      * CONSTANT VALUES FOLLOW
00083                      *
00084            00FF    A ON     EQU    $FF      ON VALUE
00085            00FF    A TRUE   EQU    ON       TRUE VALUE
00086            0000    A OFF    EQU    $00      OFF VALUE
00087            0000    A FALSE  EQU    OFF      FALSE VALUE
00088                      * CHARACTER CONSTANTS
00089            0020    A SP     EQU    $20      SPACE
00090            000D    A CR     EQU    $0D      CARRIAGE RETURN
00091            000A    A LF     EQU    $0A      LINE FEED
00092            0008    A BS     EQU    $08      BACK SPACE
00093            0060    A INVSP  EQU    $60      INVERTED SPACE
00094            0012    A SHIFT0 EQU    $12      SHIFTED 0 SPECIAL CASE
00095                      *
00096                      * MISC CONSTANTS
00097                      *
00098            0060    A SYNCNT EQU    $60      NUMBER OF BITS TO MAKE UP VALID SYNC DETECT
00099            0400    A HOMPOS EQU    $0400    HOME POSITION OF SCREEN VIDEO RAM
00200            05FF    A EOSPOS EQU    $05FF    END      "    "     "     "    "
00101            05E0    A BLPOS  EQU    $05E0    START OF LAST LINE ON SCREEN
00102            0084    A LWIDTH EQU    $84      LINE WIDTH OF PRINTER
00103            0010    A LCFW   EQU    $10      COMMA FIELD WIDTH
00104            0074    A LLCF   EQU    LWIDTH-LCFW LAST COMMA FIELD
00105            0008    A COLS   EQU    $08      NUMBER OF COLUMNS IN KB MATRIX
00106            045E    A MSEC10 EQU    $045E    10 MILLISECOND DELAY VALUE
00107            0032    A CBLVAL EQU    $32      CURSOR BLINK RATE CONSTANT
00108                      *
00109                      * END OF EQUATES
00110                      *
00111                      * START ADDRESS OF ROUTINES FOLLOWS
00112                      *
00113                             TTL    I/O DRIVER SUBROUTINES
00114                      * I/O DRIVER SUBROUTINES FOLLOW:
00115                      *
00116                      * HDRINI - HARDWARE INITIALISATION ROUTINE

PAGE  003  ECBOEM  .SA:1  IODRVR I/O DRIVER SUBROUTINES

00117                      *
00118P 0000      0007    A        RMB    $07      WASTE BYTES TO KEEP ADDRESSING COMPATABLE
00119                             XDEF   OEMMEM
00120            0007    P OEMMEM EQU    *
00121                             XDEF   ZHRDIN
00122            0007    P ZHRDIN EQU    *
00123P 0007 CC   0034    A HDRINI LDD    #$0034   A = DD BITS, B = CR BITS
00124P 000A 8E   FF00    A        LDX    #P0DDRA  SET UP BASE ADDRESS OF P0PIA
00125P 000D A7   01      A        STA    1,X      RESET P0CRA
00126P 000F A7   03      A        STA    3,X      AND P0CRB
00127P 0011 A7   84      A        STA    0,X      CONFIGURE P0DDRA FOR INPUTS
00128P 0013 43                    COMA            (A) = $FF
00129P 0014 A7   02      A        STA    2,X      AND P0DDRB AS OUTPUTS
00130P 0016 E7   01      A        STB    1,X      SET UP P0CRA & P0CRB - INTERRUPTS DISABLED
00131P 0018 E7   03      A        STB    3,X      -VE EDGE ON CA1/CB1 & CA2/CB2 IN CR3 FOLLOW
00132P 001A 8E   FF20    A        LDX    #P1D0RA  READY TO CONFIGURE P1PIA
00133P 001D 6F   01      A        CLR    1,X      RESET P1CRA
00134P 001F 6F   03      A        CLR    3,X      AND P1CRB
00135P 0021 4A                    DECA            (A) = $FE SETS PA0 AS INPUT, REST OUTPUTS
00136P 0022 A7   84      A        STA    0,X      DDRA SETUP
00137P 0024 86   F8      A        LDA    #$F8
00138P 0026 A7   02      A        STA    2,X      PB0,PB1,PB2 INPUTS, REST OUTPUTS
00139P 0028 E7   01      A        STB    1,X      CONFIGURE P1CR'S SAME AS P0CR'S
00140P 002A E7   03      A        STB    3,X
00141P 002C 6F   84      A        CLR    0,X      RESET DAC AND PRINTER STROBE
00142P 002E 6F   02      A        CLR    2,X      RESET VDG MODE LINES
00143P 0030 CC   0A98    A        LDD    #$0A98
00144P 0033 FD   FF06    A        STD    RSCMD    SET UP CONTROL/COMMAND REG.S
00145P 0036 B6   FF04    A        LDA    RSRXD    CLEAR RECEIVE DATA BUFFER
00146                      * NOW INITIALISE THE SAM CHIP
00147P 0039 8E   FFC0    A        LDX    #SAMCR   SET UP BASE ADDRESS OF SAM'S CR
00148P 003C C6   10      A        LDB    #16      COUNT OF BITS IN CR OF SAM
00149P 003E A7   81      A SAMCLR STA    0,X++    ACCESS EVERY EVEN ADDRESS
00150P 0040 5A                    DECB            CLEARING ALL CR BITS
00151P 0041 26   FB   003E        BNE    SAMCLR
00152P 0043 F7   FFC9    A        STB    SAMF1S   SETS F1 BIT IN SAM CR
00153P 0046 F7   FFDD    A        STB    SAMM1S   SELECTS 64K RAM OPTION
00154P 0049 20   03   004E        BRA    SAMEND   DON'T INITIALISE 48K SOFTWARE
00155
00156                             XDEF   ENTR48
00157P 004B 7E   0414    P ENTR48 JMP    BOOT64
00158
00159P 004E 5F             SAMEND CLRB
00160P 004F 1F   9B      A        TFR    B,DP     CLEARS THE DP REG
00161P 0051 1F   25      A        TFR    Y,PC     TRANSFER CONTROL TO ADDRESS IN IY
00162                      *
00163                      * SFTINI - SOFTWARE INITIALISATION ROUTINE
00164                      *
00165                             XDEF   ZSFTIN
00166            0053    P ZSFTIN EQU    *
00167P 0053 8E   006A    P SFTINI LDX    #NZDATA  GET READY TO COPY NON-ZERO TABLE ENTRIES
00168P 0056 CE   008F    A        LDU    #CBLCNT  INTO RAM BLOCK STARTING AT CBLCNT
00169P 0059 C6   0D      A        LDB    #13      (B) = COUNT OF BYTES TO COPY
00170P 005B 8D   05   0062        BSR    NZCOPY   INITIATE COPYING
00171P 005D BD   03CA    P        JSR    SFTIN2   PATCH FOR SERIAL PRINTER
00172P 0060 C6   09      A        LDB    #9       AND IS 9 BYTES IN LENGTH
00173P 0062 A6   80      A NZCOPY LDA    0,X+     GET TABLE DATA
00174P 0064 A7   C0      A        STA    0,U+     AND COPY TO RAM AREA

PAGE  004  ECBOEM  .SA:1  IODRVR I/O DRIVER SUBROUTINES

00175P 0066 5A                    DECB            UPDATE COUNT
001762 0067 26   F9   0062        BNE    NZCOPY   REPEAT UNTIL BLOCK COMPLETE
00177P 0069 39                    RTS
00178                      *
00179                      * NON-ZERO TABLE ENTRIES FOLLOW
00180                      *
00181P 006A      32      A NZDATA FCB    CBLVAL   CURSOR BLINK RATE
00182P 006B      0100    A        FDB    $0100    SYNC BYTE COUNT
00183P 006D      12      A        FCB    $12      MIN 1200HZ CYCLE WIDTH
00184P 006E      0A      A        FCB    $0A      "    "    PULSE   "   (HALF CYCLE)
00185P 006F      12      A        FCB    $12      MAX   "      "     "     "      "
00186P 0070      DA5C    A        FDB    MSEC10*50 MOTOR DELAY VALUE - HALF SECOND
00187P 0072      045E    A        FDB    MSEC10   KEYBOARD DEBOUNCE DELAY VALUE
00188P 0074      10      A        FCB    LCFW     LP COMMA FIELD WIDTH
00189P 0075      74      A        FCB    LLCF     LP LAST COMMA FIELD
00190P 0076      84      A        FCB    LWIDTH   LP WIDTH
00191                      * FINAL BLOCK ENTRIES
00192P 0077      FF      A        FCB    ON       LP BUFFER FULL AUTO LF FLAG
00193P 0078      FF      A        FCB    ON       ALPHA LOCK FLAG
00194P 0079      01      A        FCB    1        CHARACTER COUNT IN LP TERMINATOR SEQUENCE
00195P 007A      0D      A        FCB    CR       CARRIAGE RETURN FOLLOWED
00196P 007B      0A      A        FCB    LF       BY LINE FEED SEQUENCE (IF REQUIRED)
00197P 007C      0004    A        BSZ    4        REMAINDER OF SEQUENCE IS FREE
00198                      * END OF NZDATA
00199                      *
00200                      * CBLINK - CURSOR BLINK ROUTINE
00201                      *
00202                             XDEF   ZCBLIN
00203            0080    P ZCBLIN EQU    *
00204P 0080 0A   8F      A CBLINK DEC    CBLCNT   UPDATE BLINK RATE COUNTER
00205P 0082 26   0C   0090        BNE    BLDLAY   IF .NE. 0 THEN DELAY 10 MSECS
00206P 0084 86   32      A        LDA    #CBLVAL  OTHERWISE RESET TO INITIAL VALUE
00207P 0086 97   8F      A        STA    CBLCNT   FOR BLINK RATE
00208P 0088 9E   88      A        LDX    CURADR   GET READY TO FLASH CURSOR
00209P 008A A6   84      A        LDA    0,X      BY READING CHAR AT CURSOR POS
00210P 008C 88   40      A        EORA   #$40     AND INVERTING
00211P 008E A7   84      A        STA    0,X      BEFORE WRITING BACK
00212P 0090 8E   045E    A BLDLAY LDX    #MSEC10  SET UP 10 MSEC DELAY CONSTANT
00213                      *
00214                      * IXDLAY - DELAY ROUTINE
00215                      *
00216P 0093 30   1F      A IXDLAY LEAX   -1,X     DECREMENT IX
00217P 0095 26   FC   0093        BNE    IXDLAY   REPEAT UNTIL (IX) = 0
00218P 0097 39                    RTS
00219                      *
00220                      * ROUTINES USED BY THEKEYBOARD POLLER FOLLOW
00221                      *
00222                      * CHKROW - CHECKS ROWS OF K/B MATRIX FOR CLOSURE
00223                      *
00224P 0098 F6   FF00    A CHKROW LDB    P0PDRA   READ ROW DATA
00225P 009B CA   80      A        ORB    #$80     SET UNUSED BIT
00226P 009D 7D   FF02    A        TST    P0PDRB   SHIFT KEY IS
00227P 00A0 2B   02   00A4        BMI    NOSHFT   IS MASKED OUT
00226P 00A2 CA   40      A        ORB    #$40     BY THIS
00229P 00A4 39             NOSHFT RTS
00230                      *
00231                      * CSHIFT - CHECKS THE STATE OH THE SHIFT KEY, Z = 1 IF PRESSED
00232                      *

PAGE  005  ECBOEM  .SA:1  IODRVR I/O DRIVER SUBROUTINES

00233P 00A5 C6   7F      A CSHIFT LDB    #$7F     CLEAR TOP BIT
00234P 00A7 F7   FF02    A        STB    P0PDRB   OF THE COLUMNS
00235P 00AA F6   FF00    A        LDB    P0PDRA   THEN READ ROWS
00236P 00AD C4   40      A        ANDB   #$40     MASK OFF ALL BUT SHIFT KEY
00237P 00AF 39                    RTS
00238                      *
00239                      * POLCAT - POLL THE K/B AND RETURN CHARACTER IN (A)
00240                      *
00241                             XDEF   ZPOLCA
00242            00B0    P ZPOLCA EQU    *
00243P 00B0 34   14      A POLCAT PSHS   B,X      SAVE REGS
00244P 00B2 8D   03   00B7        BSR    POLLKB   POLL AND ENCODE KEYS
00245P 00B4 7E   03AB    P        JMP    KEYINT   INITILISE REPEAT COUNTDOWN
00246                      *
00247                      * POLLKB - POLLS THE K/B, DETECTS KEY CLOSURES, DEBOUNCES KEYS, PERFORMS
00248                      * ROLLOVER AND ENCODES CHARACTERS
00249                      *
00250P 00B7 32   7E      A POLLKB LEAS   -2,S     RESERVE 2 BYTES OF WORKSPACE ON STACK
00251P 00B9 8E   0151    A        LDX    #KBROLL  SET UP ADDRESS OF KB ROLLOVER TABLE
00252                      * THE FIRST THING TO DO IS TO CHECK FOR ANY KEY CLOSURES WHATSOEVER
00253P 00BC 7F   FF02    A        CLR    P0PDRB   FORCE 0'S TO ALL COLUMNS
00254P 00BF F6   FF00    A        LDB    P0PDRA   READ ROW STATUS
00255P 00C2 CA   80      A        ORB    #$80     SET UNUSED BIT
00256P 00C4 E1   84      A        CMPB   0,X      CHECK FOR ANY KEYBOARD ACTIVITY
00257P 00C6 27   72   013A        BEQ    NONKEY   IF THE SAME THEN NO CHANGE
00256                      * SOME CHANGE HAS BEEN DETECTED AT THIS POINT SO NEXT THING TO DO
00259                      * IS TO MAKE SURE THAT IT WASN'T THE JOYSTICK BUTTONS.
00260P 00C8 1F   98      A        TFR    B,A      SAVE ROW STATUS
00261P 00CA 73   FF02    A        COM    P0PDRB   FORCE 1'S TO COLUMNS
00262P 00CD 8D   C9   0098        BSR    CHKROW   CHECK FOR JOYSTICK BUTTONS
00263P 00CF C1   FF      A        CMPB   #$FF     AS 0'S ON THE PA0 OR PA1
00264P 00D1 26   67   013A        BNE    NONKEY   MEAN BUTTONS ARE DOWN
00265P 00D3 A7   80      A        STA    0,X+     SAVE FULL ROW STATE IN ROLLOVER TABLE
00266                      * AT THIS POINT A CHANGE IN THE STATE OF THE ROWS HAS BEEN DETECTED
00267                      * SO THE FOLLOWING CODE IS USED TO DETECT WHICH KEY IT WAS
00268P 00D5 6F   E4      A        CLR    0,S      RESET COLUMN COUNT
00269P 00D7 C6   FE      A        LDB    #$FE     SET UP 0 IN LS BIT
00270P 00D9 F7   FF02    A        STB    P0PDRB   AND SEND OUT TO MATRIX COLUMNS
00271P 00DC 8D   BA   0098 SCANKB BSR    CHKROW   CHECK ROW CLOSURES
00272P 00DE E7   61      A        STB    1,S      SAVE ROW STATE AWAY
00273P 00E0 E8   84      A        EORB   0,X      PERFORM KEY CLOSURE AND ROLLOVER DETECTION
00274P 00E2 E4   84      A        ANDB   0,X      BIT SET IN B IF IT DIFFERED FROM LAST TIME
00275P 00E4 A6   61      A        LDA    1,S      RESTORE ROW STATE AND
00276P 00E6 A7   80      A        STA    0,X+     SAVE IN ROLLOVER TABLE FOR NEXT TIME
00277P 00E8 5D                    TSTB            ANY CHANGES TO KEYS?
00276P 00E9 26   0A   00F5        BNE    DEBKEY   YES, DEBOUNCE BEFORE ENCODING
00279P 00EB 6C   E4      A        INC    0,S      ELSE UPDATE COLUMN COUNT
00280P 00ED 43                    COMA            USED TO SET CARRY BIT
00281P 00EE 79   FF02    A        ROL    P0PDRB   BEFORE SHIFTING 0 T0 NEXT COLUMN
00282P 00F1 25   E9   00DC        BCS    SCANKB   REPEAT UNTIL ALL DONE OR CLOSURE FOUND
00283P 00F3 20   45   013A        BRA    NONKEY   MUST HAVE BEEN NO KEYS FOUND
00284                      * KEY FOUND - DEBOUNCE IT
00285P 00F5 9E   97      A DEBKEY LDX    KBDLAY   WAIT DEBOUNCE PERIOD
00285P 00F7 8D   9A   0093        BSR    IXDLAY   BEFORE RE-CHECKING KB
00267P 00F9 1E   89      A        EXG    A,B      COPY ORIGINAL KEY CLOSURE
00288P 00FB 8D   9B   0098        BSR    CHKROW   AND GET NEW STATE
00289P 00FD E1   61      A        CMPB   1,S      AND COMPARE WITH ORIGINAL
00290P 00FF 1E   89      A        EXG    A,B      RESTORE KEY CLOSURE

PAGE  006  ECBOEM  .SA:1  IODRVR I/O DRIVER SUBROUTINES

00291P 0101 26   37   013A        BNE    NONKEY   IF NO MATCH NO KEY RETURNED
00292                      * MUST BE A VALID KEY AT THIS POINT SO ENCODE IT
00293P 0103 A6   E4      A        LDA    0,S      PICK UP COLUMN COUNT
00294P 0105 80   08      A        SUBA   #COLS    OFFSET IT
00295P 0107 8B   08      A NXTROW ADDA   #COLS    CALCULATE KEY POSITION AS FOLLOWS
00296P 0109 54                    LSRB            KEY POS = (ROWPPOS)*(COLS) + (COL POS)
00297P 010A 24   FB   0107        BCC    NXTROW   ROW POS = BIT SET IN (B)
00298P 010C 4D                    TSTA            KEY POS = 0 IS A
00299P 010D 27   32   0141        BEQ    KEY0     SPECIAL CASE
00300P 010F 81   0C      A        CMPA   #$0C     CHECK NUMERIC KEY RANGE
00301P 0111 25   17   012A        BLO    NUMKEY   WHICH IS $00 — $0B
00302P 0113 81   11      A        CMPA   #$11     CHECK SPECIAL CASE RANGE
00303P 0115 25   28   013F        BLO    SPEC1    WHICH IS $0C — $10
00304P 0117 81   2A      A        CMPA   #$2A     AND FINALLY CHECK RANGE
00305P 0119 22   22   013D        BHI    SPEC2    $2B ONWARDS SPECIAL CASE
00306                      * MUST BE ALPHABETIC CHARACTER IF HERE
00307P 011B 8B   30      A        ADDA   #$30     ADD OFFSET FOR ASCII UPPER CASE
00308P 011D 8D   86   00A5        BSR    CSHIFT   AND CHECK WHETHER TO SHIFT
00309P 011F 27   12   0133        BEQ    CODED    IF SHIFT THEN UPPER CASE REMAINS
00310                      * COULD BE LOWER CASE AT THIS POINT SO CHECK ALPHA LOCK
00311P 0121 7D   0149    A        TST    ALLOCK
00312P 0124 26   0D   0133        BNE    CODED    IF ON THEN UPPER CASE OK
00313P 0126 8A   20      A        ORA    #$20     ELSE CONVERT TO LOWER CASE
00314P 0128 20   09   0133        BRA    CODED    BEFORE EXIT
00315                      * NUMERIC (+ OTHERS) ENCODED HERE
00316P 012A 8B   30      A NUMKEY ADDA   #$30     CONVERT TO ASCII
00317P 012C 17   FF76 00A5        LBSR   CSHIFT   CHECK SHIFT KEY
00318P 012F 26   02   0133        BNE    CODED    UNSHIFTED — NO CHANGE
00319P 0131 80   10      A        SUBA   #$10     ELSE CONVERT TO UPPER SET
00320P 0133 81   12      A CODED  CMPA   #SHIFT0  CHECK FOR ALPHA LOCK TOGGLE
00321P 0135 26   04   013B        BNE    POLEND
00322P 0137 73   0149    A        COM    ALLOCK   TOGGLE IF FOUND
00323P 013A 4F             NONKEY CLRA            NO KEY CLOSURE EXIT CONDITION
00324P 013B 35   90      A POLEND PULS   X,PC     TIDY UP WORKSPACE AND RETURN
00325                      * SPECIAL CASES FOLLOW
00326P 013D 80   1A      A SPEC2  SUBA   #26      MAKE SPECIAL CASES CONTIGUOUS
00327P 013F 80   0B      A SPEC1  SUBA   #11      AND OFFSET IN RANGE 1 —>
00328P 0141 48             KEY0   ASLA            2 ENTRIES/KEY
00329P 0142 17   FF60 00A5        LBSR   CSHIFT   CHECK FOR SHIFTED SET
00330P 0145 26   01   0148        BNE    LOOKUP
00331P 0147 4C                    INCA            SHIFTED SET ENTRY OFFSET
00332P 0148 8E   014F    P LOOKUP LDX    #KEYTAB  SET UP LOOKUP TABLE BASE
00333P 014B A6   86      A        LDA    A,X      LOOKUP KEY ENTRY
00334P 014D 20   E4   0133        BRA    CODED    AND RETURN IT
00335                      * KEY CODE LOOKUP TABLE FOLLOWS
00336                      * SECOND ENTRY OF EACH IS THE SHIFTED KEY
00337P 014F      30      A KEYTAB FCB    '0,SHIFT0
00338P 0151      2C      A        FCB    ',,'<
00339P 0153      2D      A        FCB    '-,'=
00340P 0155      2E      A        FCB    '.,'>
00341P 0157      2F      A        FCB    '/,'?
00342P 0159      40      A        FCB    '@,$13
00343P 015B      5E      A        FCB    $5E,$5F  UP ARROW
00344P 015D      0A      A        FCB    LF,$5B   DOWN ARROW
00345P 015F      08      A        FCB    BS,$15   LEFT ARROW
00346P 0161      09      A        FCB    $09,$5D  RIGHT ARROW
00347P 0163      20      A        FCB    SP,SP    SPACE
00348P 0165      0D      A        FCB    CR,CR    ENTER

PAGE  007  ECBOEM  .SA:1  IODRVR I/O DRIVER SUBROUTINES

00349P 0167      0C      A        FCB    $0C,$5C  CLEAR
00350P 0169      03      A        FCB    $03,$03  BREAK
00351                      *
00352                      * SCREEN OUTPUT ROUTINES FOLLOW
00353                      *
00354                      * CLREOL - CLEARS THE SCREEN TO THE END OF THE CURRENT LINE
00355                      *
00356P 016B 86   60      A CLREOL LDA    #INVSP   FILL REST OF THE LINE
00357P 016D A7   80      A        STA    0,X+     SPACES WRITTEN TO VRAM
00358P 016F 1F   10      A        TFR    X,D      NOW CHECK FOR EOL
00359P 0171 C4   1F      A        ANDB   #$1F     BY ANDING WITH LINE LENGTH
00360P 0173 26   F6   016B        BNE    CLREOL   REPEATS UNTIL COL 32
00361P 0175 39                    RTS
00362                      *
00363                      * SCROUT - OUTPUTS A CHARACTER TO THE SCREEN
00364                      *
00365                             XDEF   ZSCROU
00366            0176    P ZSCROU EQU    *
00367P  0176 34  16      A SCROUT PSHS   A,B,X    SAVE REGS
00368P  0178 9E  88      A        LDX    CURADR   FETCH CURSOR POSITION
00369P  017A 81  08      A        CMPA   #BS      CHECK FIRST FOR BACK SPACE
00370P  017C 26  0B   0189        BNE    CHKCR
00371                      * BACK SPACE TO BE OUTPUT
00372P  017E 8C  0400    A        CMPX   #HOMPOS  CAN'T BACK UP WHEN HOMED
00373P  0181 27  3B   01BE        BEQ    SCEXIT   SO EXIT
00374P  0183 86  60      A        LDA    #INVSP   PREPARE TO DELETE CURRENT
00375P  0185 A7  82      A        STA    0,-X     CHARACTER AND MOVE LEFT
00376P  0187 20  1D   01A6        BRA    NXTPOS   THEN UPDATE SCREEN POS
00377P  0189 81  0D      A CHKCR  CMPA   #CR      NOW CHECK FOR ENTER
00378P  018B 26  04   0191        BNE    CHKCNT
00379P  018D 8D  DC   016B        BSR    CLREOL   CLEAR TO EOL IF IT IS
00380P  018F 20  15   01A6        BRA    NXTPOS
00361                      * CHECK FOR CONTROL CHARACTERS NOW
00382P  0191 81  20      A CHKCNT CMPA   #SP      NON-PRINTING CHARACTER
00383P  0193 25  29   01BE        BLO    SCEXIT   YES, THEN EXIT
00384P  0195 4D                   TSTA            ELSE CHECK FOR GRAPHIC (MS BIT SET)
00385P  0196 2B  0C   01A4        BMI    OUTCHR   OUTPUT AS IS IF FOUND
00386P  0198 81  40      A        CMPA   #$40     NON-ALPHA CHECK
00367P  019A 25  06   01A2        BLO    CONVCH
00388P  019C 81  60      A        CMPA   #$60     LOWER CASE ALPHAS
00389P  019E 25  04   01A4        BLO    OUTCHR   OUTPUT AS IS IF NOT
00390P  01A0 84  DF      A        ANDA   #$DF     LCASE SO MASK OFF D6
00391P  01A2 88  40      A CONVCH EORA   #$40     INVERT CHARACTER
00392P  01A4 A7  80      A OUTCHR STA    0,X+     UPDATE VRAM AT CURSOR
00393P  01A6 9F  88      A NXTPOS STX    CURADR   UPDATE CURSOR POSITION
00394P  01A8 8C  05FF    A        CMPX   #EOSPOS  REACHED END OF SCREEN?
00395P  01AB 23  11   01BE        BLS    SCEXIT   NO, SO EXIT OK
00396P  01AD 8E  0400    A        LDX    #HOMPOS  YES, THEN SCROLL UP BY
00397P  01B0 EC  88 20   A SCROLL LDD    $20,X    COPYING EACH LINE TO
00398P  01B3 ED  81      A        STD    0,X++    THE ONE ABOVE
00399P  01B5 8C  05E0    A        CMPX   #BLPOS   UNTIL LAST LINE DONE
00400P  01B8 25  F6   01B0        BLO    SCROLL
00401                      * NOW AT START OF THE BOTTOM LINE.
00402P  01BA 9F  88      A        STX    CURADR   SAVE NEW CURSOR POSITION
00403P  01BC 8D  AD   016B        BSR    CLREOL   BEFORE CLEARING BOTTOM LINE
00404P  01BE 35  96      A SCEXIT PULS   A,B,X,PC RESTORE AND RETURN
00405                      *
00406                      * LINE PRINTER ROUTINES FOLLOW

PAGE  008  ECBOEM  .SA:1  IODRVR I/O DRIVER SUBROUTINES

00407                      *
00406                      * TXLPCH - TRANSMITS A CHARACTER TO THE LINE PRINTER
00409                      *
00410P 01C0 34   04      A TXLPCH PSHS   B        SAVE REG
00411P 01C2 7D   03FF    A        TST    PRNFLG   TEST PRINTER TYPE
004I2P 01C5 7E   0390    P        JMP    PRNSEL   GO FIND OUT WHICH
00413P 01C8 B7   FF02    A LPROUT STA    P0PDRB   SEND CHARACTER OUT
00414P 01CB C6   02      A        LDB    #2       SET UP STROBE BIT
00415P 01CD F7   FF20    A        STB    P1PDRA   SEND STROBE, PULSE HI
00416P 01D0 7F   FF20    A        CLR    P1PDRA   THEN PULSE LO
00417                      * N.B. THE STROBE PULSE IS INVERTED BY THE LS02 SO
00418                      * ACTUAL STROBE TO PRINTER IS LO FOLLOWED BY HI
00415P 01D3 35   84      A        PULS   B,PC     RESTORE AND RETURN
00420                      *
00421                      * TXEOL - TRANSMITS THE END OF LINE TERMINATING SEQUENCE
00422                      *
00423P 01D5 8E   014A    A TXEOL  LDX    #EOLSEQ  SET UP EOL SEQUENCE ADDRESS
00424P 01D8 E6   80      A        LDB    0,X+     GET COUNT OF CHARACTERS IN IT
00425P 01DA 5D             TXSEQ  TSTB            COUNT = 0 ?
00426P 01DB 27   07   01E4        BEQ    ENDSEQ   YES, SO FINISH
00427P 01DD A6   80      A        LDA    0,X+     PICK UP NEXT CHARACTER
00428P 01DF 8D   DF   01C0        BSR    TXLPCH   TRANSMIT IT
00429P 01E1 7E   03D7    P        JMP    EOLDLY   DO WE HAVE AN EOL DELAY
00430P 01E4 39             ENDSEQ RTS
00431                      *
00432                      * LPTOUT - OUTPUT A CHARCTER TO PRINTER INTERFACE
00433                      *
00434                             XDEF   ZLPTOU
00435            01E5    P ZLPTOU EQU    *
00436P 01E5 34   16      A LPTOUT PSHS   A,B,X    SAVE REGS
00437                      * DISABLE INTERRUPTS AT THIS POINT?
00438P 01E7 81   0D      A        CMPA   #CR      CR?
00439P 01E9 27   13   01FE        BEQ    LPTEOL   YES, DEAL WITH EOL
00440P 01EB 81   20      A        CMPA   #SP      PRINTABLE?
00441P 01ED 25   02   01F1        BLO    SENDCH   NO, SO SKIP POS UPDATE
00442P 01EF 0C   9C      A        INC    LPTPOS   YES, UPDATE PRINT POS
00443P 01F1 8D   CD   01C0 SENDCH BSR    TXLPCH   AND SEND CHARACTER
00444P 01F3 D6   9C      A        LDB    LPTPOS   CHECK PRINT POS
00445P 01F5 D1   9B      A        CMPB   LPTWID   BUFFER FULL?
00446P 01F7 25   11   020A        BLO    LPEXIT   NO, SO OK TO EXIT
00447P 01F9 7D   0148    A        TST    AUTOLF   AUTO LINEFEED?
00448P 01FC 26   0A   0208        BNE    NXTLN    YES, NO ACTION NEEDED
00449                      * END OF LINE REACHED, CR OR NO AUTO LF ON BUFFER FULL
00450P 01FE 0D   9C      A LPTEOL TST    LPTPOS   EMPTY BUFFER?
00451P 0200 26   04   0206        BNE    NEWLN    NO, SO FLUSH BUFFER
00452P 0202 86   20      A        LDA    #SP      YES, SEND OUT A SPACE
00453P 0204 8D   BA   01C0        BSR    TXLPCH   BEFORE
00454P 0206 8D   CD   01D5 NEWLN  BSR    TXEOL    SENDING EOL SEQUENCE
00455P 0208 0F   9C      A NXTLN  CLR    LPTPOS   RESET PRINTER POSITION
00456P 020A 35   96      A LPEXIT PULS   A,B,X,PC RESTORE AND RETURN
00457                      *
00458                      * JOYSTICK ROUTINE NEXT
00459                      *
00460                      * JOYSEL - SELECT ONE THE JOYSTICK CHANNELS (0-3)
00461                      *
00462P 020C CE   FF01    A JOYSEL LDU    #P0CRA   FIRST TIME THRU SETS UP
00463P 020F 8D   00   0211        BSR    NEWCR3   LSB OF MUX, SELECT CA2
00464P 0211 A6   C4      A NEWCR3 LDA    0,U      READ CURRENT CR VALUE

PAGE  009  ECBOEM  .SA:1  IODRVR I/O DRIVER SUBROUTINES

00465P 0213 84   F7      A        ANDA   #$F7     RESET CR3
00466P 0215 56                    RORB            MOVE LS BIT INTO CARRY
00467P 0216 24   02   021A        BCC    CR3WRT
00468P 0218 8A   08      A CR3SET ORA    #8       SETS CR3 IF LS BIT OF (B) SET
00469P 021A A7   C1      A CR3WRT STA    0,U++    COPY NEW CR3 BACK & SET UP
00470P 021C 39                    RTS             CRB FOR SECOND TIME THRU
00471                      *
00472                      * JOYIN - READS THE JOYSTICK CHANNELS
00473                      *
00474                             XDEF   ZJOYIN
00475            021D    P ZJOYIN EQU    *
00476P 021D 32   7D      A JOYIN  LEAS   -3,S     RESERVE 3 BYTES OF STACK WORKSPACE
00477P 021F 8E   015E    A        LDX    #POTVAL+4 USES AUTO-DEC SO ADDRESS 1 PAST END
00478P 0222 C6   03      A        LDB    #3       STARTS OFF WITH JOYSTICK(3)
00479P 0224 86   0A      A NXTJOY LDA    #10      NUMBER OF TRIES ON UNEQUAL READINGS
00480P 0226 ED   61      A        STD    1,S      SAVE JOYSTICK NO. AND RETRY VALUE
00481P 0228 8D   E2   020C        BSR    JOYSEL   SELECT JOYSTICK(B)
00482P 022A CC   4080    A RETRY  LDD    #$4080   1/4 FSD IN (A), 1/2 FSD IN (B)
00483P 022D A7   E4      A NXTTRY STA    0,S      SCALE INCREMENT STORED AWAY
00484P 022F F7   FF20    A        STB    P1PDRA   SEND APPROX. TO DAC
00485P 0232 7D   FF00    A        TST    P0PDRA   CHECK COMPARATOR RESULT
00486P 0235 2B   04   023B        BMI    CMPLOW   BY TESTING PA7 BIT
00487                      * PA7 = 0 SO APPROX. > JOYSTICK VALUE SO SUBTRACT INCREMENT
00488P 0237 E0   E4      A        SUBB   0,S
00489P 0239 20   02   023D        BRA    OVER
00490                      * PA7 = 1 SO APPROX. < JOYSTICK VALUE SO ADD INCREMENT
00491P 023B EB   E4      A CMPLOW ADDB   0,S
00492P 023D 44             OVER   LSRA            NEW INCREMENT = 1/2 OLD
00493P 023E 81   01      A        CMPA   #1       ALL 6 BITS DONE?
00494P 0240 26   EB   022D        BNE    NXTTRY   NO, TRY NEXT APPROX.
00495P 0242 54                    LSRB            NORMALISE
00496P 0243 54                    LSRB            FINAL RESULT
00497P 0244 E1   1F      A        CMPB   -1,X     SAME AS LAST READING?
00498P 0246 27   04   024C        BEQ    GOTJOY   YES, SO FINISH
00499P 0248 6A   61      A        DEC    1,S      NO, SO RETRY
00500P 024A 26   DE   022A        BNE    RETRY    A NUMBER OF TIMES
00501P 024C E7   82      A GOTJOY STB    0,-X     LAST READING UPDATES POTVALS
00502P 024E E6   62      A        LDB    2,S      RESTORE JOYSTICK NO.
00503P 0250 5A                    DECB            GET NEXT ONE
00504P 0251 2A   D1   0224        BPL    NXTJOY   FINISH AFTER JOYSTICK(0)
00505P 0253 35   92      A        PULS   A,X,PC   TIDY UP STACK AND RETURN
00506                      *
00507                      * CASSETTE ROUTINES FOLLOW
00508                      *
00509                      * CLEVEL - READ THE INPUT LEVEL AT THE CASSETTE INPUT PIN
00510                      *
00511P 0255 0C   82      A CLEVEL INC    PWIDTH   UPDATE PULSE WIDTH COUNTER
00512P 0257 F6   FF20    A        LDB    P1PDRA   READ CASSETTE INPUT LEVEL
00513P 025A 56                    RORB            WHICH IS RETURNED IN CARRY
00514P 025B 39                    RTS
00515                      *
00516                      * BCYCLE - CALCULATES THE BIT CYCLE WIDTH
00517                      *
00518P 025C 0F   82      A BCYCLE CLR    PWIDTH   RESET WIDTH COUNT - USED FOR CYCLE WIDTH
00519P 025E 0D   64      A        TST    BPFLAG   CHECK SIGNAL PHASE
00520P 0260 26   07   0269        BNE    FALLER
00521                      * THE FIRST 1/2 OF CYCLE STARTS WITH A HI PULSE
00522P 0262 8D   07   026B RISER  BSR    HANGHI   START SAMPLING  IN HI PHASE

PAGE  010  ECBOEM  .SA:1  IODRVR I/O DRIVER SUBROUTINES

00523P 0264 8D   EF   0255 HANGLO BSR    CLEVEL   STOP SAMPLING WHEN
00524P 0266 24   FC   0264        BCC    HANGLO   RISING EDGE DETECTED
00525P 0268 39                    RTS
00526                      * THE FIRST 1/2 OF CYCLE STARTS WITH A LO PULSE
00527P 0269 8D   F9   0264 FALLER BSR    HANGLO   START SAMPLING IN LO PULSE
00528P 026B 8D   E8   0255 HANGHI BSR    CLEVEL   STOP SAMPLING WHEN
00529P 026D 25   FC   026B        BCS    HANGHI   FALLING EDGE DETECTED
00530P 026F 39                    RTS
00531                      *
00532                      * BITIN - RECOVERS BIT FROM CASSETTE, RETURNED IN CARRY
00533                      *
00534                             XDEF   ZBITIN
00535            0270    P ZBITIN EQU    *
00536P 0270 8D   EA   025C BITIN  BSR    BCYCLE   GET BIT CYCLE WIDTH
00537P 0272 D6   82      A        LDB    PWIDTH   PULSE WITDTH = CYCLE WIDTH
00538P 0274 5A                    DECB            WILL BE 1 TOO MANY
00539P 0275 D1   92      A        CMPB   MIN0WD   C SET IF (B) < MIN0WD = 1
00540P 0277 39                    RTS             C CLEAR IF (B) > MIN0WD = 0
00541                      *
00542                      * CBIN - RECOVERS A BYTE FROM CASSETTE
00543                      *
00544                             XDEF   ZCBIN
00545            0278    P ZCBIN  EQU    *
00546P 0278 86   08      A CBIN   LDA    #8       SET UP COUNT OF BITS
00547P 027A 97   83      A        STA    BITCNT   TO BE RECOVERED
00548P 027C 8D   F2   0270 NXTBIT BSR    BITIN    READ INDIVIDUAL BITS
00549P 027E 46                    RORA            AND SHIFT INTO (A) - LS BIT FIRST
00550P 027F 0A   83      A        DEC    BITCNT   REPEAT UNTIL ALL
00551P 0281 26   F9   027C        BNE    NXTBIT   BITS READ IN
00552P 0283 39                    RTS
00553                      *
00554                      * TIMEHI - COMPARES THE WIDTH OF HI PULSE AGAINST REFERENCE
00555                      *
00556P 0284 0F   82      A TIMEHI CLR    PWIDTH   RESET COUNTER
00557P 0286 8D   E3   026B        BSR    HANGHI   PWIDTH = TIME SPENT HI
00558P 0288 20   04   028E        BRA    TESTPW   COMPARE WITH REFERENCE TIME
00559                      *
00560                      * TIMELO - SAME AS TIMEHI EXCEPT DEALING WITH A LO PULSE
00561                      *
00562P 028A 0F   82      A TIMELO CLR    PWIDTH
00563P 028C 8D   D6   0264        BSR    HANGLO
00564P 028E D6   82      A TESTPW LDB    PWIDTH   GET RESULT
00565P 0290 D1   94      A        CMPB   MAX0PW   VALID PULSE WIDTH?
00566P 0292 22   03   0297        BHI    PWERR
00567P 0294 D1   93      A        CMPB   MIN0PW   YES, RETURN HI OR LO RESULT
00568P 0296 39                    RTS
00569P 0297 0F   83      A PWERR  CLR    BITCNT   NO, RESET SYNC BIT COUNTER
00570P 0299 39                    RTS
00571                      *
00572                      * CASON - TURNS THE CASSETTE MOTOR ON
00573                      *
00574                             XDEF   ZCASON
00575            029A    P ZCASON EQU    *
00576P 029A B6   FF21    A CASON  LDA    P1CRA    READ CURRENT CR
00577P 029D 8A   08      A        ORA    #8       SET CR3 BIT
00578P 029F B7   FF21    A        STA    P1CRA    WRITE BACK, SETTING CA2 HI
00579P 02A2 9E   95      A        LDX    MODLAY   NOW WAIT FOR MOTOR
00580P 02A4 16   FDEC 0093        LBRA   IXDLAY   TO COME UP TO SPEED

PAGE  011  ECBOEM  .SA:1  IODRVR I/O DRIVER SUBROUTINES

00581                      *
00582                      * CASOFF - TURNS THE CASSETTE MOTOR OFF
00583                      *
00584                             XDEF   ZCASOF
00585            02A7    P ZCASOF EOU    *
00586P 02A7 B6   FF21    A CASOFF LDA    P1CRA
00587P 02AA 84   F7      A        ANDA   #$F7     RESET CR3 THUS
00588P 02AC B7   FF21    A        STA    P1CRA    TURNING MOTOR OFF
00589P 02AF 1C   AF      A        ANDCC  #$AF     RE-ENABLE F & I INTERRUPTS
00590P 02B1 39                    RTS
00591                      *
00592                      * CSRDON - TURN CASSETTE ON AND GET INTO BIT SYNC
00593                      *
00594                             XDEF   ZCSRDO
00595            02B2    P ZCSRDO EQU    *
00596P 02B2 1A   50      A CSRDON ORCC   #$50     DISABLE F & I INTERRUPTS FOR BIT BANGING
00597P 02B4 8D   E4   029A        BSR    CASON    TURN MOTOR ON
00598P 02B6 0F   83      A        CLR    BITCNT   RESET SYNC BIT COUNT
00599P 02B8 8D   A8   0262 SYNCER BSR    RISER    WAIT FOR A RISING EDGE
00600P 02BA 8D   C8   0284 CHK0HI BSR    TIMEHI   TIME PULSE WIDTH OF HI SIGNAL
00601P 02BC 22   0C   02CA        BHI    CHK0LO   1200 HZ PULSE?
00602P 02BE 8D   CA   028A CHK1LO BSR    TIMELO   NO, TIME PULSE WIDTH OF LO
00603P 02C0 25   0C   02CE        BLO    CHK1HI   2400 HZ PULSE?
00604P 02C2 0C   83      A        INC    BITCNT   NO, SO HI OF 2400 HZ FOLLOWED
00605P 02C4 96   83      A        LDA    BITCNT   BY LO OF 1200 HZ, I.E 1 -> 0
00606P 02C6 81   60      A        CMPA   #SYNCNT  NOW IN 2ND 1/2 OF BIT WHICH IS HI
00607P 02C8 20   0E   02D8        BRA    CHKSYN   GOT ENOUGH BITS FOR SYNC CONDITION?
00608P 02CA 8D   BE   028A CHK0LO BSR    TIMELO   LAST PULSE WAS 1200 HZ
00609P 02CC 22   EC   02BA        BHI    CHK0HI   IS THIS LO OF 1200 HZ?
00610P 02CE 8D   B4   0284 CHK1HI BSR    TIMEHI   NO, SO TIME PULSE WIDTH OF HI
00611P 02D0 25   EC   02BE        BLO    CHK1LO   2400 HZ?
00612P 02D2 0A   83      A        DEC    BITCNT   NO, SO LO OF 2400 HZ FOLLOWED
00613P 02D4 96   83      A        LDA    BITCNT   BY HI OF 1200 HZ, I.E. 1 -> 0
00614P 02D6 8B   60      A        ADDA   #SYNCNT  NOW IN 2ND 1/2 OF BIT WHICH IS LO
00615P 02D8 26   DE   02B8 CHKSYN BNE    SYNCER   REPEAT UNTIL ENOUGH BITS FOR SYNC
00616                      * BPFLAG = 0 IF SAMPLING LO, NON-0 IF SAMPLING HI
00617P 02DA 97   84      A        STA    BPFLAG
00618P 02DC 39                    RTS
00619                      *
00620                      * CBOUT - OUTPUTS A BYTE TO THE CASSETTE
00621                      *
00622                             XDEF   ZCBOUT
00623            02DD    P ZCBOUT EQU    *
00624P 02DD 34   02      A CBOUT  PSHS   A        SAVE BYTE VALUE
00625P 02DF C6   01      A        LDB    #1       SET UP INITIAL BIT POSITION VALUE
00626P 02E1 108E 030F    P NEWBIT LDY    #SINTAB  SET UP START OF SINE LOOKUP TABLE
00627P 02E5 96   85      A        LDA    LSTSIN   PICK UP LAST ENTRY
00628P 02E7 B7   FF20    A        STA    P1PDRA   AND SEND TO DAC
00629P 02EA E5   E 4     A        BITB   0,S      IS BIT TO BE OUTPUT SET?
00630P 02EC 26   0D   02FB        BNE    HZ2400   YES, GENERATE 2400 HZ WAVEFORM
00631                      * GENERATING A 1200 HZ WAVEFORM AT THIS POINT
00632P 02EE A6   A0      A HZ1200 LDA    0,Y+     PICK UP TABLE ENTRY
00633P 02F0 108C 0333    P        CMPY   #WRTLDR  END OF TABLE REACHED?
00634P 02F4 24   12   0308        BHS    BITEND   YES, THEN DON'T OUTPUT LAST ENTRY
00635P 02F6 B7   FF20    A        STA    P1PDRA   NO, SEND TO DAC AND
00636P 02F9 20   F3   02EE        BRA    HZ1200   GET NEXT SINE VALUE
00637P 02FB A6   A1      A HZ2400 LDA    0,Y++    SAME AS 1200 HZ WAVEFORM EXCEPT
00638P 02FD 108C 0333    P        CMPY   #WRTLDR  THAT ONLY EVERY 2ND ENTRY ACCESSED

PAGE  012  ECBOEM  .SA:1  IODRVR I/O DRIVER SUBROUTINES

00639P 0301 24   05   0308        BHS    BITEND   THEREBY DOUBLING THE FREQUENCY
00640P 0303 B7   FF20    A        STA    P1PDRA   TO 2400 HZ
00641P 0306 20   F3   02FB        BRA    HZ2400
00642                      * LAST TABLE ENTRY NOT YET OUTPUT TO AVOID INTER—BIT DISCONTINUITY
00643P 0308 97   85      A BITEND STA    LSTSIN   SAVE LAST ENTRY FOR LATER USE
00644P 030A 58                    ASLB            SHIFT TO NEXT BIT POSITION
00645P 030B 24   D4   02E1        BCC    NEWBIT   UNTIL ALL 8 BITS DEALT WITH
00646P 030D 35   82      A        PULS   A,PC     RESTORE AND RETURN
00647                      *
00648                      * SINTAB — CONTAINS ENTRIES USED TO GENERATE SINE WAVE FORMS VIA DAC
00649                      * N.B. THE FIRST ENTRY IS OFFSET TO ALLOW FOR INTER—BYTE DISCONTINUITY
00650                      *
00651P 030F      80      A SINTAB FCB    $80,$90,$A8,$B8,$C8,$D8,$E8,$F0,$F8
00652P 0318      F8      A        FCB    $F8,$F8,$F0,$E8,$D8,$C8,$B8,$A8,$90
00653P 0321      78      A        FCB    $78,$68,$50,$40,$30,$20,$10,$08,$00
00654P 032A      00      A        FCB    $00,$00,$08,$10,$20,$30,$40,$50,$68
00655                      *
00656                      * WRTLDR — OUTPUTS A BIT SYNC LEADER OF $55'S (ALTERNATING 0'S & 1'S)
00657                      *
00658                             XDEF   ZWRTLD
00659            0333    P ZWRTLD EQU    *
00660P 0333 34   24      A WRTLDR PSHS   B,Y      SAVE REGS
00661P 0335 1A   50      A        ORCC   #$50     DISABLE F & I INTERRUPTS
00662P 0337 17   FF60 029A        LBSR   CASON    TURN CASSETTE DRIVE ON
00663P 033A 86   55      A        LDA    #$55     SYNC BYTE VALUE
00664P 033C 9E   90      A        LDX    LDRCNT   NUMBER OF BYTES IN LEADER
00665P 033E 8D   9D   02DD NXTLDR BSR    CBOUT    RECORD SYNC BYTE
00666P 0340 30   1F      A        LEAX   -1,X     UNTIL (IX) BYTES DONE
00667P 0342 26   FA   033E        BNE    NXTLDR
00668P 0344 35   A4      A        PULS   B,Y,PC   RESTORE AND RETURN
00669                      *
00670                      *      DOWNLOADER I/O ROUTINES
00671                      *
00672                             XDEF   ZINHST
00673P 0346 34   05      A ZINHST PSHS   B,CC     PRESERVE REGISTERS
00674P 0348 1A   50      A        ORCC   #$50
00675P 034A 86   08      A        LDA    #$08     MASK FOR DATA RECEIVED
00676P 034C F6   FF06    A        LDB    RSCMD
006770 034F CA   01      A        ORB    #$01     SET DATA TERMINAL
00578P 0351 F7   FF06    A        STB    RSCMD    ....READY
00679P 0354 C4   FE      A        ANDB   #$FE     WE'LL FINISH AGAIN SOON
00680P 0356 B5   FF05    A RSRXWT BITA   RSSTAT   ANY DATA CAPTURED ?
00681P 0359 27   FB   0356        BEQ    RSRXWT
00682P 035B F7   FF06    A        STB    RSCMD    ....NOT READY
00683P 035E B6   FF04    A        LDA    RSRXD    READ IN THE INPUT
00684P 0361 35   85      A        PULS   B,CC,PC  RESTORE AND RETURN
00685                      *
00686                             XDEF   ZOUTHS
00687P 0363 34   05      A ZOUTHS PSHS   B,CC     SAVE REGISTERS
00688P 0365 C6   10      A        LDB    #$10     MASK FOR TRANSMIT BUFFER
00689P 0367 F5   FF05    A RSTXWT BITB   RSSTAT   EMPTY ?
00690P 036A 27   FB   0367        BEQ    RSTXWT
00691P 036C B7   FF04    A        STA    RSTXD    PUT OUT THE BYTE
00692P 036F 35   85      A        PULS   B,CC,PC  RESTORE AND RETURN
00693                      *
00694                             XDEF   ZSTBAU
00695P 0371 C1   07      A ZSTBAU CMPB   #(RSTEND—RSTAB)
00696P 0373 24   12   0387        BHS    RSERR    OUT OF RAN6E

PAGE  013  ECBOEM  .SA:1  IODRVR I/O DRIVER SUBROUTINES

00697P 0375 8E   0389    P        LDX    #RSTAB   POINT TO TABLE
00698P 0378 3A                    ABX             ADD IN OFFSET
00699P 0379 F6   FF07    A        LDB    RSCNT
00700P 037C C4   F0      A        ANDB   #$F0     MASK OUT BAUD SELECT
00701P 037E EA   84      A        ORB    ,X
00702P 0380 F7   FF07    A        STB    RSCNT    UPDATE RATE
00703P 0383 1C   FE      A        ANDCC  #$FE     SAY ALL O.K.
00704P 0385 20   01   0388        BRA    RSBDRT   RETURN
00705P 0387 53             RSERR  COMB            SET CARRY TO SHOW ERROR
00706P 0388 39             RSBDRT RTS
00707                      *
00708                      *    BAUD RATE SELECT BITS FOR 6551
00709P 0389      03      A RSTAB  FCB    $3,$6,$7,$8,$A,$C,$E
00710            0390    P RSTEND EQU    *
00711                      *
00712                      *      DISPATCH PRINT ROUTINE TO SERIAL/PARALLEL
00713                      *
00714P 0390 26   14   03A6 PRNSEL BNE    PRNTRS
00715P 0392 F6   FF22    A LPBUSY LDB    P1PDRN   CHECK BUSY STATUS
00716P 0395 56                    RORB            ROLL INTO CARRY
00717P 0396 25   FA   0392        BCS    LPBUSY
00716P 0398 7F   FF02    A KBWAIT CLR    P0PDRB   PULL DOWN KEYBOARD LINES
00719P 039B F6   FF00    A        LDB    P0PDRA   ANY INTERFERENCE ?
00720P 039E CA   80      A        ORB    #$80     IGNORE TOP BIT
00721P 03A0 5C                    INCB            RIPPLE THROUGH TO CLEAR BIT
00722P 03A1 26   F5   0398        BNE    KBWAIT
00723P 03A3 7E   01C8    P        JMP    LPROUT   NOW YOU CAN PRINT OUT
007240 03A6 35   04      A PRNTRS PULS   B        (PUSHED FOR PARALLEL ROUTINE)
00725P 03A8 7E   0363    P        JMP    ZOUTHS   PRINT SERIALLY
00726                      *
00727                      *      KEYBOARD REPEAT PATCH
00728                      *
00729P 03AB F6   0151    A KEYINT LDB    KBROLL   CHECK GENERIC ROW
00730P 03AE 5C                    INC8            ANY KEYS PRESSED
00731P 03AF 26   03   03B4        BNE    RPTCHK
00732P 03B1 F7   011D    A        STB    LSTKEY   CLEAR LAST KEY BUFFER
00733P 03B4 4D             RPTCHK TSTA            KEY VALUE RETURNED ?
00734P 03B5 27   11   03C8        BEQ    NUPDAT
00735P 03B7 F6   011F    A        LDB    RPTDLY   READY TO START COUNTDOWN
00736P 03BA B1   011D    A        CMPA   LSTKEY   ARE WE ALLREADY REPEATING ?
00737P 03BD 27   03   03C2        BEQ    STRTRP
00738P 03BF 58                    ASLB           LONGER DELAY
00739P 03C0 58                    ASLB           'CAUSE FIRST
00740P 03C1 58                    ARLB           REPEAT
00741P 03C2 F7   011E    A STRTRP STB    CNTDWN  START IT GOING
00742P 03C5 B7   011D    A        STA    LSTKEY  REMEMBER KEY VALUE
00743P 03C8 35   94      A NUPDAT PULS   B,X,PC  CC ALLREADY SET
00744                      *
00745                      *      PATCH FOR SOFTWARE INITIALISATION
00746                      *
00747P 03CA 7F   03FF    A SFTIN2 CLR    PRNFLG   ASSUME PARALLEL PRINTER
00748P 03CD 7F   03FD    A        CLR    LDELAY   DON'T NEED A LINE DELAY
00749P 03D0 7F   03FE    A        CLR    LDELAY+1 "     ”     "     "
00750P 03D3 CE   0148    A        LDU    #AUTOLF  SET UP FOR SECOND COPY
00751P 03D6 39                    RTS             CARRY ON WHERE WE LEFT OFF
00752                      *
00753                      *      PATCH FOR END OF LINE PRINTING
00754                      *

PAGE  014  ECBOEM  .SA:1  IODRVR I/O DRIVER SUBROUTINES

00755P 03D7 5A             EOLDLY DECB            ALL EOL CHARACTERS PRINTED ?
00756P 03D8 27   03   03DD        BEQ    SEQOUT
00757P 03DA 7E   01DA    P        JMP    TXSEQ    IGNORE THE PATCH
00758P 03DD 10BE 03FD    A SEQOUT LDY    LDELAY   ANY LINE DELAY ?
00759P 03E1 27   07   03EA        BEQ    NODLY
00760P 03E3 BD   0090    P EOLWT  JSR    BLDLAY   WAIT A 10 MS
00761P 03E6 31   3F      A        LEAY   —1,Y     FINISHED WAITING ?
00762P 03E8 26   F9   03E3        BNE    EOLWT
00763P 03EA 39             NODLY  RTS
00764                      *
00765                      * INTERRUPT HANDLER FOR AUTO—REPEAT AND RS232
00766                      *
00767                             XDEF   INTWDG
00768P 03EB F6   FF05    A INTWDG LDB    RSSTAT   GET RS232 STATUS
00769P 03EE 2A   0D   03FD        BPL    NOTRS    INTERRUPT FROM 6551 ?
00770P 03F0 C4   08      A        ANDB   #$08     RECIEVE BUFFER FULL ?
00771P 03F2 27   08   03FC        BEQ    NOTRXD
00772P 03F4 B6   FF06    A        LDA    RSCMD    GET COMMAND BYTE
00773P 03F7 84   FE      A        ANDA   #$FE     SET DATA TERMINAL
00774P 03F9 B7   FF06    A        STA    RSCMD    ....NOT READY
00775P 03FC 3B             NOTRXD RTI
00776                      *
00777P 03FD 74   0151    A NOTRS  LSR    KBROLL   CHANGE ROW STATE STORE
00778P 0400 7A   011E    A        DEC    CNTDWN   REPEAT YET ?
00779P 0403 26   0C   0411        BNE    CONTIN
00780P 0405 86   FF      A        LDA    #$FF
00781P 0407 8E   0151    A        LDX    #KBROLL  POINT TO ROLLOVER TABLE
00782P 040A A7   80      A TBLCLR STA    ,X+      FORGET THE KEYS
00783P 040C 8C   015A    A        CMPX   #POTVAL  ALL CLEAR ?
00784P 040F 25   F9   040A        BLO    TBLCLR
00785P 0411 7E   0000    A CONTIN JMP    XRSLWC
00786                      *
00787                      * END OF THE SUBROUTINES
00788                      *
00789                      * START OF DRAGON 64 BASIC DOWNLOADER
00790                      *
00791            011A    A FLAG64 EQU    $11A     SET WHEN RAM BASIC IS LOADED
00792            011B    A CSUM64 EQU    $11B     CHECKSUM OF RAM BASIC
00793                      *
00794                      * SYSTEM VARIABLES MOD'D FOR 64K VERSION
00795                      *
00796            0074    A ENDMEM EQU    $74
00797            0027    A MEMSIZ EQU    $27
00798            0023    A FRETOP EQU    $23
00799            0021    A STKTOP EQU    $21
00800            00C8    A STRSPC EQU    200      DEFAULT STRING SPACE
00801            01DA    A CASBUF EQU    $1DA
00802            0072    A RSTVEC EQU    $72
00803            C000    A CLDSTR EQU    $C000    COLDSTART ENTRY TO 64K MODE
00804            C003    A WRMSTR EQU    $C003    WARMSTART   "   "   "   "
00805                      *
00806                      * DOWNLOAD FOLLOWS
00807                      *
00808                      * BOOT64 BOOTSTRAPS THE LOADER INTO THE CASSETTE BUFFER
00809                      *
00810                             XDEF   BOOT64
00811P 0414 12             BOOT64 NOP             NEEDED   RESET PURPOSES
00812P 0415 1A  50      A         ORCC   #$50     MASK INTERRUPTS

