PAGE  001  ECBCOM  .SA:0  ECBM64 Extension ROM Direct Page RAM

00700                             OPT    L,LLE=120
00701                             NAM    ECBM64
00702
00703                      **********************************************************************
00704                      *                                                                    *
00705                      *    Copyright 1982 by Microsoft Corporation, all rights reserved    *
00706                      *                                                                    *
00707                      **********************************************************************
00708
00709                             TTL     External Declarations
00710
00711                             XREF    ALPHLK,ASC2,ASCFLG
00712                             XREF    BITIN,BUF
00713                             XREP    CASBUF,CASOFF,CASON,CBIN,CBLINK,CBOUT,CHKCLS,CHKCOM,CHKOPN
00714                             XREF    CHR$DO,CLOADM,COMBYT,CONINT,CRDO,CSAVEM,CSFNAM,CSRDON
00715                             XREF    CLEARC
00716                             XREF    DBNCNT
00717                             XREF    ENDHKS,ERRAO,ERRBM,ERRDN,ERRIO,ERRNO,ERROR,EVLADR
00716                             XREF    FCERR,FILNAM,FILTYP,FINI,FNAMLN,FRESTR,FRMEVL,FRMNUM
00719                             XREF    FUNDSP,FUNLST
00720                             XREF    GAPFLG,GETBYT,GIVABF,GOPTNW
00721                             XREF    HDRLEN,HKBRKC,HKCHRI,HKCHRO,HKCKDI,HRCKDO,HKCLS,HKCLS1
00722                             XREF    HKCLSA,HKDNCK,HKDPRM,HKEOF,HKFNLD,HKINLN,HKOPEN,HOOKS
00723                             XREF    INTCNV,INTIDX,ISCNTC,INTWDG
00724                             XREF    JOYIN
00725                             XREF    LDBUFR,LIST,LOADAD,LPTOUT
00726                             XREF    MAIN
00727                             XREF    NFUNTK,NNRMTK,NRTSH3,NRTSHK,NZLINK
00728                             XREF    OFFTK,ONTK
00729                             XREF    PINIT,POLCAT,POTVAL
00730                             XREF    READY,REASON,REDDY,RESLST,ROLTBL
00731                             XREF    SAMALP,SCROUT,SCRTCH,SNERR,SNGFLT
00732                             XREF    STKINI,STMDSP,STROUT,STRTAD,STUBO,SYNCHR
00733                             XREF    TEMPST
00734                             XREF    USRTAB
00735                             XREF    VIRQ
00736                             XREF    WRTLDR
00737                             XREF    XRRUN,XRSLWC
00738
00739            0001    A        IFEQ    REALIO
00744                       ENDC   IFE REALIO
00745
00746                             TTL    Equates
00747
00748                             XDEF   SCRADR
00749            0400    A SCRADR EQU    @2000    Address of screen memory (400 hex).
00750
00751            0001    A        IFNE   METTOY
00752                             XDEF   PIA0AD
00753            FF00    A PIA0AD EQU    @177400  PIA0, side A, data reg.  (FF00)
00754                             ENDC   IFN      METTOY
00755            0000    A        IFNE   GRPTEK
00758                       ENDC   IFN GRPTEK
00759                             XDEF   PIA0AC
00760            FF01    A PIA0AC EQU    PIA0AD+&1 PIA0, side A, control  reg.
00761                             XDEF   PIA0BD
00762            FF02    A PIA0BD EQU    PIA0AC+&1 PIA0, side B, data reg.
00763                             XDEF   PIA0BC

PAGE  002  ECBM64  .SA:1  ECBM64 Equates

00764            FF03    A PIA0BC EQU    PIA0BD+&1 PIA0, side B, control reg.
00765
00766            0001    A        IFNE   METTOY
00767                             XDEF   PIA1AD
00768            FF20    A PIA1AD EQU    @177440  PIA1, side A, data reg.  (FF20)
00769                             ENDC   IFN      METTOY
00770            0000    A        IFNE   GRPTEK
00773                        ENDC  IFN GRPTEK
00774                             XDEF   PIA1AC
00775            FF21    A PIA1AC EQU    PIA1AD+&1 PIA1, side A, control reg.
00776                             XDEF   PIA1BD
00777            FF22    A PIA1BD EQU    PIA1AC+&1 PIA1, side B, data reg.
00778                             XDEF   PIA1BC
00779            FF23    A PIA1BC EQU    PIA1BD+&1 PIA1, side B, conrtrol reg.
00780
00781            C000    A CARTRM EQU    @140000  Address of cartridge ROM.  (C000)
00782            8000    A EXTROM EQU    @100000  Address of extension ROM.  (8000)
00783
00784                             XDEF   SAM
00785            FFC0    A SAM    EQU    @177700  Address of SAM chip.  (FFC0)
00786
00787            C000    A DSKRUM EQU    @140000 The address of the disk ROM.  (C000)
00788
00789            BE7F    A BOOT64 EQU    $BE7F
00790            011A    A FLAG64 EQU    $11A
00791                             TTL    Power up and Reset code.
00792                             XDEF   POWRUP
00793            0000    P POWRUP EQU    *        DUMMY LABEL FOR 64K VERSION
00794                             XDEF   ZHRDIN
00795            0000    P ZHRDIN EQU    *
00796                             XDEF   INIT
00797P 0000 8E   0071    P INIT   LDX    #LORAM   INITIALISE DIRECT PAGE RAM
00798P 0003 CE   009D    A        LDU    #EXECAD
00799P 0006 C6   0E      A        LDB    #NLORAM
00800P 0008 BD   03B1    P        JSR    COPLOP
00801P 000B CE   0000    A        LDU    #VIRQ    INITIALISE RAM OFF DIRECT PAGE
00802P 000E C6   0E      A        LDB    #NMDRAM  UP TO 64K FLAG
00803P 0010 BD   03B1    P        JSR    COPLOP
00804P 0013 33   45      A        LEAU   5,U      SKIP PAST USED BYTES
00805P 0015 C6   0B      A        LDB    #NHIRAM
00806P 0017 BD   03B1    P        JSR    COPLOP
00807P 001A 8E   0000    A        LDX    #SNERR   X:=SNERR FOR INITIALISING THE DISPATCH
00808P 001D AF   43      A        STX    &3,U     INIT STUB 1 DISPATCH ADDRESS
00809P 001F AF   48      A        STX    &8,U
00810P 0021 8E   0000    A        LDX    #HOOKS
00811P 0024 CC   3900    A        LDD    #$3900+NRTSH3
00812P 0027 A7   80      A INIHKS STA    ,X+
00813P 0029 5A                    DECB
00814P 002A 26   FB   0027        BNE    INIHKS
00815P 002C BD   065C    P        JSR    GRNCHR  Clear the screen.
00816P 002F BD   00000   A        JSR    CLEARC  DESTROY OLD VARIABLES
00817P 0032 1C   AF      A        ANDCC  #$FF!X(F!+I) Allow the cartridge to interrupt now
00818                      *    before displaying the sign on message.
00819P 0034 8E   0097    P        LDX    #SIGNON-&1 Print the sign on message.
00820P 0037 BD   0000    A        JSR    STROUT
00821                             XDEF   FINIT
00822P 003A 86   55      A FINIT  LDA    #@125    Set the restart flag.
00823P 003C 97   71      A        STA    RSTFLG

PAGE  003  ECBM64  .SA:1  ECBM64 Power up and Reset code.

00824P 003E B7   011A    A        STA    FLAG64
00825P 0041 20   03   0046        BRA    BASRST
00826                      *
00827                      * Here to restart BASIC.
00828                      *
00829                             XDEF   ZSFTIN
00830P 0043 BD   065C    P ZSFTIN JSR    GRNCHR
00831                             XDEF   BASRST
00832P 0046 0F   E3      A BASRST CLR    DURCNT   Clear the PLAY note duration count
00833P 0048 0F   E4      A        CLR    DURCNT+&1 so interrupts don't think we are
00834                      *    still playing the note.
00835P 004A B6   FF03    A        LDA    PIA0BC   Enable the 60 hertz interrupt.
00836P 004D 8A   01      A        ORA    #&1
00837P 004F B7   FF03    A        STA    PIA0BC
00838P 0052 0F   6F      A        CLR    DEVNUM   Make sure output goes to screen and
00839                      *    input comes from keyboard.
00840P 0054 BD   0000    A        JSR    STKINI   Reset the stack and things.
00841P 0057 1C   AF      A        ANDCC  #$FF!X(F!+I) Enable interrupts.
00842P 0059 7E   0000    A GORDY  JMP    READY    Go say "OK".
00843
00844
00845                      *
00846                      * Here on a FIRQ to handle the cartridge interrupt.
00847                      *
00848                             XDEF   CARTRG
00849P 005C 7D   FF23    A CARTRG TST    PIA1BC   Did the cartridge cause the interrupt?
00850P 005F 2B   01   0062        BMI    GOCART   Yes.
00851P 0061 3B                    RTI             No, return from the interrupt.
00852
00853P 0062 BD   006A    P GOCART JSR    DELHAF   Delay for about a second
00854P 0065 0F   71      A        CLR    RSTFLG   Don't allow BASIC to be restarted.
00855P 0067 7E   C000    A        JMP    CARTRM   Go execute the cartrige program.
00856
00857                      *
00858                      * Delay for about one half second.
00859                      *
00860
00861                             XDEF   DELHAF
00862P 006A 9E   BA      A DELHAF LDX    DBLZER
00863P 006C 30   1F      A DELAY  LEAX   -&1,X
00864P 006E 26   FC   006C        BNE    DELAY
00865P 0070 39                    RTS

PAGE  004  ECBM64  .SA:1  ECBM64 Power up and Reset code.

00867                      *
00868                      * Tnis stuff gets block transferred into RAM during initialization.
00869                      *
00870
00871P 0071      0000    A LORAM  FDB    FCERR    EXECAD
00872P 0073 0C   A7      A        INC    TXTPTR+&1 CHRGET RAM code.
00R73P 0075 26   02   0079        BNE    CHRLOD
00874P 0077 0C   A6      A        INC    TXTPTR
00875P 0079 B6   0000    A CHRLOD LDA    >0       (Force extended addressing.)
00876P 007C 7E   070B    P        JMP    ROMLOC
00877
00878            000E    A NLORAM EQU    *-LORAM
00879
00880P 007F 7E   0000    A MIDRAM JMP    INTWDG   VIRQ WEDGE (AUTO-REPEAT & RS232)
00881P 0082 7E   005C    P        JMP    CARTRG   VFIRQ
00882P 0085      00      A        FCB    &0       TICKER (Overlays 8K version's USRJMP.)
00663P 0086      00      A        FCB    &0       (Was JMP FCERR for 8k version.)
00884P 0087      00      A        FCB    &0
00885P 0088      80      A        FCB    @200     RNDX
00886P 0089      4F      A        FCB    @117
00867P 008A      C7      A        FCB    @307
00868P 008B      52      A        FCB    @122
00889            0001    A        IFNE   ADDPRC
00890P 008C      59      A        FCB    @131
00691            000E    A NMDRAM EQU    *-MIDRAM
00892                             ENDC   IFN      ADDPRC
00893
00894P 008D      05      A HIRAM  FCB    &5        INTER-REPEAT DELAY
00895P 008E      00      A        FCB    NNRMTK    STUB0
00896P 008F      0000    A        FDB    RESLST
00897P 0091      0000    A        FDB    STMDSP
00898P 0093      00      A        FCB    NFUNTK
00899P 0094      0000    A        FDB    FUNLST
00900P 0096      0000    A        FDB    FUNDSP
00901
00902            000B    A NHIRAM EQU    *-HIRAM
00903
00904            0001    A        IFNE   METTOY
00905P 0098      28      A SIGNON FCC    /(C) 1983 DRAGON DATA LTD /
00906P 00B1      0D      A        FCB    CR
00907P 00B2      31      A        FCC    /16K BASIC INTERPRETER 1.0      /
00908P 00D1      0D      A        FCB    CR
00909P 00D2      28      A MICRO  FCC    /(C) 1983 BY MICROSOFT/
00910P 00E7      0D      A        FCB    CR
00911P 00E8      0D      A        FCB    CR
00912P 00E9      00      A        FCB    &0
00913                             ENDC   IFN      METTOY
00914
00915            0000    A        IFNE   GRPTEK
00927                       ENDC   IFN GRPTEK
00928
00929                             TTL    CHRINP - Character Input Routine
00930
00931                      *
00932                      * CHRINP inputs a character from the device specified by DEVNUM.
00933                      * The character is returned in A.
00934                      * All registers except A and CC are preserved.
00935                      * If end of file is hit, EOFFLG=.TRUE.=non-zero, and A is meaningless.

PAGE  005  ECBM64  .SA:1  ECBM64 CHRINP - Character Input Routine

00936                      *
00937                      * INCHR is called instead of CHRINP when a 7 bit code is wanted.
00938                      *
00939
00940                             XDEF   INCHR
00941P 00EA 8D   03   00EF INCHR  BSR    CHRINP   Read a character.
00942P 00EC 84   7F      A        ANDA   #@177    Clear the high order bit.
00943P 00EE 39                    RTS             Return with it
00944
00945
00946                             XDEF   CHRINP
00947P 00EF BD   0000    A CHRINP JSR    HKCHRI   RAM hook.
00948P 00F2 0F   70      A        CLR    EOFFLG   End of file flag:=.FALSE.
00949P 00F4 0D   6F      A        TST    DEVNUM   Check the device number.
00950P 00F6 27   25   011D        BEQ    KEYINP   Go handle the keyboard.
00951                      *    No, fall into CASINP to get char from
00952                      *    cassette.

PAGE  006  ECBM64  .SA:1  ECBM64 CHRINP - Character Input Routine

00954                      *
00955                      * CASINP reads a character from a cassette file.
00956                      * (Also used for downloading in the extended version.)
00957                      *
00958
00959P 00F8 0D   79      A CASINP TST    CBFCNT   Is the buffer empty?
00960P 00FA 26   03   00FF        BNE    NOTMT    No, go get a char from it.
00961P 00FC 03   70      A        COM    EOFFLG   Yes, end of file.
00962P 00FE 39                    RTS
00963
00964P 00FF 34   74      A NOTMT PSHS    U,Y,X,B Save registers.  (Save all because
00965                      *    of bossible LODBUF call.)
00966P 0101 9E   7A      A        LDX    CBFPTR   Get char from cassette buffer, update
00967P 0103 A6   80      A        LDA    ,X+      the pointer, and decrement the count.
00968P 0105 34   02      A        PSHS   A        (Save the char too.)
00969P 0107 9F   7A      A        STX    CBFPTR
00970P 0109 0A   79      A        DEC    CBFCNT
00971P 010B 26   09   0116        BNE    CASIRT   Buffer still not empty, just return.
00972P 010D 96   6F      A        LDA    DEVNUM   Doing a download?
00973P 010F 81   FD      A        CMPA   #-&3
00974P 0111 27   05   0118        BEQ    LODDNL   Yes, use different load buffer
00975                      *    routine.
00976P 0113 BD   044C    P        JSR    LODBUF   Reload the buffer.
00977P 0116 35   F6      A CASIRT PULS   D,X,Y,U,PC Get tne char into A, restore all regs
00978                      *    and return.
00979
00980P 0118 BD   0000    A LODDNL JSR    LDBUFR   Reload download buffer.
00981P 011B 20   F9   0116        BRA    CASIRT   Restore and return.

PAGE  007  ECBM64  .SA:1  ECBM64 CHRINP - Character Input Routine

00983                      *
00984                      * KEYINP reads a char from the keyboard.
00985                      *
00986
00987            0001    A        IFNE   REALIO
00988P 011D 34   14      A KEYINP PSHS   X,B      Save the registers.
00989P 011F BD   0000    A KEYILP JSR    CBLINK   Blink the cursor.
00990P 0122 BD   0000    A        JSR    POLCAT   Scan the keyboard.
00991P 0125 27   F8   011F        BEQ    KEYILP   No key, look again.
00992P 0127 C6   60      A        LDB    #@140    Have key, clear the cursor.
00993P 0129 E7   9F 0088 A        STB    [CURADR]
00994P 012D 35   94      A KEYFIN PULS   B,X,PC   Restore B and X and return with the
00995                      *    the char in A.
00996                             ENDC   IFN      REALIO
00997
00998            0001    A        IFEQ   REALIO
01001                       ENDC   IFE REALIO

PAGE  008  ECBM64  .SA:1  ECBM64 CHRINP - Character Input Routine

01003                             TTL    CHROUT - Output Character Routine
01004
01005                      *
01006                      * CHROUT sends the character in A to the device specified by DEVNUM.
01007                      * The output is suppressed if DEVNUM indicates that file input is
01008                      * in progress.  This is done so character echo, input prompts
01009                      * (such as double duestion mark for more input), etc is ignored
01010                      * while inputting file data or loading an ASCII program file.
01011                      *
01012                      * All registers except CC are preserved.
01013                      *
01014
01015                             XDEF   CHROUT
01016P 012F BD   0000    A CHROUT JSR    HKCHRO   RAM hook.
01017P 0132 34   04      A        PSHS   B        Save B.
01018P 0134 D6   6F      A        LDB    DEVNUM   Get the device number.
01019P 0136 C1   FD      A        CMPB   #-&3     Doing a download?
01020P 0138 26   02   013C        BNE    NOTDNL   No.
01021P 013A 35   84      A        PULS   B,PC     Yes, throw away the echo.
01022
01023P 013C 5C             NOTDNL INCB            See what it is.
01024P 013D 35   04      A        PULS   B        Restore B.
01025P 013F 102B FEBD    A        LBMI   LPTOUT   Send char to printer.
01026P 0143 26   2F   0174        BNE    SCROPT   Send char to screen.
01027
01028P 0145 34   16      A        PSHS   X,D      It's the cassette, save some regs.
01029P 0147 D6   78      A        LDB    CASOPN   Is the cassette
01030P 0149 5A                    DECB            open for input?
01031P 014A 27   0F   015B        BEQ    OUTRTS   Yes, throw this output away.
01032
01033                      *
01034                      * Output character to cassette file.
01035                      *
01036
01037P 014C D6   79      A CASOUT LDB    CBFCNT   Get the character count.
01038P 014E 5C                    INCB            Is the buffer full?
01039P 014F 26   02   0153        BNE    NOTFUL   No, go put the char in the buffer.
01040P 0151 8D   0A   015D        BSR    DMPBUF   Yes, write out the buffer.
01041P 0153 9E   7A      A NOTFUL LDX    CBFPTR   Get pointer into buffer.
01042P 0155 A7   80      A        STA    ,X+      Put the char away and increment the
01043P 0157 9F   7A      A        STX    CBFPTR   pointer.
01044P 0159 0C   79      A        INC    CBFCNT   Increment the count.
01045P 015B 35   96      A OUTRTS PULS   D,X,PC   Restore regs and return.
01046
01047                      *
01048                      * Here to dump the cassette buffer to tape.
01049                      *
01050
01051P 015D C6   01      A DMPBUF LDB    #&1      Set block type to data.
01052P 015F D7   7C      A WRTEOF STB    BLKTYP
01053P 0161 8E   0000    A        LDX    #CASBUF  Set address of data for WRTBLK.
01054P 0164 9F   7E      A        STX    CBUFAD
01055P 0166 D6   79      A        LDB    CBFCNT   Set the block length.
01056P 0168 D7   7D      A        STB    BLKLEN
01057P 016A 34   62      A        PSHS   U,Y,A    Save the rest.
01058P 016C BD   0576    P        JSR    WRTBLK   Write block out.
01059P 016F 35   62      A        PULS   A,Y,U    Restore regs.
01060P 0171 7E   0467    P        JMP    MRKMT    Mark the buffer as empty.

PAGE  009  ECBM64  .SA:1   ECBM64 CHROUT - Output Character Routine

01062                      *
01063                      * Ouput character to screen.
01064                      *
01065
01066            0174    P SCROPT EQU    *
01067            0001    A        IFNE   REALIO
01068P 0174 BD   0000    A        JSR    SAMALP   Switch to text mode.
01069P 0177 7E   0000    A        JMP    SCROUT   Go to the screen driver.
01070                             ENDC   IFN      REALIO
01071
01072            0001    A        IFEQ   REALIO
01104                       ENDC   IFE REALIO

