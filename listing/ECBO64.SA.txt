PAGE  001  ECBO64  .SA:1  IODRVR I/O DRIVER EQUATES

00001                             NAM    IODRVR
00002                             OPT    REL,LLE=120
00003                             TTL    I/O DRIVER EQUATES
00004                      *
00005                      * I/O DEVICE ADDRESS EQUATES
00006                      *
00007                      * CONVENTIONS USED:
00008                      *
00009                      * DDR = DATA DIRECTION REGISTER
00010                      * PDR = PERIPHERAL DATA REGISTER
00011                      * CR  = CONTROL REGISTER
00012                      * A   = A-SIDE OF PIA
00013                      * B   = B-SIDE OF PIA
00014                      * E.G. P0CRA = CONTROL REGISTER FOR A-SIDE OF PIA SELECCTED BY P0
00015                      * PIA ADDRESS EQUATES FOLLOW
00016                             XREF   VFIRQ,VIRQ,VNMI,VSWI,VSWI2,VSWI3,XRSLWC
00017                      *
00018                      * P0 PIA
00019                      *
00020            FF00    A P0DDRA EQU    $FF00
00021            FF00    A P0PDRA EQU    P0DDRA
00022            FF01    A P0CRA  EQU    P0DDRA+1
00023            FF02    A P0DDRB EQU    P0DDRA+2
00024            FF02    A P0PDRB EQU    P0DDRB
00025            FF03    A P0CRB  EQU    P0DDRB+1
00026                      *
00027                      * RS232 6551 CHIP
00028                      *
00029            FF04    A RSTXD  EQU    $FF04
00030            FF04    A RSRXD  EQU    RSTXD
00031            FF05    A RSSTAT EQU    RSTXD+1
00032            FF06    A RSCMD  EQU    RSTXD+2
00033            FF07    A RSCNT  EQU    RSTXD+3
00034                      *
00035                      * P1 PIA
00036                      *
00037            FF20    A P1DDRA EQU    $FF20
00038            FF20    A P1PDRA EQU    P1DDRA
00039            FF21    A P1CRA  EQU    P1DDRA+1
00040            FF22    A P1DDRB EQU    PIDDRA+2
00041            FF22    A P1PDRB EQU    P1DDRB
00042            FF23    A P1CRB  EQU    P1DDRB+1
00043                      *
00044                      * SAM CHIP EQUATES
00045                      *
00046            FFC0    A SAMCR  EQU    $FFC0    BASE ADDRESS OF SAM CONTROL REGISTER
00047            FFC9    A SAMF1S EQU    $FFC9    F1 SET ADDRESS
00048            FFDB    A SAMM0S EQU    $FFDB    M0 SET ADDRESS
00049            FFDD    A SAMM1S EQU    $FFDD    M1 SET ADDRESS
00050            FFDE    A SAMTYC EQU    $FFDE    MAP TYPE CLEAR ADDRESS
00051            FFDF    A SAMTYS EQU    $FFDF    "   "    SET     "
00052                      *
00053                      * ADDRESSES OF I/O DRIVER RAMS FOLLOW
00054                      *
00055            0082    A PWIDTH EQU    $82      PULSE WIDTH COUNTER
00056            0083    A BITCNT EQU    $83      BIT COUNTER (SYNC BITS NORMALLY)
00057            0084    A BPFLAG EQU    $84      BIT PHASE FLAG
00058            0085    A LSTSIN EQU    $85      LAST SINE TABLE ENTRY TO BE OUTPUT

PAGE  002  ECBO64  .SA:1  IODRVR I/O DRIVER EQUATES

00059            0088    A CURADR EQU    $88      CURRENT CURSOR ADDRESS IN 88,89
00060            008F    A CBLCNT EQU    $8F      CURRENTNCURSOREBLINKYCOUNT
00061            0090    A LDRCNT EQU    $90      COUNT OF NUMBER OF LEADER BYTES
00062            0092    A MIN0WD EQU    $92      MINIMUM CYCLE WIDTH OF 1200 HZ (IN PWIDTHS)
00063            0093    A MIN0PW EQU    $93      "    PULSE   "   "    "  "   "     "
00064            0094    A MAX0PW EQU    $94      MAXIMUM   "     "   "    "  "   "     "
00065            0095    A MODLAY EQU    $95      CASSETTE MOTOR DELAY VALUE
00066            0097    A KBDLAY EQU    $97      KEYBOARD DEBOUNCE DELAY VALUE
00067            0099    A LPTCFW EQU    $99      LINE PRINTER COMMA FIELD WIDTH
00068            009A    A LPTLCF EQU    $9A      "     "    LAST COMMA FIELD
00069            009B    A LPTWID EQU    $9B      "     "    WIDTH
00070            009C    A LPTPOS EQU    $9C      "     "    CURRENT CHARACTER POSITION
00071            011D    A LSTKEY EQU    $011D    LAST ASCII KEY VALUE RETURNED
00072            011E    A CNTDWN EQU    $011E    COUNTDOWN TO AUTO-REPEAT
00073            011F    A RPTDLY EQU    $011F    INTER-REPEAT DELAY VALUE
00074            0148    A AUTOLF EQU    $0148    BUFFER FULL AUTO LINE FEED FLAG
00075            0149    A ALLOCK EQU    $0149    ALPHA LOCK FLAG
00076            014A    A FOLSEC EQU    $014A    LINE PRINTER EOL TERMINATOR SEQUENCE
00077            0151    A KBROLL EQU    $0151    KEYBOARD ROLLOVER PATTERN TABLE
00078            015A    A POTVAL EQU    $015A    START ADDRESS OH JOYSTICK READINGS
00079            03FD    A LDELAY EQU    $03FD    END OF LINE PRINT DELAY
00080            03FF    A PRNFLG EQU    $03FF    SERIAL/PARALLEL PRINTER FLAG
00081                      *
00082                      * CONSTANT VALUES FOLLOW
00083                      *
00084            00FF    A ON     EQU    $FF      ON VALUE
00085            00FF    A TRUE   EQU    ON       TRUE VALUE
00086            0000    A OFF    EQU    $00      OFF VALUE
00087            0000    A FALSE  EQU    OFF      FALSE VALUE
00088                      * CHARACTER CONSTANTS
00089            0020    A SP     EQU    $20      SPACE
00090            000D    A CR     EQU    $0D      CARRIAGE RETURN
00091            000A    A LF     EQU    $0A      LINE FEED
00092            0008    A BS     EQU    $08      BACK SPACE
00093            0060    A INVSP  EQU    $60      INVERTED SPACE
00094            0012    A SHIFT0 EQU    $12      SHIFTED 0 SPECIAL CASE
00095                      *
00096                      * MISC CONSTANTS
00097                      *
00098            0060    A SYNCNT EQU    $60      NUMBER OF BITS TO MAKE UP VALID SYNC DETECT
00099            0400    A HOMPOS EQU    $0400    HOME POSITION OF SCREEN VIDEO RAM
00100            05FF    A EOSPOS EQU    $05FF    END      "    "     "     "    "
00101            05E0    A BLPOS  EQU    $05E0    START OF LAST LINE ON SCREEN
00102            0084    A LWIDTH EQU    $84      LINE WIDTH OF PRINTER
00103            0010    A LCFW   EQU    $10      COMMA FIELD WIDTH
00104            0074    A LLCF   EQU    LWIDTH-LCFW LAST COMMA FIELD
00105            0008    A COLS   EQU    $08      NUMBER OF COLUMNS IN KB MATRIX
00106            045E    A MSEC10 EQU    $045E    10 MILLISECOND DELAY VALUE
00107            0032    A CBLVAL EQU    $32      CURSOR BLINK RATE CONSTANT
00108                      *
00109                      * END OF EQUATES
00110                      *
00111                      * START ADDRESS OF ROUTINES FOLLOWS
00112                      *
00113                             TTL    I/O DRIVER SUBROUTINES
00114                      * I/O DRIVER SUBROUTINES FOLLOW:
00115                      *
00116                             XDEF   OEMMEM

PAGE  003  ECBO64  .SA:1  IODRVR I/O DRIVER SUBROUTINES

00117            0000    P OEMMEM EQU    *
00118                      *
00119                      * CBLINK - CURSOR BLINK ROUTINE
00120                      *
00121                             XDEF   ZCBLIN
00122            0000    P ZCBLIN EQU    *
00123P 0000 0A   8F      A CBLINK DEC    CBLCNT   UPDATE BLINK RATE COUNTER
00124P 0002 26   12   0016        BNE    BLDLAY   IF .NE. 0 THEN DELAY 10 MSECS
00125P 0004 86   32      A        LDA    #CBLVAL  OTHERWISE RESET TO INITIAL VALUE
00126P 0006 97   8F      A        STA    CBLCNT   FOR BLINK RATE
00127P 0008 9E   88      A        LDX    CURADR   GET READY TO FLASH CURSOR
00128P 000A A6   84      A        LDA    0,X      BY READIN6 CHAR AT CURSOR POS
00129P 000C 81   AF      A        CMPA   #$AF     IS THE CURSOR GRAPHIC BLUE ?
00130P 000E 27   02   0012        BEQ    INVERT   CHANGE TO GRAPHIC GREEN IF SO
00131P 0010 86   8F      A        LDA    #$8F     OTHERWISE LOAD GRAPHIC GREEN AND THEN CHANGE TO BLUE
00132P 0012 88   20      A INVERT EORA   #$20     BLUE TO GREEN OR GREEN TO BLUE
00133P 0014 A7   84      A        STA    0,X      BEFORE WRITNG BACK
00134P 0016 8E   045E    A BLDLAY LDX    #MSEC10  SET UP 10 MSEC DELAY CONSTANT
00135                      *
00136                      * IXDLAY - DELAY ROUTINE
00137                      *
00138P 0019 30   1F      A IXDLAY LEAX   -1,X     DECREMENT IX
00139P 001B 26   FC   0019        BNE    IXDLAY   REPEAT UNTIL (IX) = 0
00140P 001D 39                    RTS
00141                      *
00142                      * ROUTINES USED BY THE KEYBOARD POLLER FOLLOW
00143                      *
00144                      * CHKROW - CHECKS ROWS OF K/8 MATRIX FOR CLOSURE
00145                      *
00146P 001E F6   FF00    A CHKROW LDB    P0PDRA   READ ROW DATA
00147P 0021 CA   80      A        ORB    #$80     SET UNUSED BIT
00148P 0023 7D   FF02    A        TST    P0PDRB   SHIFT KEY IS
00149P 0026 2B   02   002A        BMI    NOSHFT   IS MASKED OUT
00150P 0028 CA   40      A        ORB    #$40     BY THIS
00151P 002A 39             NOSHFT RTS
00152                      *
00153                      * CSHIFT - CHECKS THE STATE OF THE SHIFT KEY, Z = 1 IF PRESSED
00154                      *
00155P 002B C6   7F      A CSHIFT LDB    #$7F     CLEAR TOP BIT
00156P 002D F7   FF02    A        STB    P0PDRB   OF THE COLUMNS
00157P 0030 F6   FF00    A        LDB    P0PDRA   THEN READ ROWS
00158P 0033 C4   40      A        ANDB   #$40     MASK OFF ALL BUT SHIFT KEY
00159P 0035 39                    RTS
00160                      *
00161                      * POLCAT - POLL THE K/B AND RETURN CHARACTER IN (A)
00162                      *
00163                             XDEF   ZPOLCA
00164            0036    P ZPOLCA EQU    *
00165P 0036 34   14      A POLCAT PSHS   B,X      SAVE REGS
00166P 0038 8D   03   003D        BSR    POLLKB   POLL AND ENCODE KEYS
00167P 003A 7E   0330    P        JMP    KEYINT   SET UP COUNTDOWN
00168                      *
00169                      * POLLKB - POLLS THE K/B, DETECTS KEY CLOSURES, DEBOUNCES KEYS, PERFORMS
00170                      * ROLLOVER AND ENCODES CHARACTERS
00171                      *
00172P 003D 32   7E      A POLLKB LEAS   -2,S     RESERVE 2 BYTES OE WORRKSPACE ON STACK
00173P 003F 8E   0151    A        LDX    #KBROLL  SET UP ADDRESS OF KB ROLLOVER TABLE
00174                      * THE FIRST THING TO DO IS TO CHECK FOR ANY KEY CLOSURES WHATSOEVER

PAGE  004  ECBO64  .SA:1  IODRVR I/O DRIVER SUBROUTINES

00175P 0042 7F   FF02    A        CLR    P0PDRB   FORCE 0'S TO ALL COLUMNS
00176P 0045 F6   FF00    A        LDB    P0PDRA   READ ROW STATUS
00177P 0048 CA   80      A        ORB    #$80     SET UNUSED BIT
00178P 004A E1   84      A        CMPB   0,X      CHECK FOR ANY KEYBOAD ACTIVITY
00179P 004C 27   72   00C0        BEQ    NONKEY   IF THE SAME THEN NO CHANGE
00180                      * SOME CHANGE HAS BEEN DETECTED AT THIS POINT SO NEXT THING TO DO
00181                      * IS TO MAKE SURE THAT IT WASN'T THE JOYSTICK BUTTONS.
00182P 004E 1F   98      A        TFR    B,A      SAVE ROW STATUS
00183P 0050 73   FF02    A        COM    P0PDRB   FORCE 1'S TO COLUMNS
00184P 0053 8D   C9   001E        BSR    CHKROW   CHECK FOR JOYSTICK BUTTONS
00185P 0055 C1   FF      A        CMPB   #$ff     AS 0'S ON THE PA0 OR PA1
00186P 0057 26   67   00C0        BNE    NONKEY   MEAN BUTTONS ARE DOWN
00187P 0059 A7   80      A        STA    0,X+     SAVE FULL ROW STATE IN ROLLOVER TABLE
00188                      * AT THIS POINT A CHANGE IN THE STATE OF THE ROWS HAS BEEN DETECTED
00189                      * SO THE FOLLOWINS CODE IS USED TO DETECT WHICH KEY IT WAS
00190  005B 6F   E4      A        CLR    0,S      RESET COLUMN COUNT
00191P 005D C6   FE      A        LDB    #$FE     SET UP 0 IN LS BIT
00192P 005F F7   FF02    A        STB    P0PDRB   AND SEND OUT TO MATRIX COLUMNS
00193P 0062 8D   BA   001E SCANKB BSR    CHKROW   CHECK ROW CLOSURES
00194P 0064 E7   61      A        STB    1,S      SAVE ROW STATE AWAY
00195P 0066 E8   84      A        EORB   0,X      PERFORM KEY CLOSURE AND ROLLOVER DETECTION
00196P 0068 E4   84      A        ANDB   0,X      BIT SET IN B IF IT DIFFERED FROM LAST TIME
00197P 006A A6   61      A        LDA    1,s      RESTORE ROW STATE AND
00198P 006C A7   80      A        STA    0,X+     SAVE IN ROLLOVER TABLE FOR NEXT TIME
00199P 006E 5D                    TSTB            ANY CHANGES TO KEYS?
00200P 006F 26   0A   007B        BNE    DEBKEY   YES, DEBOUNCE BEFORE ENCODING
00201P 0071 6C   E4      A        INC    0,S      ELSE UPDATE COLUMN COUNT
00202P 0073 43                    COMA            USED TO SET CARRY BIT
00203P 0074 79   FF02    A        ROL    P0PDRB   BEFORE SHIFTING 0 To NEXT COLUMN
00204P 0077 25   E9   0062        BCS    SCANKB   REPEAT UNTIL ALL DONE OR CLOSURE FOUND
00205P 0079 20   45   00C0        BRA    NONKEY   MUST HAVE BEEN NO KEYS FOUND
00206                      * KEY FOUND - DEBOUNCE IT
00207P 007B 9E   97      A DEBKEY LDX    KBDLAY   WAIT DEBOUNCE PERIOD
00208P 007D 8D   9A   0019        BSR    IXDLAY   BEFORE RE-CHECKING KB
00209P 007F 1E   89      A        EXG    A,B      COPY ORIGINAL KEY CLOSURE
00210P 0081 8D   9B   001E        BSR    CHKROW   AND GET NEW STATE
00211P 0083 E1   61      A        CMPB   1,S      AND COMPARE WITH ORIGINAL
00212P 0085 1E   89      A        EXG    A,B      RESTORE KEY CLOSURE
00213P 0087 26   37   00C0        BNE    NONKEY   IF NO MATCH NO KEY RETURNED
00214                      * MUST BE A VALID KEY AT THIS POINT SO ENCODE IT
00215P 0089 A6   E4      A        LDA    0,S      PICK UP COLUMN COUNT
00216P 008B 80   08      A        SUBA   #COLS    OFFSET IT
00217P 008D 8B   08      A NXTROW ADDA   #COLs    CALCULATE KEY POSITION AS FOLLOWS
00218P 008F 54                    LSRB            KEY POS = (ROWPPOS)*(COLS) + (COL POS)
00219P 0090 24   FB   008D        BCC    NXTROW   ROW POS = BIT SET IN (B)
00220P 0092 4D                    TSTA            KEY POS = 0 IS A
00221P 0093 27   32   00C7        BEQ    KEY0     SPECIAL CASE
00222P 0095 81   0C      A        CMPA   #$0C     CHECK NUMERIC KEY RANGE
00223P 0097 25   17   00B0        BLO    NUMKEY   WHICH IS $00 - $0B
00224P 0099 81   11      A        CMPA   #$11     CHECK SPECIAL CASE RANGE
00225P 009B 25   28   00C5        BLO    SPEC1    WHICH IS $0C - $10
00226P 009D 81   2A      A        CMPA   #$2A     AND FINALLY CHECK RANGE
00227P 009F 22   22   00C3        BHI    SPEC2    $2B ONWARDS SPECIAL CASE
00228                      * MUST BE ALPHABETIC CHARACTER IF HERE
00229P 00A1 8B   30      A        ADDA   #$30     ADD OFFSET FOR ASCII UPPER CASE
00230P 00A3 8D   86   002B        BSR    CSHIFT   AND CHECK WHETHER TO SHIFT
00231P 00A5 27   12   00B9        BEQ    CODED    IF SHIFT THEN UPPER CASE REMAINS
00232                      * COULD BE LOWER CASE AT THIS POINT SO CHECK ALPHA LOCK

PAGE  005  ECBO64  .SA:1  IODRVR I/O DRIVER SUBROUTINES

00233P 00A7 7D   0149    A        TST    ALLOCK
00234P 00AA 26   0D   00B9        BNE    CODED    IF ON THEN UPPER CASE OK
00235P 00AC 8A   20      A        ORA    #$20     ELSE CONVERT TO LOWER CASE
00236P 00AE 20   09   00B9        BRA    CODED    BEFORE EXIT
00237                      * NUMERIC (+ OTHERS) ENCODED HERE
00238P 00B0 8B   30      A NUMKEY ADDA   #$30     CONVERT TO ASCII
00239P 00B2 17   FF76 002B        LBSR   CSHIFT   CHECK SHIFT KEY
00240P 00B5 26   02   00B9        BNE    CODED    UNSHIFTED - NO CHANGE
00241P 00B7 80   10      A        SUBA   #$10     ELSE CONVERT YO UPPER SET
00242P 00B9 81   12      A CODED  CMPA   #SHIFT0  CHECK FOR ALPHA LOCK TOGGLE
00243P 00BB 26   04   00C1        BNE    POLEND
00244P 00BD 73   0149    A        COM    ALLOCK   TOGGLE IF FOUND
00245P 00C0 4F             NONKEY CLRA            NO KEY CLOSURE EXIT CONDITION
00246P 00C1 35   90      A POLEND PULS   X,PC     TIDY UP WORKSPACE AND RETURN
00247                      * SPECIAL CASES FOLLOW
00248P 00C3 80   1A      A SPEC2  SUBA   #26      MAKE SPECIAL CASES CONTIGUOUS
00249P 00C5 80   0B      A SPEC1  SUDA   #11      AND OFFSET IN RANGE 1 ->
00250P 00C7 48             KEY0   ASLA            2 ENTRIES/KEY
00251P 00C8 17   FF60 002B        LBSR   CSHIFT   CHECK FOR SHIFTED SET
00252P 00CB 26   01   00CE        BNE    LOOKUP
00253P 00CD 4C                    INCA            SHIFTED SET ENTRY OFFSET
00254P 00CE 8E   00D5    P LOOKUP LDX    #KEYTAB  SET UP LOOKUP TABLE BASE
00255P 00D1 A6   86      A        LDA    A,X      LOOKUP KEY ENTRY
00256P 00D3 20   E4   00B9        BRA    CODED    AND RETURN IT
00257                      * KEY CODE LOOKUP TABLE FOLLOWS
00258                      * SECOND ENTRY OF EACH IS THE SHIFTED KEY
00259P 00D5      30      A KEYTAB FCB    '0,SHIFT0
00260P 00D7      2C      A        FCB    ',,'<
00261P 00D9      2D      A        FCB    '-,'=
00262P 00DB      2E      A        FCB    '.,'>
00263P 00DD      2F      A        FCB    '/,'?
00264P 00DF      40      A        FCB    '@,$13
00265P 00E1      5E      A        FCB    $5E,$5F  UP ARROW
00266P 00E3      0A      A        FCB    LF,$5B   DOWN ARROW
00267P 00E5      08      A        FCB    BS,$15   LEFT ARROW
00268P 00E7      09      A        FCB    $09,$5D  RIGHT ARROW
00269P 00E9      20      A        FCB    SP,SP    SPACE
00270P 00EB      0D      A        FCB    CR,CR    ENTER
00271P 00ED      0C      A        FCB    $0C,$5C  CLEAR
00272P 00EF      03      A        FCB    $03,$03  BREAK
00273                      *
00274                      * SCREEN OUTPUT ROUTINES FOLLOW
00275                      *
00278                      * CLREOL - CLEARS THE SCREEN TO THE END OF THE CURRENT LINE
00277                      *
00278P 00F1 86   60      A CLREOL LDA    #INVSP   FILL REST OF THE LINE
00279P 00F3 A7   80      A        STA    0,X+     SPACES WRITTEN TO VRAM
00280P 00F5 1F   10      A        TFR    X,D      NOW CHECK FOR EOL
00281P 00F7 C4   1F      A        ANDB   #$1F     BY ANDING WITH LINE LENGTH
00282P 00F9 26   F6   00F1        BNE    CLREOL   REPEATS UNTIL COL 32
00283P 00FB 39                    RTS
00284                      *
00285                      * SCROUT - OUTPUTS A CHARACTER TO THE SCREEN
00286                      *
00287                             XDEF   ZSCROU
00288            00FC    P ZSCROU EOU    *
00289P 00FC 34   16      A SCROUT PSHS   A,B,X    SAVE REGS
00290P 00FE 9E   88      A        LDX    CURADR   FETCH CURSOR POSITION

PAGE  006  ECBO64  .SA:1  IODRVR I/O DRIVER SUBROUTINES

00291P 0100 81   08      A        CMPA   #BS      CHECK FIRST FOR BACK SPACE
00292P 0102 26   0B   010F        BNE    CHKCR
00293                      * BACK SPACE TO BE OUTPUT
00294P 0104 8C   0400    A        CMPX   #HOMPOS  CAN'T BACK UP WHEN HOMED
00295P 0107 27   3B   0144        BEQ    SCEXIT   SO EXIT
00296P 0109 86   60      A        LDA    #INVSP   PREPARE TO DELETE CURRENT
00297P 010B A7   82      A        STA    0,-X     CHARACTER AND MOVE LEFT
00298P 010D 20   1D   012C        BRA    NXTPOS   THEN UPDATE SCREEN POS
00299P 010F 81   0D      A CHKCR  CMPA   #CR      NOW CHECK FUR ENTER
00300P 0111 26   04   0117        BNE    CHKCNT
00101P 0113 8D   DC   00F1        BSR    CLREOL   CLEAR TO EOL IF IT IS
00302P 0115 20   15   012C        BRA    NXTPOS
00303                      * CHECK FOR CONTROL CHARACTERS NOW
00304P 0117 81   20      A CHKCNT CMPA   #SP      NON-PRINTING CHARACTER
00305P 0119 25   29   0144        BLO    SCEXIT   YES, THEN EXIT
00306P 011B 4D                    TSTA            ELSE CHECK FOR GRAPHIC (MS BIT SET)
00307P 011C 2B   0C   012A        BMI    OUTCHR   OUTPUT AS IS IF FOUND
00308P 011E 81   40      A        CMPA   #$40     NON-ALPHA CHECK
00309P 0120 25   06   0128        BLO    CONVCH
00310P 0122 81   60      A        CMPA   #$60     LOWER CASE ALPHAS
00311P 0124 25   04   012A        BLO    OUTCHR   OUTPUT AS IS IF NOT
00312P 0126 84   DF      A        ANDA   #$DF     LCASE SO MASK OFF D6
00313P 0128 88   40      A CONVCH EORA   #$40     INVERT CHARACTER
00314P 012A A7   80      A OUTCHR STA    0,X+     UPDATE VRAM AT CURSOR
00315P 012C 9F   88      A NXTPOS STX    CURADR   UPDATE CURSOR POSITION
00316P 012E 8C   05FF    A        CMPX   #EOSPOS  REACHED END OF SCREEN?
00317P 0131 23   11   0144        BLS    SCEXIT   NO, SD EXIT OK
00318P 0133 8E   0400    A        LDX    #HOMPOS  YES, THEN SCROLL UP BY
00319P 0136 EC   88 20   A SCROLL LDD    $20,X    COPYING EACH LINE TO
00320P 0139 ED   81      A        STD    0,X++    THE ONE ABOVE
00321P 013B 8C   05E0    A        CMPX   #BLPOS   UNTIL LAST LINE DONE
00322P 013E 25   F6   0136        BLO    SCROLL
00323                      * NOW AT START OF THE BOTTOM LINF
00324P 0140 9F   88      A        STX    CURADR   SAVE NEW CURSOR POSITION
00325P 0142 8D   AD   00F1        BSR    CLREOL   BEFORE CLEARING BDTTOM LINE
00326P 0144 35   96      A SCEXIT PULS   A,B,X,PC RESTORE AND RETURN
00327                      *
00328                      * LINE PRINTER ROUTINES FOLLOW
00329                      *
00330                      * TXLPCH - TRANSMITS A CHARACTER TO THE LINE PRINTER
00331                      *
00332P 0146 34   04      A TXLPCH PSHS   b        SAVE REG
00333P 0148 7D   03FF    A        TST    PRNFLG   PARALLEL OR SERIAL ?
00334P 014B 7E   0315    P        JMP    PRNSEL   SELECT WHICH ONE
00335P 014E B7   FF02    A LPROUT STA    P0PDRB   SEND CHARACTER OUT
00336P 0151 C6   02      A        LDB    #2       SET UP STROBE BIT
00337P 0153 F7   FF20    A        STB    P1PDRA   SEND STROBE, PULSE HI
00338P 0156 7F   FF20    A        CLR    P1PDRA   THEN PULSE LO
00339                      * N.B. THE STROBE PULSE IS INVERTED BY THE LS02 SO
00340                      * ACTUAL STROBE TO PRINTER IS LO FOLLOWED BY HI.
00341P 0159 35   84      A        PULS   B,PC     RESTORE AND RETURN
00342                      *
00343                      * TXEOL - TRANSMITS THE END OF LINE TERMINATIN6 SEQUENCE
00344                      *
00345P 015B 8E   014A    A TXEOL  LDX    #EOLSEQ  SET UP EOL SEQUENCE ADDRESS
00346P 015E E6   80      A        LDB    0,X+     GET COUNT OF CHARACTERS IN IT
00347P 0160 27   07   0169 TXSEQ  BEQ    ENDSEQ   YES, SO FINISH
00348P 0162 A6   80      A        LDA    0,X+     PICK UP NEXT CHARACTER

PAGE  007  ECBO64  .SA:1  IODRVR I/O DRIVER SUBROUTINES

00349P 0164 8D   E0   0146        BSR    TXLPCH   TRANSMIT IT
00350P 0166 7E   034F    p        JMP    EOLDLY   WAIT AT END OF LINE
00351P 0169 39             ENDSEQ RTS
00352                      *
00353                      * LPTOUT - OUTPUT A CHARCTER TO PARALLEL PRINTER INTERFACE
00354                      *
00355                             XDEF   ZLPTOU
00356            016A    P ZLPTOU EQU    *
00357P 016A 34   16      A LPTOUT PSHS   A,B,X    SAVE REGS
00358                      * DISABLE INTERRUPTS AT THIS POINT?
00359P 016C 81   0D      A        CMPA   #CR      CR?
00360P 016E 27   13   0183        BEQ    LPTEOL   YES, DEALL WITH EOL
00361P 0170 81   20      A        CMPA   #SP      PRINTABLE?
00362P 0172 25   02   0176        BLO    SENDCH   NO, SO SKIP POS UPDATE
00363P 0174 0C   9C      A        INC    LPTPOS   YES, UPDATE PRINT POS
00364P 0176 BD   CE   0146 SENDCH BSR    TXLPCH   AND SEND CHARACTER
00365p 0178 D6   9C      A        LDB    LPTPOS   CHECK PRINT POS
00366P 017A D1   9B      A        CMPB   LPTWID   BUFFER FULL?
00367P 017C 25   11   018F        BLO    LPEXIT   NO, SO OK TO EXIT
00368P 017E 7D   0148    A        TST    AUTOLF   AUTO LINEFEED?
00369P 0181 26   0A   018D        BNE    NXTLN    YES, NO ACTION NEEDED
00370                      * END OF LINE REACHED, CR OR NO AUTO LF ON BUFFER FULL
00371P 0183 0D   9C      A LPTEOL TST    LPTPOS   EMPTY BUFFER?
00372P 0185 26   04   018B        BNE    NEWLN    NO, SO FLUSH BUFFER
00373P 0187 86   20      A        LDA    #SP      YES, SEND OUT A SPACE
00374P 0189 8D   BB   0146        BSR    TXLPCH   BEFORE
00375P 018B 8D   CE   015B NEWLN  BSR    TXEOL    SENDING EOL SEQUENCE
00376P 018D 0F   9C      A NXTLN  CLR    LPTPOS   RESET PRINTER POSITION
00377P 018F 35   96      A LPEXIT PULS   A,B,X,PC RESTORE AND RETURN
00378                      *
00379                      * JOYSTICK ROUTINE NEXT
00380                      *
00381                      * JOYSEL - SELECT ONE THE JOYSTICK CHANNELS (0-3)
00382                      *
00383P 0191 CE   FF01    A JOYSEL LDU    #POCRA   FIRST TIME THRU SETS UP
00364P 0194 8D   00   0196        BSR    NEWCR3   LSB OF MUX, SELECT CA2
00385P 0196 A6   C4      A NEWCR3 LDA    0,U      READ CURRENT CR VALUE
00386P 0198 84   F7      A        ANDA   #$F7     RESET CR3
00387P 019A 56                    RORB            MOVE LS BIT INTO CARRY
00338P 019B 24   02   019F        BCC    CR3WRT
00389P 019D BA   08      A CR3SET ORA    #8       SETS CR3 IF LS BIT OF (B) SET
00390P 019F A7   C1      A CR3WRT STA    0,U++    COPY NEW CR3 BACK & SET UP
00391P 01A1 39                    RTS             CRB FOR SECOND TIME THRU
00392                      *
00393                      * JOYIN - READS THE JOYSTICK CHANNELS
00394                      *
00395                             XDEF   ZJOYIN
00396            01A2    P ZJOYIN EQU    *
00397P 01A2 32   7D      A JOYIN  LEAS   -3,S     RESERVE 3 BYTES OF STACK WORKSPACE
00398P 01A4 8E   015E    A        LDX    #POTVAL+4 USES AUTO-DEC SO ADDRESS 1 PAST END
00399P 01A7 C6   03      A        LDB    #3       STARTS OFF WITH JOYSTICK(3)
00400P 01A9 86   0A      A NXTJOY LDA    #10      NUMBER OF TRIES ON UNEQUAL READINGS
00401P 01AB ED   61      A        STD    1,S      SAVE JOYSICK NO. AND RETRY VALUE
00402P 01AD 8D   E2   0191        BSR    JOYSEL   SELECT JOYSTICK(B)
00403P 01AF CC   4080    A RETRY  LDD    #$4080   1/4 FSD IN (A), 1/2 FSD IN (B)
00404P 01B2 A7   E4      A NXTTRY STA    0,S      SCALE INCREMENT STORED AWAY
00405P 01B4 F7   FE20    A        STB    P1PDRA   SEND APPROX. TO DAC
00406P 01B7 7D   FF00    A        TST    P0PDRA   CHECK COMPARATOR RESULT

PAGE  008  ECBO64  .SA:1  IODRVR I/O DRIVER SUBROUTINES

00407P 01BA 2B   04   01C0        BMI    CMPLOW   BY TESTING PA7 BIT
00408                      * PA7 = 0 SO APPROX. > JOYSTICK VALUE SO SUBTRACT INCREMENT
00409P 01BC E0   E4      A        SUBB   0,S
00410P 01BE 20   02   01C2        BRA    OVER
00411                      * PA7 = 1 SO APPROX. < JOYSTICK VALUE SO ADD INCREMENT
00412P 01C0 EB   E4      A CMPLOW ADDB   0,S
00413P 01C2 44             OVER   LSRA            NEW INCREMENT = 1/2 OLD
00414P 01C3 81   01      A        CMPA   #1       ALL 6 BITS DONE?
00415P 01C5 26   EB   01B2        BNE    NXTTRY   NO, TRY NEXT APPROX.
00416P 01C7 54                    LSRB            NORMALISE
00417P 01C8 54                    LSRB            FINAL RESULT
00418P 01C9 E1   1F      A        CMPB   -1,X     SAME AS LAST READING?
00419P 01CB 27   04   01D1        BEQ    GOTJOY   YES, SO FINISH
00420P 01CD 6A   61      A        DEC    1,S      NO, SO RETRY
00421P 01CF 26   DE   01AF        BNE    RETRY    A NUMBER OF TIMES
00422P 01D1 E7   82      A GOTJOY STB    0,-X     LAST READING UPDATES POTVALS
00423P 01D3 E6   62      A        LDB    2,S      RESTORE JOYSTICK NO.
00424P 01D5 5A                    DECB            GET NEXT ONE
00425P 01D6 2A   D1   01A9        BPL    NXTJOY   FINISH AFTER JOYSTICK(0)
00426P 01D8 35   92      A        PULS   A,X,PC   TIDY UP STACK AND RETURN
00427                      *
00426                      * CASSETTE ROUTINES FOLLOW
00429                      *
00430                      * CLEVEL - READ THE INPUT LEVEL AT THE CASSETTE INPUT PIN
00431                      *
00432P 01DA 0C   82      A CLEVEL INC    PWIDTH   UPDATE PULSE WIDTH COUNTER
00433P 01DC F6   FF20    A        LDB    P1PDRA   READ CASSETTE INPUT LEVEL
00434P 01DF 56                    RORB            WHICH IS RETURNED IN CARRY
00435P 01E0 39                    RTS
00436                      *
00437                      * BCYCLE — CALCULATES THE BIT CYCLE WIDTH
00438                      *
00439P 01E1 0F   82      A BCYCLE CLR    PWIDTH   RESET WIDTH COUNT - USED FOR CYCLE WIDTH
00440P 01E3 0D   84      A        TST    BPFLAG   CHECK SIGNAL PHASE
00441P 01E5 26   07   01EE        BNE    FALLER
00442                      * THE FIRST 1/2 OF CYCLE STARTS WITH A HI PULSE
00443P 01E7 8D   07   01F0 RISER  BSR    HANGHI   START SAMPLING IN HI PHASE
00444P 01E9 8D   EF   01DA HANGLO BSR    CLEVEL   STOP SAMPLING WHEN
00445P 01EB 24   FC   01E9        BCC    HANGLO   RISING EDGE DETECTED
00446P 01ED 39                    RTS
00447                      * THE FIRST 1/2 OF CYCLE STARTS WITH A LO PULSE
00448P 01EE 8D   F9   01E9 FALLER BSR    HANGLO   START SAMPLING IN LO PULSE
00449P 01F0 8D   E8   01DA HANGHI BSR    CLEVEL   STOP SAMPLING WHEN
00450P 01F2 25   FC   01F0        BCS    HANGHI   FALLING EDGE DETECTED
00451P 01F4 39                    RTS
00452                      *
00453                      * BITIN - RECOVERS BIT FROM CASSETTE, RETURNED IN CARRY
00454                      *
00455                             XDEF   ZBITIN
00456            01F5    P ZBITIN EQU    *
00457P 01F5 8D   EA   01E1 BITIN  BSR    BCYCLE   GET BIT CYCLE WIDTH
00458P 01F7 D6   82      A        LDB    PWIDTH   PULSE WIDTH = CYCLE WIDTH
00459P 01F9 5A                    DECB            WILL BE 1 TOO MANY
00460P 01FA D1   92      A        CMPB   MIN0WD   C SET IF (B) < MIN0WD = 1
00461P 01FC 39                    RTS             C CLEAR IF (B) > MIN0WD = 0
00462                      *
00463                      * CBIN - RECOVERS A BYTE FROM CASSETTE
00464                      *

PAGE  009  ECBO64  .SA:1  IODRVR I/O DRIVER SUBROUTINES

00465                             XDEF   ZCBIN
00466            01FD    P ZCBIN  EQU    *
00467P 01FD 86   08      A CBIN   LDA    #8       SET UP COUNT OF BITS
00468P 01FF 97   83      A        STA    BITCNT   TO BE RECOVERED
00469P 0201 8D   F2   01F5 NXTBIT BSR    BITIN    READ INDIVIDUAL BITS
00470P 0203 46                    RORA            AND SHIFT INTO (A) - LS BIT FIRST
00471P 0204 0A   83      A        DEC    BITCNT   REPEAT UNTIL ALL
00472P 0206 26   F9   0201        BNE    NXTBIT   BITS READ IN
00473P 0208 39                    RTS
00474                      *
00475                      * TIMEHI - COMPARES THE WIDTH OF HI PULSE AGAINST REFERENCE
00476                      *
00477P 0209 0F   82      A TIMEHI CLR    PWIDTH   RESET COUNTER
00478P 020B 8D   E3   01F0        BSR    HANGHI   PWIDTH = TIME SPENT HI
00479P 020D 20   04   0213        BRA    TESTPW   COMPARE WITH REFERENCE TIME
00480                      *
00481                      * TIMELO - SAME AS TIMEHI EXCEPT DEALING WITH A LO PULSE
00482                      *
00483P 020F 0F   82      A TIMELO CLR    PWIDTH
00484P 0211 8D   D6   01E9        BSR    HANGLO
00485P 0213 D6   82      A TESTPW LDB    PWIDTH   GET RESULT
00486P 0215 D1   94      A        CMPB   MAX0PW   VALID PULSE WIDTH?
00487P 0217 22   03   021C        BHI    PWERR
00488P 0219 D1   93      A        CMPB   MIN0PW   YES, RETURN HI OR LO RESULT
00489P 021B 39                    RTS
00490P 021C 0F   83      A PWERR  CLR    BITCNT   NO, RESET SYNC BIT COUNTER
00491P 021E 39                    RTS
00492                      *
00493                      * CASON - TURNS THE CASSETTE MOTOR ON
00494                      *
00495                             XDEF   ZCASON
00496            021F    P ZCASON EQU    *
00497P 021F B6   FF21    A CASON  LDA    P1CRA    READ CURRENT CR
00498P 0222 8A   08      A        ORA    #8       SET CR3 BIT
00499P 0224 B7   FF21    A        STA    P1CRA    WRITE BACK, SETTING CA2 HI
00500P 0227 9E   95      A        LDX    MODLAY   NOW WAIT FOR MOTOR
00501P 0229 16   FDED 0019        LBRA   IXDLAY   TO COME UP TO SPEED
00502                      *
00503                      * CASOFF - TURNS THE CASSETTE MOTOR OFF
00504                      *
00505                             XDEF   ZCASOF
00506            022C    P ZCASOF EQU    *
00507P 022C B6   FF21    A CASOFF LDA    P1CRA
00508P 022F 84   F7      A        ANDA   #$F7     RESET CR3 THUS
00509P 0231 B7   FF21    A        STA    P1CRA    TURNING MOTOR OFF
00510P 0234 1C   AF      A        ANDCC  #$AF     RE-ENABLE F & I INTERRUPTS
00511P 0236 39                    RTS
00512                      *
00513                      * CSRDON - TURN CASSETTE ON AND GET INTO BIT SYNC
00514                      *
00515                             XDEF   ZCSRDO
00516            0237    P ZCSRDO EQU    *
00517P 0237 1A   50      A CSRDON ORCC   #$50     DISABLE F & I INTERRUPTS FOR BIT BAN6ING
00518P 0239 8D   E4   021F        BSR    CASON    TURN MOTOR ON
00519P 023B 0F   83      A        CLR    BITCNT   RESET SYNC BIT COUNT
00520P 023D 8D   A8   01E7 SYNCER BSR    RISER    WAIT FOR A RISING EDGE
00521P 023F 8D   C8   0209 CHK0HI BSR    TIMEHI   TIME PULSE WIDTH OF HI SIGNAL
00522P 0241 22   0C   024F        BHI    CHK0LO   1200 HZ PULSE?

PAGE  010  ECBO64  .SA:1  IODRVR I/O DRIVER SUBROUTINES

00523P 0243 8D   CA   020F CHK1LO BSR    TIMELO   NO, TIME PULSE WIDTH OF LO
00524P 0245 25   0C   0253        BLO    CHK1HI   2400 HZ PULSE?
00525P 0247 0C   83      A        INC    BITCNT   NO, SO HI OF 2400 HZ FOLLOWED
00526P 0249 96   83      A        LDA    BITCNT   BY LO OF 1200 HZ, I.E 1 -> 0
00527P 024B 81   60      A        CMPA   #SYNCNT  NOW IN 2ND 1/2 OF BIT WHICH IS HI
00528P 024D 20   0E   025D        BRA    CHKSYN   GOT ENC0GH BITS FOR SYNC CONDITION?
00529P 024F 8D   BE   020F CHK0LO BSR    TIMELO   LAST PULSE WAS 1200 HZ
00530P 0251 22   EC   023F        BHI    CHK0HI   IS THIS LO OF 1200 HZ?
00531P 0253 8D   B4   0209 CHK1HI BSR    TIMEHI   NO, SO TIME PULSE WIDTH OF HI
00532P 0255 25   EC   0243        BLO    CHK1LO   2400 HZ?
00533P 0257 0A   83      A        DEC    BITCNT   NO, SO LO OF 2400 HZ FOLLOWED
00534P 0259 96   83      A        LDA    BITCNT   BY HI OF 1200 HZ, I.E. 1 -> 0
00535P 025B 8B   60      A        ADDA   #SYNCNT  NOW IN 2ND 1/2 OF BIT WHICH IS LO
00536P 025D 26   DE   023D CHKSYN BNE    SYNCER   REPEAT UNTIL ENOUGH BITS FUR SYNC
00537                      * BPFLAG = 0 IF SAMPLING LO. NON-0 IF SAMPLING HI
00538P 025F 97   84      A        STA    BPFLAG
00539P 0261 39                    RTS
00540                      *
00541                      * CBOUT - OUTPUTS A BYTE TO THE CASSETTE
00542                      *
00543                             XDEF   ZCBOUT
00544            0262    P ZCBOUT EQU    *
00545P 0262 34   02      A CBOUT  PSHS   A        SAVE BYTE VALUE
00546P 0264 C6   01      A        LDB    #1       SET UP INITIAL BIT POSITION VALUE
00547P 0266 108E 0294    P NEWBIT LDY    #SINTAB  SET UP START OF SINE LOOKUP TABLE
00548P 026A 96   85      A        LDA    LSTSIN   PICK UP LAST ENTRY
00549P 026C B7   FF20    A        STA    P1PDRA   AND SEND TO DAC
00550P 026F E5   E4      A        BITB   0,S      IS BIT TO BE OUTPUT SET?
00551P 0271 26   0D   0280        BNE    HZ2400   YES, GENERATE 2400 HZ WAVEFORM
00552                      * GENERATING A 1200 HZ WAVEFORM AT THIS POINT
00553P 0273 A6   A0      A HZ1200 LDA    0,Y+     PICK UP TABLE ENTRY
00554P 0275 108C 02B8    P        CMPY   #WRTLDR  END OF TABLE REACHED?
00555P 0279 24   12   028D        BHS    BITEND   YES, THEN DON'T OUTPUT LAST ENTRY
00555P 027B B7   FF20    A        STA    P1PDRA   NO, SEND TO DAC AND
00557P 027E 20   F3   0273        BRA    HZ1200   GET NEXT SINE VALUE
00558P 0280 A6   A1      A HZ2400 LDA    0,Y++    SAME AS 1200 HZ WAVEFORM EXCEPT
00559P 0282 108C 02B8    P        CMPY   #WRTLDR  THAT ONLY EVERY 2ND ENTRY ACCESSED
00560P 0286 24   05   028D        BHS    BITEND   THEREBY DOUBLING THE FREQUENCY
00561P 0288 B7   FF20    A        STA    P1PDRA   TO 2400 HZ
00562P 028B 20   F3   0280        BRA    HZ2400
00563                      * LAST TABLE ENTRY NOT YET OUTPUT TO AVOID INTER-BIT DISCONTINUITY
00564P 028D 97   85      A BITEND STA    LSTSIN   SAVE LAST ENTRY FOR LATER USE
00565P 028F 58                    ASLB            SHIFT TO NEXT BIT POSITION
00566P 0290 24   D4   0266        BCC    NEWBIT   UNTIL ALL 8 BITS DEALT WITH
00567P 0292 35   82      A        PULS   A,PC     RESTORE AND RETURN
00568                      *
00569                      * SINTAB - CONTAINS ENTRIES USED TO GENERATE SINE WAVE FORMS VIA DAC
00570                      * N.B. THE FIRST ENTRY IS OFFSET TO ALLOW FOR INTER-BYTE DISCONTINUITY
00571                      *
00572P 0294      80      A SINTA8 FCB    $80,$90,$A8,$B8,$C8,$D8,$E8,$F0,$F8
00573P 029D      F8      A        FCB    $F8,$F8,$F0,$E8,$D8,$C8,$B8,$A8,$90
00574P 02A6      78      A        FCB    $78,$68,$50,$40,$30,$20,$10,$08,$00
00575P 02AF      00      A        FCB    $00,$00,$08,$10,$20,$30,$40,$50,$68
00576                        *
00577                        * WRTLDR - OUTPUTS A BIT SYNC LEADER OF $55'S (ALTERNATIN6 0'S & 1'S)
00578                        *
00579                             XDEF   ZWRTLD
00580            02B8    p ZWRTLD EQU    *

PAGE  011  ECBO64  .SA:1  IODRVR I/O DRIVER SUBROUTINES

00581P 02B8 34   24      A WRTLDR PSHS   B,Y      SAVE REGS
00582P 02BA 1A   50      A        ORCC   #$50     DISABLE F & I INTERRUPTS
00583P 02BC 17   FF60 021F        LBSR   CASON    TURN CASSETTE DRIVE ON
00584P 02BF 86   55      A        LDA    #$55     SYNC BYTE VALUE
00585P 02C1 9E   90      A        LDX    LDRCNT   NUMBER OF BYTES IN LEADER
00586P 02C3 8D   9D   0262 NXTLDR BSR    CBOUT    RECORD SYNC BYTE
00587P 02C5 30   1F      A        LEAX   -1,X     UNTIL (IX) BYTES DONE
00588P 02C7 26   FA   02C3        BNE    NXTLDR
00589P 02C9 35   A4      A        PULS   B,Y,PC   RESTORE AND RETURN
00590                      *
00591                      *     DOWNLOADER I/O ROUTINES
00592                      *
00593                             XDEF   ZINHST
00594P 02CB 34   05      A ZINHST PSHS   B,CC     PRESERVE REGISTERS
00595P 02CD 1A   50      A        ORCC   #$50
00596P 02CF 86   08      A        LDA    #$08     MASK FOR DATA RECEIVED
00597P 02D1 F6   FF06    A        LDB    RSCMD
00598P 02D4 CA   01      A        ORB    #$01     SET DATA TERMINAL
00599P 02D6 F7   FF06    A        STB    RSCMD    ....READY
00600P 02D9 C4   FE      A        ANDB   #$FE     WE'LL FINISH AGAIN SOON
00601P 02DB B5   FF05    A RSRXWT BITA   RSSTAT   ANY DATA CAPTURED ?
00602P 02DE 27   FB   02DB        BEQ    RSRXWT
00603P 02E0 F7   FF06    A        STB    RSCMD    ....NOT READY
00604P 02E3 B6   FF04    A        LDA    RSRXD    READ IN THE INPUT
00605P 02E6 35   85      A        PULS   B,CC,PC  RESTORE AND RETURN
00606                      *
00607                             XDEF   ZOUTHS
00608P 02E8 34   05      A ZOUTHS PSHS   B,CC     SAVE REGISTERS
00609P 02EA C6   10      A        LDB    #$10     MASK FOR TRANSMIT BUFFER
00610P 02EC F5   FF05    A RSTXWT BITB   RSSTAT   EMPTY ?
00611P 02EF 27   FB   02EC        BEQ    RSTXWT
00612P 02F1 B7   FF04    A        STA    RSTXD    PUT OUT THE BYTE
00613P 02F4 35   85      A        PULS   B,CC,PC  RESTORE AND RETURN
00614                      *
00615                             XDEF   ZSTBAU
00616P 02F6 C1   07      A ZSTBAU CMPB   #(RSTEND-RSTAB)
00617P 02F8 24   12   030C        BHS    RSERR    OUT OF RANGE
00618P 02FA 8E   030E    P        LDX    #RSTAB   POINT TO TABLE
00619P 02FD 3A                    ABX             ADD IN OFFSET
00620P 02FE F6   FF07    A        LDB    RSCNT
00621P 0301 C4   F0      A        ANDB   #$F0     MASK OUT BAUD SELECT
00622P 0303 EA   84      A        ORB    ,X
00623P 0305 F7   FF07    A        STB    RSCNT    UPDATE RATE
00624P 0308 1C   FE      A        ANDCC  #$FE     SAY ALL O.K.
00625P 030A 20   01   030D        BRA    RSBDRT   RETURN
00626P 030C 53             RSERR  COMB            SET CARRY TO SHOW ERROR
00627P 030D 39             RSBDRT RTS
00628                      *
00629                      *    BAUD RATE SELECT BITS FOR 6551
00630P 030E      03      A RSTAB  FCB    $3,$6,$7,$8,$A,$C,$E
00631            0315    P RSTEND EQU    *
00632                      *
00633                      *      DISPATCH PRINT RUUTINE TO SERIAL/PARALLEL
00634                      *
00635P 0315 26   14   032B PRNSEL BNE    PRNTRS
00636P 0317 F6   FF22    A LPBUSY LDB    P1PDRB   CHECK BUSY STATUS
00637P 031A 56                    RORB            ROLL INTO CARRY
00638P 031B 25   FA   0317        BCS    LPBUSY

PAGE  012  ECBO64  .SA:1  IODRVR I/O DRIVER SUBROUTINES

00639P 031D 7F   FF02    A KBWAIT CLR    P0PDRB   PULL DOWN KEYBOARD LINES
00640P 0320 F6   FF00    A        LDB    P0PDRA   ANY INTERFERENCE ?
00641P 0323 CA   80      A        ORB    #$80     IGNORE TOP BIT
00642P 0325 5C                    INCB            RIPPLE THROUGH TO CLEAR BIT
00643P 0326 26   F5   031D        BNE    KBWAIT
00644P 0328 7E   014E    A        JMP    LPROUT   NOW YOU CAN PRINT OUT
00645P 032B 35   04      A PRNTRS PULS   B        (PUSHED FOR PARALLEL ROUTINE)
00646P 032D 7E   02E8    P        JMP    ZOUTHS   PRINT SERIALLY
00647                      *
00648                      *      KEYBOARD REPEAT PATCH
00649                      *
00650P 0330 F6   0151    A KEYINT LDB    KBROLL   CHECK GENERIC ROW
00651P 0333 5C                    INCB            ANY KEYS PRESSED
00652P 0334 26   03   0339        BNE    RPTCHK
00653P 0336 F7   011D    A        STB    LSTKEY   CLEAR LAST KEY BUFFER
00654P 0339 4D             RPTCHK TSTA            KEY VALUE RETURNED ?
00655P 033A 27   11   034D        BEQ    NUPDAT
00656P 033C F6   011F    A        LDB    RPTDLY   READY TO START COUNTDOWN
00657P 033F B1   011D    A        CMPA   LSTKEY   ARE WE ALLREADY REPEATING ?
00658P 0342 27   03   0347        BEQ    STRTRP
00659P 0344 58                    ASLB            LONGER DELAY
00660P 0345 58                    ASLB            'CAUSE FIRST
00661P 0346 58                    ASLB            REPEAT
00662P 0347 F7   011E    A STRTRP STB    CNTDWN   START IT GOING
00663P 034A B7   011D    A        STA    LSTKEY   REMEMBER KEY VALUE
00664P 034D 35   94      A NUPDAT PULS   B,X,PC   CC ALLREADY SET
00665                      *
00666                      *      PATCH FOR END OF LINE PRINTING
00667                      *
00668P 034F 5A             EOLDLY DECB            ALL EOL CHARACTERS PRINTED ?
00669P 0350 27   03   0355        BEQ    SEQOUT
00670P 0352 7E   0160    P        JMP    TXSEQ    IGNORE THE PATCH
00671P 0355 10BE 03FD    A SEQOUT LDY    LDELAY   ANY LINE DELAY ?
00672P 0359 27   07   0362        BEQ    NODLY
00673P 035B BD   0016    P EOLWT  JSR    BLDLAY   WAIT A 10 MS
00674P 035E 31   3F      A        LEAY   -1,Y     FINISHED WAITING ?
00675P 0360 26   F9   035B        BNE    EOLWT
00676P 0362 39             NODLY  RTS
00677                      *
00678                      * INTERRUPT HANDLER FOR AUTO-REPEAT AND RS232
00679                      *
00680                             XDEF   INTWDG
00681P 0363 F6   FF05    A INTWDG LDB    RSSTAT   GET RS232 STATUS
00682P 0366 2A   0D   0375        BPL    NOTRS    INTERRUPT FROM 6551 ?
00683P 0368 C4   08      A        ANDB   #$08     RECIEVE BUFFER FULL ?
00684P 036A 27   08   0374        BEQ    NOTRXD
00685P 036C B6   FF06    A        LDA    RSCMD    GET COMMAND BYTE
00686P 036F 84   FE      A        ANDA   #$FE     SET DATA TERMINAL
00687P 0371 B7   FF06    A        STA    RSCMD    ....NOT READY
00688P 0374 3B             NOTRXD RTI
00689                      *
00690P 0375 74   0151    A NOTRS  LSR    KBROLL   CHANGE ROW STATE STORE
00691P 0378 7A   011E    A        DEC    CNTDWN   REPEAT YET ?
00692P 037B 26   0C   0389        BNE    CONTIN
00693P 037D 86   FF      A        LDA    #$FF
00694P 037F 8E   0151    A        LDX    #KBROLL  POINT TO ROLLOVER TABLE
00695P 0382 A7   80      A TBLCLR STA    ,X+      FORGET THE KEYS
00696P 0384 8C   015A    A        CMPX   #POTVAL  ALL CLEAR ?

PAGE  013  ECBO64  .SA:1  IODRVR I/O DRIVER SUBROUTINES

00697P 0387 25   F9   0382        BLO    TBLCLR
00698P 0389 7E   0000    A CONTIN JMP    XRSLWC
00699                      *
00700                      *      END OF THE SUBROUTINES
00701                      *
00702                      *      64K FLAG AND VECTORS AT TOP OF ROM 2
00703                      *
00704A 0000                       ASCT
00705A FFF0                       ORG    $FFF0
00706                      *
00707A FFF0      36      A        FCC    /64/
00708                      *
00709A FFF2      0000    A        FDB    VSWI3
00710A FFF4      0000    A        FDB    VSWI2
00711A FFF6      0000    A        FDB    VFIRQ
00712A FFF8      0000    A        FDB    VIRQ
00713A FFFA      0000    A        FDB    VSWI
00714A FFFC      0000    A        FDB    VNMI
00715A FFFE      C000    A        FDB    $C000    ROM START (NEVER USED)
00716                      *
00717                             END
TOTAL ERRORS 00000--00000
TOTAL WARNINGS 00000--00000

