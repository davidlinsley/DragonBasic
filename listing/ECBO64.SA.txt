PAGE  001  ECBO64  .SA:1  IODRVR I/O DRIVER EQUATES

00001                             NAM    IODRVR
00002                             OPT    REL,LLE=120
00003                             TTL    I/O DRIVER EQUATES
00004                      *
00005                      * I/O DEVICE ADDRESS EQUATES
00006                      *
00007                      * CONVENTIONS USED:
00008                      *
00009                      * DDR = DATA DIRECTION REGISTER
00010                      * PDR = PERIPHERAL DATA REGISTER
00011                      * CR  = CONTROL REGISTER
00012                      * A   = A-SIDE OF PIA
00013                      * B   = B-SIDE OF PIA
00014                      * E.G. P0CRA = CONTROL REGISTER FOR A-SIDE OF PIA SELECCTED BY P0
00015                      * PIA ADDRESS EQUATES FOLLOW
00016                             XREF   VFIRQ,VIRQ,VNMI,VSWI,VSWI2,VSWI3,XRSLWC
00017                      *
00018                      * P0 PIA
00019                      *
00020            FF00    A P0DDRA EQU    $FF00
00021            FF00    A P0PDRA EQU    P0DDRA
00022            FF01    A P0CRA  EQU    P0DDRA+1
00023            FF02    A P0DDRB EQU    P0DDRA+2
00024            FF02    A P0PDRB EQU    P0DDRB
00025            FF03    A P0CRB  EQU    P0DDRB+1
00026                      *
00027                      * RS232 6551 CHIP
00028                      *
00029            FF04    A RSTXD  EQU    $FF04
00030            FF04    A RSRXD  EQU    RSTXD
00031            FF05    A RSSTAT EQU    RSTXD+1
00032            FF06    A RSCMD  EQU    RSTXD+2
00033            FF07    A RSCNT  EQU    RSTXD+3
00034                      *
00035                      * P1 PIA
00036                      *
00037            FF20    A P1DDRA EQU    $FF20
00038            FF20    A P1PDRA EQU    P1DDRA
00039            FF21    A P1CRA  EQU    P1DDRA+1
00040            FF22    A P1DDRB EQU    PIDDRA+2
00041            FF22    A P1PDRB EQU    P1DDRB
00042            FF23    A P1CRB  EQU    P1DDRB+1
00043                      *
00044                      * SAM CHIP EQUATES
00045                      *
00046            FFC0    A SAMCR  EQU    $FFC0    BASE ADDRESS OF SAM CONTROL REGISTER
00047            FFC9    A SAMF1S EQU    $FFC9    F1 SET ADDRESS
00048            FFDB    A SAMM0S EQU    $FFDB    M0 SET ADDRESS
00049            FFDD    A SAMM1S EQU    $FFDD    M1 SET ADDRESS
00050            FFDE    A SAMTYC EQU    $FFDE    MAP TYPE CLEAR ADDRESS
00051            FFDF    A SAMTYS EQU    $FFDF    "   "    SET     "
00052                      *
00053                      * ADDRESSES OF I/O DRIVER RAMS FOLLOW
00054                      *
00055            0082    A PWIDTH EQU    $82      PULSE WIDTH COUNTER
00056            0083    A BITCNT EQU    $83      BIT COUNTER (SYNC BITS NORMALLY)
00057            0084    A BPFLAG EQU    $84      BIT PHASE FLAG
00058            0085    A LSTSIN EQU    $85      LAST SINE TABLE ENTRY TO BE OUTPUT

PAGE  002  ECBO64  .SA:1  IODRVR I/O DRIVER EQUATES

00059            0088    A CURADR EQU    $88      CURRENT CURSOR ADDRESS IN 88,89
00060            008F    A CBLCNT EQU    $8F      CURRENTNCURSOREBLINKYCOUNT
00061            0090    A LDRCNT EQU    $90      COUNT OF NUMBER OF LEADER BYTES
00062            0092    A MIN0WD EQU    $92      MINIMUM CYCLE WIDTH OF 1200 HZ (IN PWIDTHS)
00063            0093    A MIN0PW EQU    $93      "    PULSE   "   "    "  "   "     "
00064            0094    A MAX0PW EQU    $94      MAXIMUM   "     "   "    "  "   "     "
00065            0095    A MODLAY EQU    $95      CASSETTE MOTOR DELAY VALUE
00066            0097    A KBDLAY EQU    $97      KEYBOARD DEBOUNCE DELAY VALUE
00067            0099    A LPTCFW EQU    $99      LINE PRINTER COMMA FIELD WIDTH
00068            009A    A LPTLCF EQU    $9A      "     "    LAST COMMA FIELD
00069            009B    A LPTWID EQU    $9B      "     "    WIDTH
00070            009C    A LPTPOS EQU    $9C      "     "    CURRENT CHARACTER POSITION
00071            011D    A LSTKEY EQU    $011D    LAST ASCII KEY VALUE RETURNED
00072            011E    A CNTDWN EQU    $011E    COUNTDOWN TO AUTO-REPEAT
00073            011F    A RPTDLY EQU    $011F    INTER-REPEAT DELAY VALUE
00074            0148    A AUTOLF EQU    $0148    BUFFER FULL AUTO LINE FEED FLAG
00075            0149    A ALLOCK EQU    $0149    ALPHA LOCK FLAG
00076            014A    A FOLSEC EQU    $014A    LINE PRINTER EOL TERMINATOR SEQUENCE
00077            0151    A KBROLL EQU    $0151    KEYBOARD ROLLOVER PATTERN TABLE
00078            015A    A POTVAL EQU    $015A    START ADDRESS OH JOYSTICK READINGS
00079            03FD    A LDELAY EQU    $03FD    END OF LINE PRINT DELAY
00080            03FF    A PRNFLG EQU    $03FF    SERIAL/PARALLEL PRINTER FLAG
00081                      *
00082                      * CONSTANT VALUES FOLLOW
00083                      *
00084            00FF    A ON     EQU    $FF      ON VALUE
00085            00FF    A TRUE   EQU    ON       TRUE VALUE
00086            0000    A OFF    EQU    $00      OFF VALUE
00087            0000    A FALSE  EQU    OFF      FALSE VALUE
00088                      * CHARACTER CONSTANTS
00089            0020    A SP     EQU    $20      SPACE
00090            000D    A CR     EQU    $0D      CARRIAGE RETURN
00091            000A    A LF     EQU    $0A      LINE FEED
00092            0008    A BS     EQU    $08      BACK SPACE
00093            0060    A INVSP  EQU    $60      INVERTED SPACE
00094            0012    A SHIFT0 EQU    $12      SHIFTED 0 SPECIAL CASE
00095                      *
00096                      * MISC CONSTANTS
00097                      *
00098            0060    A SYNCNT EQU    $60      NUMBER OF BITS TO MAKE UP VALID SYNC DETECT
00099            0400    A HOMPOS EQU    $0400    HOME POSITION OF SCREEN VIDEO RAM
00100            05FF    A EOSPOS EQU    $05FF    END      "    "     "     "    "
00101            05E0    A BLPOS  EQU    $05E0    START OF LAST LINE ON SCREEN
00102            0084    A LWIDTH EQU    $84      LINE WIDTH OF PRINTER
00103            0010    A LCFW   EQU    $10      COMMA FIELD WIDTH
00104            0074    A LLCF   EQU    LWIDTH-LCFW LAST COMMA FIELD
00105            0008    A COLS   EQU    $08      NUMBER OF COLUMNS IN KB MATRIX
00106            045E    A MSEC10 EQU    $045E    10 MILLISECOND DELAY VALUE
00107            0032    A CBLVAL EQU    $32      CURSOR BLINK RATE CONSTANT
00108                      *
00109                      * END OF EQUATES
00110                      *
00111                      * START ADDRESS OF ROUTINES FOLLOWS
00112                      *
00113                             TTL    I/O DRIVER SUBROUTINES
00114                      * I/O DRIVER SUBROUTINES FOLLOW:
00115                      *
00116                             XDEF   OEMMEM

PAGE  003  ECBO64  .SA:1  IODRVR I/O DRIVER SUBROUTINES

00117            0000    P OEMMEM EQU    *
00118                      *
00119                      * CBLINK - CURSOR BLINK ROUTINE
00120                      *
00121                             XDEF   ZCBLIN
00122            0000    P ZCBLIN EQU    *
00123P 0000 0A   8F      A CBLINK DEC    CBLCNT   UPDATE BLINK RATE COUNTER
00124P 0002 26   12   0016        BNE    BLDLAY   IF .NE. 0 THEN DELAY 10 MSECS
00125P 0004 86   32      A        LDA    #CBLVAL  OTHERWISE RESET TO INITIAL VALUE
00126P 0006 97   8F      A        STA    CBLCNT   FOR BLINK RATE
00127P 0008 9E   88      A        LDX    CURADR   GET READY TO FLASH CURSOR
00128P 000A A6   84      A        LDA    0,X      BY READIN6 CHAR AT CURSOR POS
00129P 000C 81   AF      A        CMPA   #$AF     IS THE CURSOR GRAPHIC BLUE ?
00130P 000E 27   02   0012        BEQ    INVERT   CHANGE TO GRAPHIC GREEN IF SO
00131P 0010 86   8F      A        LDA    #$8F     OTHERWISE LOAD GRAPHIC GREEN AND THEN CHANGE TO BLUE
00132P 0012 88   20      A INVERT EORA   #$20     BLUE TO GREEN OR GREEN TO BLUE
00133P 0014 A7   84      A        STA    0,X      BEFORE WRITNG BACK
00134P 0016 8E   045E    A BLDLAY LDX    #MSEC10  SET UP 10 MSEC DELAY CONSTANT
00135                      *
00136                      * IXDLAY - DELAY ROUTINE
00137                      *
00138P 0019 30   1F      A IXDLAY LEAX   -1,X     DECREMENT IX
00139P 001B 26   FC   0019        BNE    IXDLAY   REPEAT UNTIL (IX) = 0
00140P 001D 39                    RTS
00141                      *
00142                      * ROUTINES USED BY THE KEYBOARD POLLER FOLLOW
00143                      *
00144                      * CHKROW - CHECKS ROWS OF K/8 MATRIX FOR CLOSURE
00145                      *
00146P 001E F6   FF00    A CHKROW LDB    P0PDRA   READ ROW DATA
00147P 0021 CA   80      A        ORB    #$80     SET UNUSED BIT
00148P 0023 7D   FF02    A        TST    P0PDRB   SHIFT KEY IS
00149P 0026 2B   02   002A        BMI    NOSHFT   IS MASKED OUT
00150P 0028 CA   40      A        ORB    #$40     BY THIS
00151P 002A 39             NOSHFT RTS
00152                      *
00153                      * CSHIFT - CHECKS THE STATE OF THE SHIFT KEY, Z = 1 IF PRESSED
00154                      *
00155P 002B C6   7F      A CSHIFT LDB    #$7F     CLEAR TOP BIT
00156P 002D F7   FF02    A        STB    P0PDRB   OF THE COLUMNS
00157P 0030 F6   FF00    A        LDB    P0PDRA   THEN READ ROWS
00158P 0033 C4   40      A        ANDB   #$40     MASK OFF ALL BUT SHIFT KEY
00159P 0035 39                    RTS
00160                      *
00161                      * POLCAT - POLL THE K/B AND RETURN CHARACTER IN (A)
00162                      *
00163                             XDEF   ZPOLCA
00164            0036    P ZPOLCA EQU    *
00165P 0036 34   14      A POLCAT PSHS   B,X      SAVE REGS
00166P 0038 8D   03   003D        BSR    POLLKB   POLL AND ENCODE KEYS
00167P 003A 7E   0330    P        JMP    KEYINT   SET UP COUNTDOWN
00168                      *
00169                      * POLLKB - POLLS THE K/B, DETECTS KEY CLOSURES, DEBOUNCES KEYS, PERFORMS
00170                      * ROLLOVER AND ENCODES CHARACTERS
00171                      *
00172P 003D 32   7E      A POLLKB LEAS   -2,S     RESERVE 2 BYTES OE WORRKSPACE ON STACK
00173P 003F 8E   0151    A        LDX    #KBROLL  SET UP ADDRESS OF KB ROLLOVER TABLE
00174                      * THE FIRST THING TO DO IS TO CHECK FOR ANY KEY CLOSURES WHATSOEVER

PAGE  004  ECBO64  .SA:1  IODRVR I/O DRIVER SUBROUTINES

00175P 0042 7F   FF02    A        CLR    P0PDRB   FORCE 0'S TO ALL COLUMNS
00176P 0045 F6   FF00    A        LDB    P0PDRA   READ ROW STATUS
00177P 0048 CA   80      A        ORB    #$80     SET UNUSED BIT
00178P 004A E1   84      A        CMPB   0,X      CHECK FOR ANY KEYBOAD ACTIVITY
00179P 004C 27   72   00C0        BEQ    NONKEY   IF THE SAME THEN NO CHANGE
00180                      * SOME CHANGE HAS BEEN DETECTED AT THIS POINT SO NEXT THING TO DO
00181                      * IS TO MAKE SURE THAT IT WASN'T THE JOYSTICK BUTTONS.
00182P 004E 1F   98      A        TFR    B,A      SAVE ROW STATUS
00183P 0050 73   FF02    A        COM    P0PDRB   FORCE 1'S TO COLUMNS
00184P 0053 8D   C9   001E        BSR    CHKROW   CHECK FOR JOYSTICK BUTTONS
00185P 0055 C1   FF      A        CMPB   #$ff     AS 0'S ON THE PA0 OR PA1
00186P 0057 26   67   00C0        BNE    NONKEY   MEAN BUTTONS ARE DOWN
00187P 0059 A7   80      A        STA    0,X+     SAVE FULL ROW STATE IN ROLLOVER TABLE
00188                      * AT THIS POINT A CHANGE IN THE STATE OF THE ROWS HAS BEEN DETECTED
00189                      * SO THE FOLLOWINS CODE IS USED TO DETECT WHICH KEY IT WAS
00190  005B 6F   E4      A        CLR    0,S      RESET COLUMN COUNT
00191P 005D C6   FE      A        LDB    #$FE     SET UP 0 IN LS BIT
00192P 005F F7   FF02    A        STB    P0PDRB   AND SEND OUT TO MATRIX COLUMNS
00193P 0062 8D   BA   001E SCANKB BSR    CHKROW   CHECK ROW CLOSURES
00194P 0064 E7   61      A        STB    1,S      SAVE ROW STATE AWAY
00195P 0066 E8   84      A        EORB   0,X      PERFORM KEY CLOSURE AND ROLLOVER DETECTION
00196P 0068 E4   84      A        ANDB   0,X      BIT SET IN B IF IT DIFFERED FROM LAST TIME
00197P 006A A6   61      A        LDA    1,s      RESTORE ROW STATE AND
00198P 006C A7   80      A        STA    0,X+     SAVE IN ROLLOVER TABLE FOR NEXT TIME
00199P 006E 5D                    TSTB            ANY CHANGES TO KEYS?
00200P 006F 26   0A   007B        BNE    DEBKEY   YES, DEBOUNCE BEFORE ENCODING
00201P 0071 6C   E4      A        INC    0,S      ELSE UPDATE COLUMN COUNT
00202P 0073 43                    COMA            USED TO SET CARRY BIT
00203P 0074 79   FF02    A        ROL    P0PDRB   BEFORE SHIFTING 0 To NEXT COLUMN
00204P 0077 25   E9   0062        BCS    SCANKB   REPEAT UNTIL ALL DONE OR CLOSURE FOUND
00205P 0079 20   45   00C0        BRA    NONKEY   MUST HAVE BEEN NO KEYS FOUND
00206                      * KEY FOUND - DEBOUNCE IT
00207P 007B 9E   97      A DEBKEY LDX    KBDLAY   WAIT DEBOUNCE PERIOD
00208P 007D 8D   9A   0019        BSR    IXDLAY   BEFORE RE-CHECKING KB
00209P 007F 1E   89      A        EXG    A,B      COPY ORIGINAL KEY CLOSURE
00210P 0081 8D   9B   001E        BSR    CHKROW   AND GET NEW STATE
00211P 0083 E1   61      A        CMPB   1,S      AND COMPARE WITH ORIGINAL
00212P 0085 1E   89      A        EXG    A,B      RESTORE KEY CLOSURE
00213P 0087 26   37   00C0        BNE    NONKEY   IF NO MATCH NO KEY RETURNED
00214                      * MUST BE A VALID KEY AT THIS POINT SO ENCODE IT
00215P 0089 A6   E4      A        LDA    0,S      PICK UP COLUMN COUNT
00216P 008B 80   08      A        SUBA   #COLS    OFFSET IT
00217P 008D 8B   08      A NXTROW ADDA   #COLs    CALCULATE KEY POSITION AS FOLLOWS
00218P 008F 54                    LSRB            KEY POS = (ROWPPOS)*(COLS) + (COL POS)
00219P 0090 24   FB   008D        BCC    NXTROW   ROW POS = BIT SET IN (B)
00220P 0092 4D                    TSTA            KEY POS = 0 IS A
00221P 0093 27   32   00C7        BEQ    KEY0     SPECIAL CASE
00222P 0095 81   0C      A        CMPA   #$0C     CHECK NUMERIC KEY RANGE
00223P 0097 25   17   00B0        BLO    NUMKEY   WHICH IS $00 - $0B
00224P 0099 81   11      A        CMPA   #$11     CHECK SPECIAL CASE RANGE
00225P 009B 25   28   00C5        BLO    SPEC1    WHICH IS $0C - $10
00226P 009D 81   2A      A        CMPA   #$2A     AND FINALLY CHECK RANGE
00227P 009F 22   22   00C3        BHI    SPEC2    $2B ONWARDS SPECIAL CASE
00228                      * MUST BE ALPHABETIC CHARACTER IF HERE
00229P 00A1 8B   30      A        ADDA   #$30     ADD OFFSET FOR ASCII UPPER CASE
00230P 00A3 8D   86   002B        BSR    CSHIFT   AND CHECK WHETHER TO SHIFT
00231P 00A5 27   12   00B9        BEQ    CODED    IF SHIFT THEN UPPER CASE REMAINS
00232                      * COULD BE LOWER CASE AT THIS POINT SO CHECK ALPHA LOCK

PAGE  005  ECBO64  .SA:1  IODRVR I/O DRIVER SUBROUTINES

00233P 00A7 7D   0149    A        TST    ALLOCK
00234P 00AA 26   0D   00B9        BNE    CODED    IF ON THEN UPPER CASE OK
00235P 00AC 8A   20      A        ORA    #$20     ELSE CONVERT TO LOWER CASE
00236P 00AE 20   09   00B9        BRA    CODED    BEFORE EXIT
00237                      * NUMERIC (+ OTHERS) ENCODED HERE
00238P 00B0 8B   30      A NUMKEY ADDA   #$30     CONVERT TO ASCII
00239P 00B2 17   FF76 002B        LBSR   CSHIFT   CHECK SHIFT KEY
00240P 00B5 26   02   00B9        BNE    CODED    UNSHIFTED - NO CHANGE
00241P 00B7 80   10      A        SUBA   #$10     ELSE CONVERT YO UPPER SET
00242P 00B9 81   12      A CODED  CMPA   #SHIFT0  CHECK FOR ALPHA LOCK TOGGLE
00243P 00BB 26   04   00C1        BNE    POLEND
00244P 00BD 73   0149    A        COM    ALLOCK   TOGGLE IF FOUND
00245P 00C0 4F             NONKEY CLRA            NO KEY CLOSURE EXIT CONDITION
00246P 00C1 35   90      A POLEND PULS   X,PC     TIDY UP WORKSPACE AND RETURN
00247                      * SPECIAL CASES FOLLOW
00248P 00C3 80   1A      A SPEC2  SUBA   #26      MAKE SPECIAL CASES CONTIGUOUS
00249P 00C5 80   0B      A SPEC1  SUDA   #11      AND OFFSET IN RANGE 1 ->
00250P 00C7 48             KEY0   ASLA            2 ENTRIES/KEY
00251P 00C8 17   FF60 002B        LBSR   CSHIFT   CHECK FOR SHIFTED SET
00252P 00CB 26   01   00CE        BNE    LOOKUP
00253P 00CD 4C                    INCA            SHIFTED SET ENTRY OFFSET
00254P 00CE 8E   00D5    P LOOKUP LDX    #KEYTAB  SET UP LOOKUP TABLE BASE
00255P 00D1 A6   86      A        LDA    A,X      LOOKUP KEY ENTRY
00256P 00D3 20   E4   00B9        BRA    CODED    AND RETURN IT
00257                      * KEY CODE LOOKUP TABLE FOLLOWS
00258                      * SECOND ENTRY OF EACH IS THE SHIFTED KEY
00259P 00D5      30      A KEYTAB FCB    '0,SHIFT0
00260P 00D7      2C      A        FCB    ',,'<
00261P 00D9      2D      A        FCB    '-,'=
00262P 00DB      2E      A        FCB    '.,'>
00263P 00DD      2F      A        FCB    '/,'?
00264P 00DF      40      A        FCB    '@,$13
00265P 00E1      5E      A        FCB    $5E,$5F  UP ARROW
00266P 00E3      0A      A        FCB    LF,$5B   DOWN ARROW
00267P 00E5      08      A        FCB    BS,$15   LEFT ARROW
00268P 00E7      09      A        FCB    $09,$5D  RIGHT ARROW
00269P 00E9      20      A        FCB    SP,SP    SPACE
00270P 00EB      0D      A        FCB    CR,CR    ENTER
00271P 00ED      0C      A        FCB    $0C,$5C  CLEAR
00272P 00EF      03      A        FCB    $03,$03  BREAK
00273                      *
00274                      * SCREEN OUTPUT ROUTINES FOLLOW
00275                      *
00278                      * CLREOL - CLEARS THE SCREEN TO THE END OF THE CURRENT LINE
00277                      *
00278P 00F1 86   60      A CLREOL LDA    #INVSP   FILL REST OF THE LINE
00279P 00F3 A7   80      A        STA    0,X+     SPACES WRITTEN TO VRAM
00280P 00F5 1F   10      A        TFR    X,D      NOW CHECK FOR EOL
00281P 00F7 C4   1F      A        ANDB   #$1F     BY ANDING WITH LINE LENGTH
00282P 00F9 26   F6   00F1        BNE    CLREOL   REPEATS UNTIL COL 32
00283P 00FB 39                    RTS
00284                      *
00285                      * SCROUT - OUTPUTS A CHARACTER TO THE SCREEN
00286                      *
00287                             XDEF   ZSCROU
00288            00FC    P ZSCROU EOU    *
00289P 00FC 34   16      A SCROUT PSHS   A,B,X    SAVE REGS
00290P 00FE 9E   88      A        LDX    CURADR   FETCH CURSOR POSITION

PAGE  006  ECBO64  .SA:1  IODRVR I/O DRIVER SUBROUTINES

00291P 0100 81   08      A        CMPA   #BS      CHECK FIRST FOR BACK SPACE
00292P 0102 26   0B   010F        BNE    CHKCR
00293                      * BACK SPACE TO BE OUTPUT
00294P 0104 8C   0400    A        CMPX   #HOMPOS  CAN'T BACK UP WHEN HOMED
00295P 0107 27   3B   0144        BEQ    SCEXIT   SO EXIT
00296P 0109 86   60      A        LDA    #INVSP   PREPARE TO DELETE CURRENT
00297P 010B A7   82      A        STA    0,-X     CHARACTER AND MOVE LEFT
00298P 010D 20   1D   012C        BRA    NXTPOS   THEN UPDATE SCREEN POS
00299P 010F 81   0D      A CHKCR  CMPA   #CR      NOW CHECK FUR ENTER
00300P 0111 26   04   0117        BNE    CHKCNT
00101P 0113 8D   DC   00F1        BSR    CLREOL   CLEAR TO EOL IF IT IS
00302P 0115 20   15   012C        BRA    NXTPOS
00303                      * CHECK FOR CONTROL CHARACTERS NOW
00304P 0117 81   20      A CHKCNT CMPA   #SP      NON-PRINTING CHARACTER
00305P 0119 25   29   0144        BLO    SCEXIT   YES, THEN EXIT
00306P 011B 4D                    TSTA            ELSE CHECK FOR GRAPHIC (MS BIT SET)
00307P 011C 2B   0C   012A        BMI    OUTCHR   OUTPUT AS IS IF FOUND
00308P 011E 81   40      A        CMPA   #$40     NON-ALPHA CHECK
00309P 0120 25   06   0128        BLO    CONVCH
00310P 0122 81   60      A        CMPA   #$60     LOWER CASE ALPHAS
00311P 0124 25   04   012A        BLO    OUTCHR   OUTPUT AS IS IF NOT
00312P 0126 84   DF      A        ANDA   #$DF     LCASE SO MASK OFF D6
00313P 0128 88   40      A CONVCH EORA   #$40     INVERT CHARACTER
00314P 012A A7   80      A OUTCHR STA    0,X+     UPDATE VRAM AT CURSOR
00315P 012C 9F   88      A NXTPOS STX    CURADR   UPDATE CURSOR POSITION
00316P 012E 8C   05FF    A        CMPX   #EOSPOS  REACHED END OF SCREEN?
00317P 0131 23   11   0144        BLS    SCEXIT   NO, SD EXIT OK
00318P 0133 8E   0400    A        LDX    #HOMPOS  YES, THEN SCROLL UP BY
00319P 0136 EC   88 20   A SCROLL LDD    $20,X    COPYING EACH LINE TO
00320P 0139 ED   81      A        STD    0,X++    THE ONE ABOVE
00321P 013B 8C   05E0    A        CMPX   #BLPOS   UNTIL LAST LINE DONE
00322P 013E 25   F6   0136        BLO    SCROLL
00323                      * NOW AT START OF THE BOTTOM LINF
00324P 0140 9F   88      A        STX    CURADR   SAVE NEW CURSOR POSITION
00325P 0142 8D   AD   00F1        BSR    CLREOL   BEFORE CLEARING BDTTOM LINE
00326P 0144 35   96      A SCEXIT PULS   A,B,X,PC RESTORE AND RETURN
00327                      *
00328                      * LINE PRINTER ROUTINES FOLLOW
00329                      *
00330                      * TXLPCH - TRANSMITS A CHARACTER TO THE LINE PRINTER
00331                      *
00332P 0146 34   04      A TXLPCH PSHS   b        SAVE REG
00333P 0148 7D   03FF    A        TST    PRNFLG   PARALLEL OR SERIAL ?
00334P 014B 7E   0315    P        JMP    PRNSEL   SELECT WHICH ONE
00335P 014E B7   FF02    A LPROUT STA    P0PDRB   SEND CHARACTER OUT
00336P 0151 C6   02      A        LDB    #2       SET UP STROBE BIT
00337P 0153 F7   FF20    A        STB    P1PDRA   SEND STROBE, PULSE HI
00338P 0156 7F   FF20    A        CLR    P1PDRA   THEN PULSE LO
00339                      * N.B. THE STROBE PULSE IS INVERTED BY THE LS02 SO
00340                      * ACTUAL STROBE TO PRINTER IS LO FOLLOWED BY HI.
00341P 0159 35   84      A        PULS   B,PC     RESTORE AND RETURN
00342                      *
00343                      * TXEOL - TRANSMITS THE END OF LINE TERMINATIN6 SEQUENCE
00344                      *
00345P 015B 8E   014A    A TXEOL  LDX    #EOLSEQ  SET UP EOL SEQUENCE ADDRESS
00346P 015E E6   80      A        LDB    0,X+     GET COUNT OF CHARACTERS IN IT
00347P 0160 27   07   0169 TXSEQ  BEQ    ENDSEQ   YES, SO FINISH
00348P 0162 A6   80      A        LDA    0,X+     PICK UP NEXT CHARACTER

