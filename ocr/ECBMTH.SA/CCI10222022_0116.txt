PAGE  002  ECBMTH  .SA:1  MATH P EXTERNAL DECLARATIONS

00718
00719                             TTL    FLOATING POINT MATH PACKAGE CONFIGURATION.
00720
00721
00722                      *    THROUGHOUT THE MATH PACKAGE.
00723                      *
00724                      * THE FLOATING POINT FORMAT IS AS FOLLOWS:
00725                      *
00726                      * THE SIGN IS THE FIRST BIT OF THE MANTISSA.
00727                      * THE MANTISSA IS 24 BITS LONG.
00728                      * THE BINARY POINT IS TO THE LEFT OF THE MSB.
00729                      * NUMBER = MANTISSA * 2 ^ EXPONENT.
00730                      * THE MANTISSA IS POSITIVE WITH A ONE ASSUMED TO BE WHERE THE SIGN
00731                      * BIT IS.
00732                      * THE SIGN OF THE EXPONENT IS THE FIRST BIT OF THE EXPONENT.
00733                      * THE EXPONENT IS STORED IN EXCESS 200, I.E. WITH A BIAS OF +200.
00734                      * SO, THE EXPONENT IS A SIGNED 8-BIT NUMBER WITH 200 ADDED TO IT.
00735                      * AN EXPONENT OF ZERO MEANS THE NUMBER IS ZERO.
00736                      * THE OTHER BYTES MAY NOT BE ASSUMED TO BE ZERO.
00737                      * TO KEEP THE SAME NUMBER IN THE FAC WHILE SHIFTING,
00738                      *  TO SHIFT RIGHT, EXP:=EXP+1
00739                      *  TO SHIFT LEFT,  EXP:=EXP-1
00740                      *
00741                      * IN MEMORY THE NUMBER LOOKS LIKE THIS:
00742                      *  [THE EXPONENT AS A SIGNED NUMBER +200]
00743                      *  [THE SIGN BIT IN 7, BITS 2-8 OF MANTISSA ARE IN BITS 6-0].
00744                      *   (REMEMBER BIT 1 OF MANTISSA IS ALWAYS A ONE.)
00745                      *  [BITS 9-16 OF THE MANTISSA]
00746                      *  [BITS 17-24] OF THE MANTISSA]
00747                      *
00748                      * ARITHMETIC ROUTINE CALLING CONVENTIONS:
00749                      *
00750                      * FOR ONE ARGUMENT FUNCTIONS:
00751                      *  THE ARGUMENT IS IN THE FAC.
00752                      *  THE RESULT IS LEFT IN THE FAC.
00753                      * FOR TWO ARGUMENT OPERATIONS:
00754                      *  THE FIRST ARGUMENT IS IN ARG (ARGEXP,HO,MO,LO AND ARGSGN).
00755                      *  THE SECOND ARGUMENT IS IN THE FAC.
00756                      *  THE RESULT IS LEFT IN THE FAC.
00757                      *
00758                      * THE "T" ENTRY POINTS TO THE TWO-ARGUMENT OPERATIONS HAVE BOTH ARGUMENTS
00759                      * SETUP IN THE RESPECTIVE REGISTERS. BEFORE CALLING ARG MAY HAVE BEEN
00760                      * POPPED OFF THE STACK AND INTO ARG, FOR EXAMPLE.
00761                      * THE OTHER ENTRY POINT ASSUMES [XREG] POINTS TO THE ARGUMENT
00762                      * SOMEWHERE IN MEMORY. IT IS UNPACKED INTO ARG BY "CONUPK".
00763                      *
00764                      * ON THE STACK, THE SGN IS PUSHED ON FIRST, THE LO,MO,HO AND FINALLY EXP.
00765                      * NOTE ALL THINGS ARE KEPT UNPACKED IN ARG, FAC AND ON THE STACK.
00766                      *
00767                      * IT IS ONLY WHEN SOMETHING IS STORED AWAY THAT IT IS PACKED TO FOUR
00768                      * BYTES. THE UNPACKED FORMAT HAS A SGN BYTE REFLECTING THE SIGN OF THE
00769                      * NUMBER (POSITIVE=0, NEGATIVE=-1) A HO,MO AND LO WITH THE HIGH BIT
00770                      * OF THE HO TURNED ON. THE EXP IS THE SAME AS STORED FORMAT.
00771                      * THIS IS DONE FOR SPEED OF OPERATION. 
00772                      *
