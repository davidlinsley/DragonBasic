PAGE  009  ECBEXT  .SA:1  EXTEND MID$ Assignment (MID$ on the Left Side).

01166P 024E 34   40      A        PSHS   U        Resave the descriptor pointer.
01167P 0250 BD   0000    A LHMD10 JSR    COMBYT   Skip comma, B:=offset into left
01168                      *    string.
01169P 0253 34   04      A        PSHS   B        Save the offset.
01170P 0255 5D                    TSTB            Give a Function Call error if the
01171P 0256 27   1F   0277        BEQ    XRFC1    offset is zero.
01772P 0258 C6   FF      A        LDB    #&255    Assume no third argument, in which
01173                      *    case as many chars as possible will
01174                      *    be replaced.
01175P 025A 81   29      A        CMPA   #CLSPAR  Arrived at the closing parenthesis?
01176P 025C 27   03   0261        BEQ    LHMD30   Yes, no third argument.
01177P 025E BD   0000    A        JSR    COMBYT   No, skip the comma and evaluate the
01178                      *    number of chars to replace.
01179P 0261 34   04      A LHMD30 PSHS   B        Save the number of chars to replace.
01180P 0263 BD   0000    A        JSR    CHKCLS   Eat the closing parenthesis and
01181P 0266                       SYNCHK EQULTK   the equals sign.
01182P 026B 8D   2E   029B        BSR    EVLSTR   Evaluate the right string
01183                      *    formula, B:=length, X:=pointer to
01184                      *    string data.
01185P 026D 1F   13      A        TFR    X,U      Save pointer in U.
01186P 026F AE   62      A        LDX    &2,S     X:=pointer to left string
01187                      *    descriptor.
01188P 0271 A6   84      A        LDA    ,X       A:=length of left string.
01189P 0273 A0   61      A        SUBA   &1,S     Is the specified offset beyond the
01190                      *    end of the left string?
01191P 0275 24   03   027A        BHS    LHMD35   No.
01192P 0277 7E   0000    A XRFC1  JMP    FCERR    Yes, give FC error.
01193
01194P 027A 4C             LHMD35 INCA            No, A:=number of chars between the
01195                      *    offset and theend of the left
01196                      *    string.
01197P 027B A1   E4      A        CMPA   ,S       Is the number of chars that can be
01198                      *    replaced greater than or equal to
01199                      *    the specified number or default (255)?
01200P 027D 24   02   0281        BHS    LHMD40   Yes, use the use the specified or
01201                      *    default number.
01202P 027F A7   E4      A        STA    ,S       No, use the lesser number.
01203P 0281 A6   61      A LHMD40 LDA    &1,S     A:=offset into left string.
01204P 0283 1E   89      A        EXG    A,B      A:=length of right string,
01205                      *    B:=offset into left string.
01206                      *    (Want to use ABX below since it
01207                      *    does an unsigned addition.)
01208P 0285 AE   02      A        LDX    &2,X     X:=pointer to left string data.
01209P 0287 5A                    DECB            X:=pointer into left string
01210P 0288 3A                    ABX             where replacement will begin.
01211P 0289 4D                    TSTA            Is the right string null?
01212P 028A 27   0D   0299        BEQ    LHMD60   Yes, no replacement can be done.
01213P 028C A1   E4      A        CMPA   ,S       No, is the right string shorter 
01214                      *    than the number of chars to be
01215                      *    replaced?
01216P 028E 23   02   0292        BLS    LHMD50   Yes, only replace the number of chars
01217                      *    contained in the right string.
01218P 0290 A6   E4      A        LDA    ,S       No, use the replacement count
01219                      *    previously determined.
01220P 0292 1F   89      A LHMD50 TFR    A,B      B:=number of chars to move.
01221P 0294 1E   31      A        EXG    U,X      X:=source pointer (right string),
01222                      *    U:=destination pointer (left
01223                      *    string).
